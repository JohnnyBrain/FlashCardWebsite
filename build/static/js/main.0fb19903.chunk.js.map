{"version":3,"sources":["index.js","../node_modules/express/lib sync"],"names":["express","require","response","fs","Datastore","argon2","app","resolve","listen","console","log","use","static","json","limit","database","hashPassword","password","a","hash","verifyPassword","hashPass","verify","loadDatabase","post","req","res","body","appendFile","JSON","stringify","err","error","status","DeckList","then","rtn","update","username","get","find","data","sendDeckList","name","length","i","success","insert","webpackEmptyContext","e","Error","code","keys","module","exports","id"],"mappings":"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","file":"static/js/main.0fb19903.chunk.js","sourcesContent":["\n\nconst { response } = require('express');\nconst express = require('express');\nconst fs = require('fs');\nconst mysql = require('mysql');\nconst Datastore = require('nedb');\nconst argon2 = require('argon2');\nconst { resolve } = require('path');\n\nconst app = express();\napp.listen(3000, () => console.log('working!'));\napp.use(express.static('src'));\n//makes server able to understand incoming data as json.\napp.use(express.json({ limit: '1mb' }));\n//app.use(express.json({strict: false}));\nconst database = new Datastore('database.db');\ndatabase.loadDatabase();\n\nfunction readDataFile() {\n  var sendDeckList = [];\n  /*return fs.readFileSync('Data.txt', function(err, data) {\n      if(err){\n        throw err;\n      }\n      var deckList = data.toString().split(\"\\n\");\n      for(i in deckList) {\n          //console.log(JSON.parse(deckList[i]).deckList[0].name);\n          var tempDeck = JSON.parse(deckList[i]).deckList;\n          for(i in tempDeck){\n            //var deckName = tempDeck[i].name;\n            var newDeck = new Deck(tempDeck[i].name);\n            var cardList = tempDeck[i].cardList;\n            for(i in cardList){\n              var newCard = new Card(cardList[i].front, cardList[i].back);\n              newDeck.addCard(newCard);\n            }\n            sendDeckList.push(newDeck);\n            //console.log(newDeck.getName());\n            //console.log(newDeck.getCardList());\n            //console.log(deckName);\n          }\n      }\n      //console.log(sendDeckList);\n      //return sendDeckList;\n  });*/\n  /*\n  return fs.readFileSync('Data.txt', function(err, data) {\n    if(err){\n      throw err;\n    }\n    var deckList = data.toString().split(\"\\n\");\n    for(i in deckList) {\n        //console.log(JSON.parse(deckList[i]).deckList[0].name);\n        var tempDeck = JSON.parse(deckList[i]).deckList;\n        for(i in tempDeck){\n          //var deckName = tempDeck[i].name;\n          sendDeckList.push([]);\n          sendDeckList[i].push(tempDeck[i].name);\n          var cardList = tempDeck[i].cardList;\n          for(i in cardList){\n            sendDeckList[i].push([cardList[i].front, cardList[i].back]);\n          }\n          //console.log(newDeck.getName());\n          //console.log(newDeck.getCardList());\n          //console.log(deckName);\n        }\n        \n    }\n    //return sendDeckList;\n  });\n  */\n  //console.log(sendDeckList);\n  //return sendDeckList;\n}\n\n\n//connects the server to the client to recieve and send data. Request is what the client sends to the server, ie data. \n// the ressponse is what the server sends beck to the client, ie a confirmation upon recieving the data.\napp.post('/api', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.appendFile('./Data.txt', JSON.stringify(/*req.body.time*/ req.body) + \"\\n\", err => {\n    if (err) {\n      console.error(err);\n    }\n    // file written successfully\n  });\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n\n/*\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.writeFile('./Data.txt', JSON.stringify(/*req.body.time*//* req.body) + \"\\n\", err => {\n  if (err) {\n    console.error(err);\n  }\n  // file written successfully\n});\n//what is being sent back to the client\nres.json({\n  status: 'success',\n  DeckList: req.body\n});\n});\n*/\n\n//ONLY WORKS IF NO TWO USERNAMES ARE THE SAME\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  //database.insert(req.body);\n  //database.insert(req.body[0].sendDeckList);\n\n  //what was used before adding hashing\n  //database.update({username: req.body.username, password: req.body.password}, req.body);\n\n  const hash = hashPassword(req.body.password).then(rtn => {\n    req.body.password = rtn;\n    database.update({ username: req.body.username }, req.body);\n  });\n\n\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n\n/*\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n    console.log(\"good\");\n    //res.send(\"high\");\n    var rtnList = readDataFile();\n    console.log(rtnList);\n    //rtnList = ['h', 'h'];\n    res.send(rtnList);\n});\n*/\n\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n  console.log(\"good\");\n  //res.send(\"high\");\n  database.find({}, (err, data) => {\n    if (err) {\n      console.log(err);\n    }\n    res.json(data);\n    console.log(data[0].sendDeckList[0].name);\n  });\n  //console.log(rtnList);\n  //rtnList = ['h', 'h'];\n  //res.send(rtnList);\n});\n\napp.post('/login', (req, res) => {\n  console.log(\"good\");\n  //res.send(\"high\");\n\n  database.find({ username: req.body.username }, (err, data) => {\n    if (data.length == 0) {\n      console.log(\"err\");\n      console.log(data);\n      res.json({});\n    }\n    else {\n      //this is just test stuff you can delete it\n      console.log(data[0].password);\n      console.log(req.body.password);\n      const bing = verifyPassword(data[0].password, req.body.password).then(rtn => {\n        console.log(rtn);\n        console.log(data[0]);\n      });\n\n      for (let i = 0; i < data.length; i++) {\n        const verify = verifyPassword(data[i].password, req.body.password).then(rtn => {\n          if (rtn) {\n            res.json([data[i]]);\n            console.log('login succesful');\n          }\n        })\n      }\n      //res.json(data);\n      /*\n      console.log(data);\n      res.json(data);\n      console.log(data[0].sendDeckList[0].name);\n      console.log(req.body.username);\n      */\n    }\n  });\n\n  /*\n  database.find({username: req.body.username, password: req.body.password}, (err, data) => {\n    if(data.length == 0){\n      console.log(\"err\");\n      console.log(data);\n      res.json({});\n    }\n    else{\n      console.log(data);\n      res.json(data);\n      console.log(data[0].sendDeckList[0].name);\n      console.log(req.body.username);\n    }\n  });\n  */\n  /*\n    const hash = hashPassword(req.body.password).then(rtn => {\n      console.log(rtn);\n      req.body.password = rtn;\n      database.find({username: req.body.username, password: req.body.password}, (err, data) => {\n        if(data.length == 0){\n          console.log(\"err\");\n          res.json({});\n        }\n        else{\n          console.log(data);\n          res.json(data);\n          console.log(data[0].sendDeckList[0].name);\n          console.log(req.body.username);\n        }\n      });\n    });\n    */\n\n  //console.log(rtnList);\n  //rtnList = ['h', 'h'];\n  //res.send(rtnList);\n});\n\n//hashes the password\nasync function hashPassword(password) {\n  try {\n    const hash = await argon2.hash(password);\n    return hash;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\n//checks if a hashed password and the normal password are the same and returns as boolean\nasync function verifyPassword(hashPass, password) {\n  try {\n    const verify = await argon2.verify(hashPass, password);\n    return verify;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\napp.post('/createAccount', (req, res) => {\n  var username = req.body.username;\n  var password = req.body.password;\n  database.find({ username: req.body.username }, (err, data) => {\n    console.log(data.length);\n    if (data.length != 0) {\n      console.log(\"err\");\n      console.log(data);\n      res.json({ success: \"bad\" });\n    }\n    else {\n      const hash = hashPassword(password).then(rtn => {\n        console.log(rtn);\n        req.body.password = rtn;\n        database.insert(req.body);\n\n        res.json({ success: \"good\" });\n\n        /*res.json({\n          username: req.body.username,\n          password: rtn\n        });*/\n      });\n    }\n  });\n\n  //database.insert(req.body);\n\n  //what is being sent back to the client\n  //res.json({\n  //status: 'success',\n  //DeckList: req.body\n  //});\n});\n\n\n\n\n//console.log(\"high\");\n\n/*\nconst fs = require('fs');\nconst content = 'Some content!';\n\nfs.writeFile('./Data.txt', content, err => {\n  if (err) {\n    console.error(err);\n  }\n  // file written successfully\n});\n*/\n\n//const myURL = new URL('/foo', 'https://example.org/');\n\n//console.log('good');\n\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 280;"],"sourceRoot":""}