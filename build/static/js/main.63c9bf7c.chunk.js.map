{"version":3,"sources":["index.js","../node_modules/express/lib sync"],"names":["require","response","express","fs","Datastore","app","listen","console","log","use","static","json","limit","database","loadDatabase","post","req","res","body","appendFile","JSON","stringify","err","error","status","DeckList","update","username","password","get","find","data","sendDeckList","name","length","insert","webpackEmptyContext","e","Error","code","keys","resolve","module","exports","id"],"mappings":"+GAEqBA,EAAQ,IAArBC,SAAR,IACMC,EAAUF,EAAQ,IAClBG,EAAKH,EAAQ,IAEbI,GADQJ,EAAQ,KACJA,EAAQ,MAEpBK,EAAMH,IACZG,EAAIC,OAAO,KAAM,kBAAMC,QAAQC,IAAI,eACnCH,EAAII,IAAIP,EAAQQ,OAAO,QAEvBL,EAAII,IAAIP,EAAQS,KAAK,CAACC,MAAO,SAE7B,IAAMC,EAAW,IAAIT,EAAU,eAC/BS,EAASC,eA8DTT,EAAIU,KAAK,QAAQ,SAACC,EAAKC,GACrBV,QAAQC,IAAI,oBACZD,QAAQC,IAAIQ,EAAIE,MAChBf,EAAGgB,WAAW,aAAcC,KAAKC,UAA4BL,EAAIE,MAAQ,MAAM,SAAAI,GACzEA,GACFf,QAAQgB,MAAMD,MAKlBL,EAAIN,KAAK,CACPa,OAAQ,UACRC,SAAUT,EAAIE,UAsBlBb,EAAIU,KAAK,iBAAiB,SAACC,EAAKC,GAC9BV,QAAQC,IAAI,oBACZD,QAAQC,IAAIQ,EAAIE,MAGhBL,EAASa,OAAO,CAACC,SAAUX,EAAIE,KAAKS,SAAUC,SAAUZ,EAAIE,KAAKU,UAAWZ,EAAIE,MAEhFD,EAAIN,KAAK,CACPa,OAAQ,UACRC,SAAUT,EAAIE,UAiBlBb,EAAIwB,IAAI,YAAY,SAACb,EAAKC,GACxBV,QAAQC,IAAI,QAEZK,EAASiB,KAAK,IAAI,SAACR,EAAKS,GACnBT,GACDf,QAAQC,IAAIc,GAEdL,EAAIN,KAAKoB,GACTxB,QAAQC,IAAIuB,EAAK,GAAGC,aAAa,GAAGC,YAOxC5B,EAAIU,KAAK,UAAU,SAACC,EAAKC,GACvBV,QAAQC,IAAI,QAEZK,EAASiB,KAAK,CAACH,SAAUX,EAAIE,KAAKS,SAAUC,SAAUZ,EAAIE,KAAKU,WAAW,SAACN,EAAKS,GAC5D,GAAfA,EAAKG,QACN3B,QAAQC,IAAI,OACZS,EAAIN,KAAK,MAGTJ,QAAQC,IAAIuB,GACZd,EAAIN,KAAKoB,GACTxB,QAAQC,IAAIuB,EAAK,GAAGC,aAAa,GAAGC,MACpC1B,QAAQC,IAAIQ,EAAIE,KAAKS,iBAQ3BtB,EAAIU,KAAK,kBAAkB,SAACC,EAAKC,GAC/BJ,EAASsB,OAAOnB,EAAIE,MAEpBD,EAAIN,KAAK,CACPa,OAAQ,UACRC,SAAUT,EAAIE,W,0ICjLlB,SAASkB,EAAoBpB,GAC5B,IAAIqB,EAAI,IAAIC,MAAM,uBAAyBtB,EAAM,KAEjD,MADAqB,EAAEE,KAAO,mBACHF,EAEPD,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBK,QAAUL,EAC9BM,EAAOC,QAAUP,EACjBA,EAAoBQ,GAAK,K","file":"static/js/main.63c9bf7c.chunk.js","sourcesContent":["\n\nconst { response } = require('express');\nconst express = require('express');\nconst fs = require('fs');\nconst mysql = require('mysql');\nconst Datastore = require('nedb');\n\nconst app = express();\napp.listen(3000, () => console.log('working!'));\napp.use(express.static('src'));\n//makes server able to understand incoming data as json.\napp.use(express.json({limit: '1mb'}));\n//app.use(express.json({strict: false}));\nconst database = new Datastore('database.db');\ndatabase.loadDatabase();\n\nfunction readDataFile(){\n  var sendDeckList = [];\n  /*return fs.readFileSync('Data.txt', function(err, data) {\n      if(err){\n        throw err;\n      }\n      var deckList = data.toString().split(\"\\n\");\n      for(i in deckList) {\n          //console.log(JSON.parse(deckList[i]).deckList[0].name);\n          var tempDeck = JSON.parse(deckList[i]).deckList;\n          for(i in tempDeck){\n            //var deckName = tempDeck[i].name;\n            var newDeck = new Deck(tempDeck[i].name);\n            var cardList = tempDeck[i].cardList;\n            for(i in cardList){\n              var newCard = new Card(cardList[i].front, cardList[i].back);\n              newDeck.addCard(newCard);\n            }\n            sendDeckList.push(newDeck);\n            //console.log(newDeck.getName());\n            //console.log(newDeck.getCardList());\n            //console.log(deckName);\n          }\n      }\n      //console.log(sendDeckList);\n      //return sendDeckList;\n  });*/\n  /*\n  return fs.readFileSync('Data.txt', function(err, data) {\n    if(err){\n      throw err;\n    }\n    var deckList = data.toString().split(\"\\n\");\n    for(i in deckList) {\n        //console.log(JSON.parse(deckList[i]).deckList[0].name);\n        var tempDeck = JSON.parse(deckList[i]).deckList;\n        for(i in tempDeck){\n          //var deckName = tempDeck[i].name;\n          sendDeckList.push([]);\n          sendDeckList[i].push(tempDeck[i].name);\n          var cardList = tempDeck[i].cardList;\n          for(i in cardList){\n            sendDeckList[i].push([cardList[i].front, cardList[i].back]);\n          }\n          //console.log(newDeck.getName());\n          //console.log(newDeck.getCardList());\n          //console.log(deckName);\n        }\n        \n    }\n    //return sendDeckList;\n  });\n  */\n  //console.log(sendDeckList);\n  //return sendDeckList;\n}\n\n\n//connects the server to the client to recieve and send data. Request is what the client sends to the server, ie data. \n// the ressponse is what the server sends beck to the client, ie a confirmation upon recieving the data.\napp.post('/api', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.appendFile('./Data.txt', JSON.stringify(/*req.body.time*/ req.body) + \"\\n\", err => {\n    if (err) {\n      console.error(err);\n    }\n    // file written successfully\n  });\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n\n/*\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.writeFile('./Data.txt', JSON.stringify(/*req.body.time*//* req.body) + \"\\n\", err => {\n    if (err) {\n      console.error(err);\n    }\n    // file written successfully\n  });\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n*/\n\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  //database.insert(req.body);\n  //database.insert(req.body[0].sendDeckList);\n  database.update({username: req.body.username, password: req.body.password}, req.body);\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n\n/*\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n    console.log(\"good\");\n    //res.send(\"high\");\n    var rtnList = readDataFile();\n    console.log(rtnList);\n    //rtnList = ['h', 'h'];\n    res.send(rtnList);\n});\n*/\n\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n  console.log(\"good\");\n  //res.send(\"high\");\n  database.find({}, (err, data) => {\n    if(err){\n      console.log(err);\n    }\n    res.json(data);\n    console.log(data[0].sendDeckList[0].name);\n  });\n  //console.log(rtnList);\n  //rtnList = ['h', 'h'];\n  //res.send(rtnList);\n});\n\napp.post('/login', (req, res) => {\n  console.log(\"good\");\n  //res.send(\"high\");\n  database.find({username: req.body.username, password: req.body.password}, (err, data) => {\n    if(data.length == 0){\n      console.log(\"err\");\n      res.json({});\n    }\n    else{\n      console.log(data);\n      res.json(data);\n      console.log(data[0].sendDeckList[0].name);\n      console.log(req.body.username);\n    }\n  });\n  //console.log(rtnList);\n  //rtnList = ['h', 'h'];\n  //res.send(rtnList);\n});\n\napp.post('/createAccount', (req, res) => {\n  database.insert(req.body);\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n})\n\n\n\n\n//console.log(\"high\");\n\n/*\nconst fs = require('fs');\nconst content = 'Some content!';\n\nfs.writeFile('./Data.txt', content, err => {\n  if (err) {\n    console.error(err);\n  }\n  // file written successfully\n});\n*/\n\n//const myURL = new URL('/foo', 'https://example.org/');\n\n//console.log('good');\n\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 275;"],"sourceRoot":""}