{"ast":null,"code":"import { Card } from \"./Card.js\";\nimport { Deck } from \"./Deck.js\";\nimport { FlashCardEdit } from \"./FlashCardEdit.js\";\nimport { HomePage } from \"./HomePage.js\";\nimport { ReturnButton } from \"./ReturnButton.js\"; //visualizes the create deck view. used when creating a deck\n\nexport function DeckEdit(deck, deckList) {\n  document.body.innerHTML = \"\";\n  var tempCardList = [];\n  var tempDeck = new Deck(\"TEMP\");\n\n  for (let i = 0; i < deck.length(); i++) {\n    tempDeck.addCard(deck.getCard(i));\n  }\n\n  const buttonArray = document.createElement(\"div\");\n  buttonArray.appendChild(ReturnButton(deckList));\n  const saveButton = document.createElement(\"button\");\n  saveButton.innerHTML = \"Save\";\n  saveButton.addEventListener(\"click\", function () {\n    if (nameArea.value != 0) {\n      var rtnDeck = new Deck(nameArea.value);\n\n      for (let i = 0; i < tempCardList.length; i++) {\n        rtnDeck.addCard(new Card(tempCardList[i].getElementsByClassName(\"a\")[0].value, tempCardList[i].getElementsByClassName(\"b\")[0].value));\n\n        if (tempCardList[i].getElementsByClassName(\"c\")[0].style.backgroundColor == \"gold\") {\n          rtnDeck.getCard(i).setStar();\n        }\n      }\n\n      for (let i = 0; i < deckList.length; i++) {\n        if (deckList[i].getName() == deck.getName()) {\n          deckList[i] = rtnDeck;\n          break;\n        }\n      }\n      /*tempDeck.setName(nameArea.value);\n      for(let i = 0; i < deckList.length; i++){\n          if(deckList[i].getName() == deck.getName()){\n              deckList[i] = tempDeck;\n              break;\n          }\n      }*/\n\n\n      document.body.innerHTML = \"\";\n      HomePage(deckList);\n    }\n  });\n  buttonArray.appendChild(saveButton);\n  const nameArea = document.createElement(\"textArea\");\n  nameArea.value = deck.getName();\n  buttonArray.appendChild(nameArea);\n  document.body.appendChild(buttonArray);\n  var div = document.createElement(\"div\");\n  div.className = 'cardCreator';\n  var frontText = document.createElement(\"label\");\n  frontText.innerHTML = 'FRONT:   ';\n  div.appendChild(frontText);\n  var front = document.createElement(\"textarea\");\n  div.appendChild(front);\n  var br = document.createElement(\"br\");\n  var backText = document.createElement(\"label\");\n  backText.innerHTML = 'BACK:   ';\n  backText.className = \"backtext\";\n  div.appendChild(backText);\n  var back = document.createElement(\"textarea\");\n  div.appendChild(back);\n  div.appendChild(br);\n  var createButton = document.createElement(\"button\");\n  createButton.innerHTML = 'Create Card'; //when creating a new card while editing\n\n  createButton.addEventListener(\"click\", function () {\n    if (front.value != '' && back.value != '') {\n      //if(!deck.cardExists(front.value, back.value)){\n      //const newCard = new Card(front.value, back.value);\n      //FlashCardEdit(newCard, deck);\n      //deck.addCard(newCard);\n      //front.value = '';\n      //back.value = '';\n      //}\n      const newCard = new Card(front.value, back.value); //FlashCardEdit(newCard, tempDeck);\n\n      tempCardList.push(FlashCardEdit(newCard, tempDeck));\n    } //const newCard = new Card(front.value, back.value);\n    //FlashCardEdit(newCard, deck);\n\n  });\n  /*createButton.addEventListener(\"click\", function(){\n    if(front.value != '' && back.value != ''){\n      front.value = '';\n      back.value = '';\n    } \n  });*/\n\n  div.appendChild(createButton);\n  document.body.appendChild(div);\n\n  for (let i = 0; i < deck.length(); i++) {\n    //FlashCardEdit(tempDeck.getCard(i), tempDeck);\n    tempCardList.push(FlashCardEdit(tempDeck.getCard(i), tempDeck, tempCardList));\n  }\n}\n_c = DeckEdit;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckEdit\");","map":{"version":3,"sources":["/Users/johnbrain/Projects/FlashCardProject/src/block/DeckEdit.js"],"names":["Card","Deck","FlashCardEdit","HomePage","ReturnButton","DeckEdit","deck","deckList","document","body","innerHTML","tempCardList","tempDeck","i","length","addCard","getCard","buttonArray","createElement","appendChild","saveButton","addEventListener","nameArea","value","rtnDeck","getElementsByClassName","style","backgroundColor","setStar","getName","div","className","frontText","front","br","backText","back","createButton","newCard","push"],"mappings":"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","sourcesContent":["import {Card} from \"./Card.js\";\nimport {Deck} from \"./Deck.js\";\nimport {FlashCardEdit} from \"./FlashCardEdit.js\"\nimport { HomePage } from \"./HomePage.js\";\nimport { ReturnButton } from \"./ReturnButton.js\";\n\n\n//visualizes the create deck view. used when creating a deck\nexport function DeckEdit(deck, deckList){\n    document.body.innerHTML = \"\";\n\n    var tempCardList = [];\n\n    var tempDeck = new Deck(\"TEMP\");\n    for(let i = 0; i < deck.length(); i++){\n        tempDeck.addCard(deck.getCard(i));\n    }\n\n    const buttonArray = document.createElement(\"div\");\n\n    buttonArray.appendChild(ReturnButton(deckList));\n\n    const saveButton = document.createElement(\"button\");\n    saveButton.innerHTML = \"Save\";\n    saveButton.addEventListener(\"click\", function(){\n        if(nameArea.value != 0){\n            var rtnDeck = new Deck(nameArea.value);\n            for(let i = 0; i < tempCardList.length; i++){\n                rtnDeck.addCard(new Card(tempCardList[i].getElementsByClassName(\"a\")[0].value, tempCardList[i].getElementsByClassName(\"b\")[0].value));\n                if(tempCardList[i].getElementsByClassName(\"c\")[0].style.backgroundColor == \"gold\"){\n                    rtnDeck.getCard(i).setStar();\n                }\n            }\n            for(let i = 0; i < deckList.length; i++){\n                if(deckList[i].getName() == deck.getName()){\n                    deckList[i] = rtnDeck;\n                    break;\n                }\n            }\n            /*tempDeck.setName(nameArea.value);\n            for(let i = 0; i < deckList.length; i++){\n                if(deckList[i].getName() == deck.getName()){\n                    deckList[i] = tempDeck;\n                    break;\n                }\n            }*/\n            document.body.innerHTML = \"\";\n            HomePage(deckList);\n        }\n    });\n    buttonArray.appendChild(saveButton);\n\n    const nameArea = document.createElement(\"textArea\");\n    nameArea.value = deck.getName();\n    buttonArray.appendChild(nameArea);\n\n    document.body.appendChild(buttonArray);\n\n    var div = document.createElement(\"div\");\n    div.className = 'cardCreator';\n    \n    var frontText = document.createElement(\"label\");\n    frontText.innerHTML = 'FRONT:   ';\n    div.appendChild(frontText);\n    var front = document.createElement(\"textarea\");\n    div.appendChild(front);\n    var br = document.createElement(\"br\");\n    \n    var backText = document.createElement(\"label\");\n    backText.innerHTML = 'BACK:   ';\n    backText.className = \"backtext\";\n    div.appendChild(backText);\n    var back = document.createElement(\"textarea\");\n    div.appendChild(back);\n    div.appendChild(br);\n\n    var createButton = document.createElement(\"button\");\n    createButton.innerHTML = 'Create Card';\n    \n    //when creating a new card while editing\n    createButton.addEventListener(\"click\", function(){\n        if(front.value != '' && back.value != ''){\n            //if(!deck.cardExists(front.value, back.value)){\n                //const newCard = new Card(front.value, back.value);\n                //FlashCardEdit(newCard, deck);\n                //deck.addCard(newCard);\n                //front.value = '';\n                //back.value = '';\n            //}\n            const newCard = new Card(front.value, back.value);\n            //FlashCardEdit(newCard, tempDeck);\n            tempCardList.push(FlashCardEdit(newCard, tempDeck));\n        } \n        //const newCard = new Card(front.value, back.value);\n        //FlashCardEdit(newCard, deck);\n    });\n\n    /*createButton.addEventListener(\"click\", function(){\n      if(front.value != '' && back.value != ''){\n        front.value = '';\n        back.value = '';\n      } \n    });*/ \n\n    div.appendChild(createButton);\n    document.body.appendChild(div);\n\n    for(let i = 0; i < deck.length(); i++){\n        //FlashCardEdit(tempDeck.getCard(i), tempDeck);\n        tempCardList.push(FlashCardEdit(tempDeck.getCard(i), tempDeck, tempCardList));\n    }\n}"]},"metadata":{},"sourceType":"module"}