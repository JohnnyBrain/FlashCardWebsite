{"ast":null,"code":"import { Card } from \"./Card.js\";\nimport { CreateCard } from \"./CreateCard.js\";\nimport { Deck } from \"./Deck.js\";\nimport { FlashCardEdit } from \"./FlashCardEdit.js\";\nimport { HomePage } from \"./HomePage.js\";\nimport { ReturnButton } from \"./ReturnButton.js\"; //visualizes the create deck view. used when creating a deck\n\nexport function DeckCreate(deckList) {\n  document.body.innerHTML = \"\";\n  var tempDeck = new Deck(\"TEMP\");\n  var tempCardList = [];\n  const buttonArray = document.createElement(\"div\");\n  buttonArray.className = \"buttonArray\";\n  buttonArray.appendChild(ReturnButton(deckList));\n  const saveButton = document.createElement(\"button\");\n  saveButton.innerHTML = \"Save\";\n  saveButton.addEventListener(\"click\", function () {\n    if (nameArea.value != 0) {\n      /*tempDeck.setName(nameArea.value);\n      deckList.push(tempDeck);\n      document.body.innerHTML = \"\";\n      HomePage(deckList);*/\n      var rtnDeck = new Deck(nameArea.value);\n\n      for (let i = 0; i < tempCardList.length; i++) {\n        rtnDeck.addCard(new Card(tempCardList[i].getElementsByClassName(\"a\")[0].value, tempCardList[i].getElementsByClassName(\"b\")[0].value));\n\n        if (tempCardList[i].getElementsByClassName(\"c\")[0].style.backgroundColor == \"gold\") {\n          rtnDeck.getCard(i).setStar();\n        }\n      }\n\n      deckList.push(rtnDeck);\n      document.body.innerHTML = \"\";\n      HomePage(deckList);\n    }\n  });\n  buttonArray.appendChild(saveButton);\n  const nameArea = document.createElement(\"textArea\");\n  buttonArray.appendChild(nameArea);\n  document.body.appendChild(buttonArray);\n  /*var div = document.createElement(\"div\");\n  div.className = 'cardCreator';\n  \n  var frontText = document.createElement(\"label\");\n  frontText.innerHTML = 'FRONT:   ';\n  div.appendChild(frontText);\n  var front = document.createElement(\"textarea\");\n  div.appendChild(front);\n  var br = document.createElement(\"br\");\n  \n  var backText = document.createElement(\"label\");\n  backText.innerHTML = 'BACK:   ';\n  backText.className = \"backtext\";\n  div.appendChild(backText);\n  var back = document.createElement(\"textarea\");\n  div.appendChild(back);\n  div.appendChild(br);\n   var createButton = document.createElement(\"button\");\n  createButton.innerHTML = 'Create Card';\n  \n  //when creating a new card while editing\n  createButton.addEventListener(\"click\", function(){\n      if(front.value != '' && back.value != ''){\n          //if(!deck.cardExists(front.value, back.value)){\n              //const newCard = new Card(front.value, back.value);\n              //FlashCardEdit(newCard, deck);\n              //deck.addCard(newCard);\n              //front.value = '';\n              //back.value = '';\n          //}\n          const newCard = new Card(front.value, back.value);\n          //FlashCardEdit(newCard, tempDeck);\n          tempCardList.push(FlashCardEdit(newCard, tempDeck, tempCardList));\n          front.value = \"\";\n          back.value = \"\";\n          front.focus();\n          //tempDeck.addCard(newCard);\n      } \n      //const newCard = new Card(front.value, back.value);\n      //FlashCardEdit(newCard, deck);\n  });\n   /*createButton.addEventListener(\"click\", function(){\n    if(front.value != '' && back.value != ''){\n      front.value = '';\n      back.value = '';\n    } \n  });*/\n\n  /*for(let i = 0; i < deck.length(); i++){\n      FlashCardEdit(deck.getCard(i), deck);\n  }*/\n\n  /*\n  div.appendChild(createButton);\n  document.body.appendChild(div);*/\n\n  CreateCard(tempDeck, tempCardList);\n}\n_c = DeckCreate;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckCreate\");","map":{"version":3,"sources":["/Users/johnbrain/Projects/FlashCardProject/src/block/DeckCreate.js"],"names":["Card","CreateCard","Deck","FlashCardEdit","HomePage","ReturnButton","DeckCreate","deckList","document","body","innerHTML","tempDeck","tempCardList","buttonArray","createElement","className","appendChild","saveButton","addEventListener","nameArea","value","rtnDeck","i","length","addCard","getElementsByClassName","style","backgroundColor","getCard","setStar","push"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,WAAnB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAAQC,IAAR,QAAmB,WAAnB;AACA,SAAQC,aAAR,QAA4B,oBAA5B;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,YAAT,QAA6B,mBAA7B,C,CAGA;;AACA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA6B;AAChCC,EAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,GAA0B,EAA1B;AAEA,MAAIC,QAAQ,GAAG,IAAIT,IAAJ,CAAS,MAAT,CAAf;AAEA,MAAIU,YAAY,GAAG,EAAnB;AAEA,QAAMC,WAAW,GAAGL,QAAQ,CAACM,aAAT,CAAuB,KAAvB,CAApB;AACAD,EAAAA,WAAW,CAACE,SAAZ,GAAwB,aAAxB;AAEAF,EAAAA,WAAW,CAACG,WAAZ,CAAwBX,YAAY,CAACE,QAAD,CAApC;AAEA,QAAMU,UAAU,GAAGT,QAAQ,CAACM,aAAT,CAAuB,QAAvB,CAAnB;AACAG,EAAAA,UAAU,CAACP,SAAX,GAAuB,MAAvB;AACAO,EAAAA,UAAU,CAACC,gBAAX,CAA4B,OAA5B,EAAqC,YAAU;AAC3C,QAAGC,QAAQ,CAACC,KAAT,IAAkB,CAArB,EAAuB;AACnB;AACZ;AACA;AACA;AACY,UAAIC,OAAO,GAAG,IAAInB,IAAJ,CAASiB,QAAQ,CAACC,KAAlB,CAAd;;AACA,WAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGV,YAAY,CAACW,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AACxCD,QAAAA,OAAO,CAACG,OAAR,CAAgB,IAAIxB,IAAJ,CAASY,YAAY,CAACU,CAAD,CAAZ,CAAgBG,sBAAhB,CAAuC,GAAvC,EAA4C,CAA5C,EAA+CL,KAAxD,EAA+DR,YAAY,CAACU,CAAD,CAAZ,CAAgBG,sBAAhB,CAAuC,GAAvC,EAA4C,CAA5C,EAA+CL,KAA9G,CAAhB;;AACA,YAAGR,YAAY,CAACU,CAAD,CAAZ,CAAgBG,sBAAhB,CAAuC,GAAvC,EAA4C,CAA5C,EAA+CC,KAA/C,CAAqDC,eAArD,IAAwE,MAA3E,EAAkF;AAC9EN,UAAAA,OAAO,CAACO,OAAR,CAAgBN,CAAhB,EAAmBO,OAAnB;AACH;AACJ;;AACDtB,MAAAA,QAAQ,CAACuB,IAAT,CAAcT,OAAd;AACAb,MAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,GAA0B,EAA1B;AACAN,MAAAA,QAAQ,CAACG,QAAD,CAAR;AACH;AACJ,GAjBD;AAkBAM,EAAAA,WAAW,CAACG,WAAZ,CAAwBC,UAAxB;AAEA,QAAME,QAAQ,GAAGX,QAAQ,CAACM,aAAT,CAAuB,UAAvB,CAAjB;AACAD,EAAAA,WAAW,CAACG,WAAZ,CAAwBG,QAAxB;AAEAX,EAAAA,QAAQ,CAACC,IAAT,CAAcO,WAAd,CAA0BH,WAA1B;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAII;AACJ;AACA;;AAAO;AACP;AACA;;AAGIZ,EAAAA,UAAU,CAACU,QAAD,EAAWC,YAAX,CAAV;AACH;KAjGeN,U","sourcesContent":["import {Card} from \"./Card.js\";\nimport { CreateCard } from \"./CreateCard.js\";\nimport {Deck} from \"./Deck.js\";\nimport {FlashCardEdit} from \"./FlashCardEdit.js\"\nimport { HomePage } from \"./HomePage.js\";\nimport { ReturnButton } from \"./ReturnButton.js\";\n\n\n//visualizes the create deck view. used when creating a deck\nexport function DeckCreate(deckList){\n    document.body.innerHTML = \"\";\n\n    var tempDeck = new Deck(\"TEMP\");\n\n    var tempCardList = [];\n\n    const buttonArray = document.createElement(\"div\");\n    buttonArray.className = \"buttonArray\";\n\n    buttonArray.appendChild(ReturnButton(deckList));\n\n    const saveButton = document.createElement(\"button\");\n    saveButton.innerHTML = \"Save\";\n    saveButton.addEventListener(\"click\", function(){\n        if(nameArea.value != 0){\n            /*tempDeck.setName(nameArea.value);\n            deckList.push(tempDeck);\n            document.body.innerHTML = \"\";\n            HomePage(deckList);*/\n            var rtnDeck = new Deck(nameArea.value);\n            for(let i = 0; i < tempCardList.length; i++){\n                rtnDeck.addCard(new Card(tempCardList[i].getElementsByClassName(\"a\")[0].value, tempCardList[i].getElementsByClassName(\"b\")[0].value));\n                if(tempCardList[i].getElementsByClassName(\"c\")[0].style.backgroundColor == \"gold\"){\n                    rtnDeck.getCard(i).setStar();\n                }\n            }\n            deckList.push(rtnDeck);\n            document.body.innerHTML = \"\";\n            HomePage(deckList);\n        }\n    });\n    buttonArray.appendChild(saveButton);\n\n    const nameArea = document.createElement(\"textArea\");\n    buttonArray.appendChild(nameArea);\n\n    document.body.appendChild(buttonArray);\n\n    /*var div = document.createElement(\"div\");\n    div.className = 'cardCreator';\n    \n    var frontText = document.createElement(\"label\");\n    frontText.innerHTML = 'FRONT:   ';\n    div.appendChild(frontText);\n    var front = document.createElement(\"textarea\");\n    div.appendChild(front);\n    var br = document.createElement(\"br\");\n    \n    var backText = document.createElement(\"label\");\n    backText.innerHTML = 'BACK:   ';\n    backText.className = \"backtext\";\n    div.appendChild(backText);\n    var back = document.createElement(\"textarea\");\n    div.appendChild(back);\n    div.appendChild(br);\n\n    var createButton = document.createElement(\"button\");\n    createButton.innerHTML = 'Create Card';\n    \n    //when creating a new card while editing\n    createButton.addEventListener(\"click\", function(){\n        if(front.value != '' && back.value != ''){\n            //if(!deck.cardExists(front.value, back.value)){\n                //const newCard = new Card(front.value, back.value);\n                //FlashCardEdit(newCard, deck);\n                //deck.addCard(newCard);\n                //front.value = '';\n                //back.value = '';\n            //}\n            const newCard = new Card(front.value, back.value);\n            //FlashCardEdit(newCard, tempDeck);\n            tempCardList.push(FlashCardEdit(newCard, tempDeck, tempCardList));\n            front.value = \"\";\n            back.value = \"\";\n            front.focus();\n            //tempDeck.addCard(newCard);\n        } \n        //const newCard = new Card(front.value, back.value);\n        //FlashCardEdit(newCard, deck);\n    });\n\n    /*createButton.addEventListener(\"click\", function(){\n      if(front.value != '' && back.value != ''){\n        front.value = '';\n        back.value = '';\n      } \n    });*/ \n\n    /*for(let i = 0; i < deck.length(); i++){\n        FlashCardEdit(deck.getCard(i), deck);\n    }*//*\n\n    div.appendChild(createButton);\n    document.body.appendChild(div);*/\n\n    CreateCard(tempDeck, tempCardList);\n}"]},"metadata":{},"sourceType":"module"}