{"ast":null,"code":"const {\n  response\n} = require('express');\n\nconst express = require('express');\n\nconst fs = require('fs');\n\nconst mysql = require('mysql');\n\nconst Datastore = require('nedb');\n\nconst argon2 = require('argon2');\n\nconst {\n  resolve\n} = require('path');\n\nconst app = express();\napp.listen(3000, () => console.log('working!'));\napp.use(express.static('src')); //makes server able to understand incoming data as json.\n\napp.use(express.json({\n  limit: '1mb'\n})); //app.use(express.json({strict: false}));\n\nconst database = new Datastore('database.db');\ndatabase.loadDatabase();\n\nfunction readDataFile() {\n  var sendDeckList = [];\n  /*return fs.readFileSync('Data.txt', function(err, data) {\n      if(err){\n        throw err;\n      }\n      var deckList = data.toString().split(\"\\n\");\n      for(i in deckList) {\n          //console.log(JSON.parse(deckList[i]).deckList[0].name);\n          var tempDeck = JSON.parse(deckList[i]).deckList;\n          for(i in tempDeck){\n            //var deckName = tempDeck[i].name;\n            var newDeck = new Deck(tempDeck[i].name);\n            var cardList = tempDeck[i].cardList;\n            for(i in cardList){\n              var newCard = new Card(cardList[i].front, cardList[i].back);\n              newDeck.addCard(newCard);\n            }\n            sendDeckList.push(newDeck);\n            //console.log(newDeck.getName());\n            //console.log(newDeck.getCardList());\n            //console.log(deckName);\n          }\n      }\n      //console.log(sendDeckList);\n      //return sendDeckList;\n  });*/\n\n  /*\n  return fs.readFileSync('Data.txt', function(err, data) {\n    if(err){\n      throw err;\n    }\n    var deckList = data.toString().split(\"\\n\");\n    for(i in deckList) {\n        //console.log(JSON.parse(deckList[i]).deckList[0].name);\n        var tempDeck = JSON.parse(deckList[i]).deckList;\n        for(i in tempDeck){\n          //var deckName = tempDeck[i].name;\n          sendDeckList.push([]);\n          sendDeckList[i].push(tempDeck[i].name);\n          var cardList = tempDeck[i].cardList;\n          for(i in cardList){\n            sendDeckList[i].push([cardList[i].front, cardList[i].back]);\n          }\n          //console.log(newDeck.getName());\n          //console.log(newDeck.getCardList());\n          //console.log(deckName);\n        }\n        \n    }\n    //return sendDeckList;\n  });\n  */\n  //console.log(sendDeckList);\n  //return sendDeckList;\n} //connects the server to the client to recieve and send data. Request is what the client sends to the server, ie data. \n// the ressponse is what the server sends beck to the client, ie a confirmation upon recieving the data.\n\n\napp.post('/api', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.appendFile('./Data.txt', JSON.stringify(\n  /*req.body.time*/\n  req.body) + \"\\n\", err => {\n    if (err) {\n      console.error(err);\n    } // file written successfully\n\n  }); //what is being sent back to the client\n\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n/*\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.writeFile('./Data.txt', JSON.stringify(/*req.body.time*/\n\n/* req.body) + \"\\n\", err => {\nif (err) {\nconsole.error(err);\n}\n// file written successfully\n});\n//what is being sent back to the client\nres.json({\nstatus: 'success',\nDeckList: req.body\n});\n});\n*/\n//ONLY WORKS IF NO TWO USERNAMES ARE THE SAME\n\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body); //database.insert(req.body);\n  //database.insert(req.body[0].sendDeckList);\n  //what was used before adding hashing\n  //database.update({username: req.body.username, password: req.body.password}, req.body);\n\n  const hash = hashPassword(req.body.password).then(rtn => {\n    req.body.password = rtn;\n    database.update({\n      username: req.body.username\n    }, req.body);\n  }); //what is being sent back to the client\n\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n/*\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n    console.log(\"good\");\n    //res.send(\"high\");\n    var rtnList = readDataFile();\n    console.log(rtnList);\n    //rtnList = ['h', 'h'];\n    res.send(rtnList);\n});\n*/\n//sends a response to the client.\n\napp.get('/getData', (req, res) => {\n  console.log(\"good\"); //res.send(\"high\");\n\n  database.find({}, (err, data) => {\n    if (err) {\n      console.log(err);\n    }\n\n    res.json(data);\n    console.log(data[0].sendDeckList[0].name);\n  }); //console.log(rtnList);\n  //rtnList = ['h', 'h'];\n  //res.send(rtnList);\n});\napp.post('/login', (req, res) => {\n  console.log(\"good\"); //res.send(\"high\");\n\n  database.find({\n    username: req.body.username\n  }, (err, data) => {\n    if (data.length == 0) {\n      console.log(\"err\");\n      console.log(data);\n      res.json({});\n    } else {\n      //this is just test stuff you can delete it\n      console.log(data[0].password);\n      console.log(req.body.password);\n      const bing = verifyPassword(data[0].password, req.body.password).then(rtn => {\n        console.log(rtn);\n        console.log(data[0]);\n      });\n\n      for (let i = 0; i < data.length; i++) {\n        const verify = verifyPassword(data[i].password, req.body.password).then(rtn => {\n          if (rtn) {\n            res.json([data[i]]);\n            console.log('login succesful');\n          }\n        });\n      } //res.json(data);\n\n      /*\n      console.log(data);\n      res.json(data);\n      console.log(data[0].sendDeckList[0].name);\n      console.log(req.body.username);\n      */\n\n    }\n  });\n  /*\n  database.find({username: req.body.username, password: req.body.password}, (err, data) => {\n    if(data.length == 0){\n      console.log(\"err\");\n      console.log(data);\n      res.json({});\n    }\n    else{\n      console.log(data);\n      res.json(data);\n      console.log(data[0].sendDeckList[0].name);\n      console.log(req.body.username);\n    }\n  });\n  */\n\n  /*\n    const hash = hashPassword(req.body.password).then(rtn => {\n      console.log(rtn);\n      req.body.password = rtn;\n      database.find({username: req.body.username, password: req.body.password}, (err, data) => {\n        if(data.length == 0){\n          console.log(\"err\");\n          res.json({});\n        }\n        else{\n          console.log(data);\n          res.json(data);\n          console.log(data[0].sendDeckList[0].name);\n          console.log(req.body.username);\n        }\n      });\n    });\n    */\n  //console.log(rtnList);\n  //rtnList = ['h', 'h'];\n  //res.send(rtnList);\n}); //hashes the password\n\nasync function hashPassword(password) {\n  try {\n    const hash = await argon2.hash(password);\n    return hash;\n  } catch (err) {\n    console.log(err);\n  }\n} //checks if a hashed password and the normal password are the same and returns as boolean\n\n\nasync function verifyPassword(hashPass, password) {\n  try {\n    const verify = await argon2.verify(hashPass, password);\n    return verify;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\napp.post('/createAccount', (req, res) => {\n  var username = req.body.username;\n  var password = req.body.password;\n  database.find({\n    username: req.body.username\n  }, (err, data) => {\n    console.log(data.length);\n\n    if (data.length != 0) {\n      console.log(\"err\");\n      console.log(data);\n      res.json({\n        success: \"bad\"\n      });\n    } else {\n      const hash = hashPassword(password).then(rtn => {\n        console.log(rtn);\n        req.body.password = rtn;\n        database.insert(req.body);\n        res.json({\n          success: \"good\"\n        });\n        /*res.json({\n          username: req.body.username,\n          password: rtn\n        });*/\n      });\n    }\n  }); //database.insert(req.body);\n  //what is being sent back to the client\n  //res.json({\n  //status: 'success',\n  //DeckList: req.body\n  //});\n}); //console.log(\"high\");\n\n/*\nconst fs = require('fs');\nconst content = 'Some content!';\n\nfs.writeFile('./Data.txt', content, err => {\n  if (err) {\n    console.error(err);\n  }\n  // file written successfully\n});\n*/\n//const myURL = new URL('/foo', 'https://example.org/');\n//console.log('good');","map":{"version":3,"names":["response","require","express","fs","mysql","Datastore","argon2","resolve","app","listen","console","log","use","static","json","limit","database","loadDatabase","readDataFile","sendDeckList","post","req","res","body","appendFile","JSON","stringify","err","error","status","DeckList","hash","hashPassword","password","then","rtn","update","username","get","find","data","name","length","bing","verifyPassword","i","verify","hashPass","success","insert"],"sources":["/Users/johnbrain/Projects/FlashCardProject/src/index.js"],"sourcesContent":["\n\nconst { response } = require('express');\nconst express = require('express');\nconst fs = require('fs');\nconst mysql = require('mysql');\nconst Datastore = require('nedb');\nconst argon2 = require('argon2');\nconst { resolve } = require('path');\n\nconst app = express();\napp.listen(3000, () => console.log('working!'));\napp.use(express.static('src'));\n//makes server able to understand incoming data as json.\napp.use(express.json({ limit: '1mb' }));\n//app.use(express.json({strict: false}));\nconst database = new Datastore('database.db');\ndatabase.loadDatabase();\n\nfunction readDataFile() {\n  var sendDeckList = [];\n  /*return fs.readFileSync('Data.txt', function(err, data) {\n      if(err){\n        throw err;\n      }\n      var deckList = data.toString().split(\"\\n\");\n      for(i in deckList) {\n          //console.log(JSON.parse(deckList[i]).deckList[0].name);\n          var tempDeck = JSON.parse(deckList[i]).deckList;\n          for(i in tempDeck){\n            //var deckName = tempDeck[i].name;\n            var newDeck = new Deck(tempDeck[i].name);\n            var cardList = tempDeck[i].cardList;\n            for(i in cardList){\n              var newCard = new Card(cardList[i].front, cardList[i].back);\n              newDeck.addCard(newCard);\n            }\n            sendDeckList.push(newDeck);\n            //console.log(newDeck.getName());\n            //console.log(newDeck.getCardList());\n            //console.log(deckName);\n          }\n      }\n      //console.log(sendDeckList);\n      //return sendDeckList;\n  });*/\n  /*\n  return fs.readFileSync('Data.txt', function(err, data) {\n    if(err){\n      throw err;\n    }\n    var deckList = data.toString().split(\"\\n\");\n    for(i in deckList) {\n        //console.log(JSON.parse(deckList[i]).deckList[0].name);\n        var tempDeck = JSON.parse(deckList[i]).deckList;\n        for(i in tempDeck){\n          //var deckName = tempDeck[i].name;\n          sendDeckList.push([]);\n          sendDeckList[i].push(tempDeck[i].name);\n          var cardList = tempDeck[i].cardList;\n          for(i in cardList){\n            sendDeckList[i].push([cardList[i].front, cardList[i].back]);\n          }\n          //console.log(newDeck.getName());\n          //console.log(newDeck.getCardList());\n          //console.log(deckName);\n        }\n        \n    }\n    //return sendDeckList;\n  });\n  */\n  //console.log(sendDeckList);\n  //return sendDeckList;\n}\n\n\n//connects the server to the client to recieve and send data. Request is what the client sends to the server, ie data. \n// the ressponse is what the server sends beck to the client, ie a confirmation upon recieving the data.\napp.post('/api', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.appendFile('./Data.txt', JSON.stringify(/*req.body.time*/ req.body) + \"\\n\", err => {\n    if (err) {\n      console.error(err);\n    }\n    // file written successfully\n  });\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n\n/*\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.writeFile('./Data.txt', JSON.stringify(/*req.body.time*//* req.body) + \"\\n\", err => {\n  if (err) {\n    console.error(err);\n  }\n  // file written successfully\n});\n//what is being sent back to the client\nres.json({\n  status: 'success',\n  DeckList: req.body\n});\n});\n*/\n\n//ONLY WORKS IF NO TWO USERNAMES ARE THE SAME\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  //database.insert(req.body);\n  //database.insert(req.body[0].sendDeckList);\n\n  //what was used before adding hashing\n  //database.update({username: req.body.username, password: req.body.password}, req.body);\n\n  const hash = hashPassword(req.body.password).then(rtn => {\n    req.body.password = rtn;\n    database.update({ username: req.body.username }, req.body);\n  });\n\n\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n\n/*\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n    console.log(\"good\");\n    //res.send(\"high\");\n    var rtnList = readDataFile();\n    console.log(rtnList);\n    //rtnList = ['h', 'h'];\n    res.send(rtnList);\n});\n*/\n\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n  console.log(\"good\");\n  //res.send(\"high\");\n  database.find({}, (err, data) => {\n    if (err) {\n      console.log(err);\n    }\n    res.json(data);\n    console.log(data[0].sendDeckList[0].name);\n  });\n  //console.log(rtnList);\n  //rtnList = ['h', 'h'];\n  //res.send(rtnList);\n});\n\napp.post('/login', (req, res) => {\n  console.log(\"good\");\n  //res.send(\"high\");\n\n  database.find({ username: req.body.username }, (err, data) => {\n    if (data.length == 0) {\n      console.log(\"err\");\n      console.log(data);\n      res.json({});\n    }\n    else {\n      //this is just test stuff you can delete it\n      console.log(data[0].password);\n      console.log(req.body.password);\n      const bing = verifyPassword(data[0].password, req.body.password).then(rtn => {\n        console.log(rtn);\n        console.log(data[0]);\n      });\n\n      for (let i = 0; i < data.length; i++) {\n        const verify = verifyPassword(data[i].password, req.body.password).then(rtn => {\n          if (rtn) {\n            res.json([data[i]]);\n            console.log('login succesful');\n          }\n        })\n      }\n      //res.json(data);\n      /*\n      console.log(data);\n      res.json(data);\n      console.log(data[0].sendDeckList[0].name);\n      console.log(req.body.username);\n      */\n    }\n  });\n\n  /*\n  database.find({username: req.body.username, password: req.body.password}, (err, data) => {\n    if(data.length == 0){\n      console.log(\"err\");\n      console.log(data);\n      res.json({});\n    }\n    else{\n      console.log(data);\n      res.json(data);\n      console.log(data[0].sendDeckList[0].name);\n      console.log(req.body.username);\n    }\n  });\n  */\n  /*\n    const hash = hashPassword(req.body.password).then(rtn => {\n      console.log(rtn);\n      req.body.password = rtn;\n      database.find({username: req.body.username, password: req.body.password}, (err, data) => {\n        if(data.length == 0){\n          console.log(\"err\");\n          res.json({});\n        }\n        else{\n          console.log(data);\n          res.json(data);\n          console.log(data[0].sendDeckList[0].name);\n          console.log(req.body.username);\n        }\n      });\n    });\n    */\n\n  //console.log(rtnList);\n  //rtnList = ['h', 'h'];\n  //res.send(rtnList);\n});\n\n//hashes the password\nasync function hashPassword(password) {\n  try {\n    const hash = await argon2.hash(password);\n    return hash;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\n//checks if a hashed password and the normal password are the same and returns as boolean\nasync function verifyPassword(hashPass, password) {\n  try {\n    const verify = await argon2.verify(hashPass, password);\n    return verify;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\napp.post('/createAccount', (req, res) => {\n  var username = req.body.username;\n  var password = req.body.password;\n  database.find({ username: req.body.username }, (err, data) => {\n    console.log(data.length);\n    if (data.length != 0) {\n      console.log(\"err\");\n      console.log(data);\n      res.json({ success: \"bad\" });\n    }\n    else {\n      const hash = hashPassword(password).then(rtn => {\n        console.log(rtn);\n        req.body.password = rtn;\n        database.insert(req.body);\n\n        res.json({ success: \"good\" });\n\n        /*res.json({\n          username: req.body.username,\n          password: rtn\n        });*/\n      });\n    }\n  });\n\n  //database.insert(req.body);\n\n  //what is being sent back to the client\n  //res.json({\n  //status: 'success',\n  //DeckList: req.body\n  //});\n});\n\n\n\n\n//console.log(\"high\");\n\n/*\nconst fs = require('fs');\nconst content = 'Some content!';\n\nfs.writeFile('./Data.txt', content, err => {\n  if (err) {\n    console.error(err);\n  }\n  // file written successfully\n});\n*/\n\n//const myURL = new URL('/foo', 'https://example.org/');\n\n//console.log('good');\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}