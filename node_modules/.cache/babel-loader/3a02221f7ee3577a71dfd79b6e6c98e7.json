{"ast":null,"code":"import React, { useState } from \"react\";\nvar snakeList = [];\nvar boardList = [];\nvar tempList;\n\nfunction Snake() {\n  const title = document.createElement(\"label\");\n  title.className = \"title\";\n  title.innerHTML = \"Snake Game\";\n  const titleArea = document.createElement(\"div\");\n  titleArea.className = \"titleArea\";\n  titleArea.appendChild(title);\n  document.body.appendChild(titleArea);\n  const board = document.createElement('table');\n  const max = 20;\n\n  for (let i = 0; i < max; i++) {\n    const tr = board.insertRow();\n    boardList.push([]);\n\n    for (let j = 0; j < max; j++) {\n      const td = tr.insertCell(); //td.appendChild(document.createTextNode(\"___\"));\n\n      boardList[i].push([i, j]);\n      td.style.border = '1px solid black';\n    }\n  }\n\n  tempList = boardList;\n  var start = [Math.floor((max - 1) / 2), Math.floor((max - 1) / 2)];\n  var berry = [3, 3];\n  berry[0] = Math.floor(Math.random() * max);\n  berry[1] = Math.floor(Math.random() * max); //board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n  var len = 1;\n  var direction = [0, 0];\n  var startTimer = true;\n\n  for (let i = 0; i < len; i++) {\n    snakeList.push([start[0] + i, start[1]]);\n  }\n\n  var eaten = false;\n  var update = true;\n  var begin = true;\n  var timerSpeed = 100;\n  var sameLocation = true;\n  document.addEventListener('keydown', function (event) {\n    begin = false; //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"___\";\n    //left arrow\n\n    if (event.keyCode == 37 && update) {\n      //if(start[1] > 0){\n      //start[1]--;\n      //}\n      if (direction[1] != 1) {\n        direction[1] = -1;\n        direction[0] = 0;\n        update = false;\n      }\n    } //down arrow\n    else if (event.keyCode == 40 && update) {\n      //if(start[0] < max - 1){\n      //start[0]++;\n      //}\n      if (direction[0] != -1) {\n        direction[0] = 1;\n        direction[1] = 0;\n        update = false;\n      }\n    } //right arrow\n    else if (event.keyCode == 39 && update) {\n      //if(start[1] < max - 1){\n      //start[1]++;\n      // }\n      if (direction[1] != -1) {\n        direction[1] = 1;\n        direction[0] = 0;\n        update = false;\n      }\n    } //up arrow\n    else if (event.keyCode == 38 && update) {\n      //if(start[0] > 0){\n      //start[0]--;\n      //}\n      if (direction[0] != 1) {\n        direction[0] = -1;\n        direction[1] = 0;\n        update = false;\n      }\n    }\n\n    if (startTimer) {}\n\n    startTimer = false;\n  });\n  var timer = setInterval(function () {\n    if (start[0] < 0 || start[0] > max - 1 || start[1] < 0 || start[1] > max - 1) {\n      //clearInterval(timer);\n      //document.body.innerHTML = \"\";\n      end(timer);\n    } //board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n\n    board.rows.item(berry[0]).cells.item(berry[1]).style.backgroundColor = \"red\"; //updates position of snake\n\n    start[0] += direction[0];\n    start[1] += direction[1]; //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n\n    board.rows.item(start[0]).cells.item(start[1]).style.backgroundColor = \"green\";\n    snakeList.unshift([start[0], start[1]]);\n\n    if (start[0] == berry[0] && start[1] == berry[1]) {\n      eaten = true; //berry[0] = Math.floor(Math.random() * max);\n      //berry[1] = Math.floor(Math.random() * max);\n\n      timerSpeed -= 20; //for(let i = 0; i < snakeList.length; i++){\n      //tempList[snakeList[i][0]].splice(snakeList[i][1], 1);\n      //}\n\n      var rand0 = Math.floor(Math.random() * tempList.length);\n      var rand1 = Math.floor(Math.random() * tempList[rand0].length);\n      berry[0] = tempList[rand0][rand1][0];\n      berry[1] = tempList[rand0][rand1][1];\n      tempList = boardList;\n    }\n\n    if (!eaten) {\n      //board.rows.item(snakeList[snakeList.length - 1][0]).cells.item(snakeList[snakeList.length - 1][1]).innerHTML = \"___\";\n      board.rows.item(snakeList[snakeList.length - 1][0]).cells.item(snakeList[snakeList.length - 1][1]).style.backgroundColor = \"white\";\n      snakeList.splice(snakeList.length - 1, 1);\n    } else {\n      eaten = false;\n    }\n\n    update = true;\n\n    if (!begin) {\n      for (let i = 1; i < snakeList.length; i++) {\n        if (start[0] == snakeList[i][0] && start[1] == snakeList[i][1]) {\n          //clearInterval(timer);\n          //document.body.innerHTML = \"\";\n          end(timer);\n        }\n      }\n    }\n  }, 100\n  /*timerSpeed*/\n  );\n  document.body.appendChild(board);\n  const retry = document.createElement(\"button\");\n  retry.innerHTML = \"RETRY\";\n  retry.className = \"retry\";\n  retry.addEventListener(\"click\", function () {\n    document.body.innerHTML = \"\";\n    snakeList = [];\n    boardList = [];\n    Snake();\n  });\n  document.body.appendChild(retry);\n}\n\n_c = Snake;\n\nfunction end(timer) {\n  clearInterval(timer);\n}\n\nfunction randomize(list, max) {\n  list[0] = Math.floor(Math.random() * max);\n  list[1] = Math.floor(Math.random() * max);\n}\n\nexport default Snake;\n\nvar _c;\n\n$RefreshReg$(_c, \"Snake\");","map":{"version":3,"sources":["/Users/johnbrain/Projects/SnakeGame/src/snake.js"],"names":["React","useState","snakeList","boardList","tempList","Snake","title","document","createElement","className","innerHTML","titleArea","appendChild","body","board","max","i","tr","insertRow","push","j","td","insertCell","style","border","start","Math","floor","berry","random","len","direction","startTimer","eaten","update","begin","timerSpeed","sameLocation","addEventListener","event","keyCode","timer","setInterval","end","rows","item","cells","backgroundColor","unshift","rand0","length","rand1","splice","retry","clearInterval","randomize","list"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nvar snakeList = [];\nvar boardList = [];\nvar tempList;\n\nfunction Snake(){\n\n    const title = document.createElement(\"label\");\n    title.className = \"title\";\n    title.innerHTML = \"Snake Game\";\n\n    const titleArea = document.createElement(\"div\");\n    titleArea.className = \"titleArea\";\n    titleArea.appendChild(title);\n    document.body.appendChild(titleArea);\n\n    const board = document.createElement('table');\n    const max = 20;\n    for(let i = 0; i < max; i++){\n        const tr = board.insertRow();\n        boardList.push([]);\n        for(let j = 0; j < max; j++){\n            const td = tr.insertCell();\n            //td.appendChild(document.createTextNode(\"___\"));\n            boardList[i].push([i, j]);\n            td.style.border = '1px solid black';\n        }\n    }\n    tempList = boardList;\n    var start = [Math.floor((max - 1) / 2), Math.floor((max - 1) / 2)];\n\n    var berry = [3, 3];\n    berry[0] = Math.floor(Math.random() * max);\n    berry[1] = Math.floor(Math.random() * max);\n    //board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n    var len = 1;\n\n    var direction = [0, 0];\n    var startTimer = true;\n\n    for(let i = 0; i < len; i++){\n        snakeList.push([start[0] + i, start[1]]);\n    }\n\n    var eaten = false;\n    var update = true;\n    var begin = true;\n\n    var timerSpeed = 100;\n\n    var sameLocation = true;\n\n    document.addEventListener('keydown', function(event){\n\n        begin = false;\n        //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"___\";\n        //left arrow\n        if(event.keyCode == 37 && update){\n            //if(start[1] > 0){\n                //start[1]--;\n           //}\n           if(direction[1] != 1){\n                direction[1] = -1;\n                direction[0] = 0;\n                update = false;\n           }\n           \n        }\n\n        //down arrow\n        else if(event.keyCode == 40 && update){\n            //if(start[0] < max - 1){\n                //start[0]++;\n            //}\n            if(direction[0] != -1){\n                direction[0] = 1;\n                direction[1] = 0;\n                update = false;\n            }\n            \n        }\n\n        //right arrow\n        else if(event.keyCode == 39 && update){\n            //if(start[1] < max - 1){\n                //start[1]++;\n           // }\n           if(direction[1] != -1){\n                direction[1] = 1;\n                direction[0] = 0;\n                update = false;\n           }\n        }\n\n        //up arrow\n        else if(event.keyCode ==38 && update){\n            //if(start[0] > 0){\n                //start[0]--;\n            //}\n            if(direction[0] != 1){\n                direction[0] = -1;\n                direction[1] = 0;\n                update = false;\n            }\n        }\n            \n        if(startTimer){\n            \n        }  \n        startTimer = false;\n\n    });\n\n    var timer = setInterval(function(){\n        if(start[0] < 0 || start[0] > max - 1 || start[1] < 0 || start[1] > max - 1){\n            //clearInterval(timer);\n            //document.body.innerHTML = \"\";\n            end(timer);\n        }\n\n        //board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n        board.rows.item(berry[0]).cells.item(berry[1]).style.backgroundColor = \"red\";\n\n        //updates position of snake\n        start[0] += direction[0];\n        start[1] += direction[1];\n        //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n        board.rows.item(start[0]).cells.item(start[1]).style.backgroundColor = \"green\";\n\n\n        snakeList.unshift([start[0], start[1]]);\n\n        if(start[0] == berry[0] && start[1] == berry[1]){\n            eaten = true;\n            //berry[0] = Math.floor(Math.random() * max);\n            //berry[1] = Math.floor(Math.random() * max);\n            timerSpeed -= 20;\n\n            //for(let i = 0; i < snakeList.length; i++){\n                //tempList[snakeList[i][0]].splice(snakeList[i][1], 1);\n            //}\n            var rand0 = Math.floor(Math.random() * tempList.length);\n            var rand1 = Math.floor(Math.random() * tempList[rand0].length);\n            berry[0] = tempList[rand0][rand1][0];\n            berry[1] = tempList[rand0][rand1][1];\n            tempList = boardList;\n        }\n        \n        if(!eaten){\n            //board.rows.item(snakeList[snakeList.length - 1][0]).cells.item(snakeList[snakeList.length - 1][1]).innerHTML = \"___\";\n            board.rows.item(snakeList[snakeList.length - 1][0]).cells.item(snakeList[snakeList.length - 1][1]).style.backgroundColor = \"white\";\n            snakeList.splice(snakeList.length - 1, 1);\n        }\n        else{\n            eaten = false;\n        }\n\n        update = true;\n\n        if(!begin){\n            for(let i = 1; i < snakeList.length; i++){\n                if(start[0] == snakeList[i][0] && start[1] == snakeList[i][1]){\n                    //clearInterval(timer);\n                    //document.body.innerHTML = \"\";\n                    end(timer);\n                }\n            }\n        }\n    }, 100 /*timerSpeed*/);\n   \n\n    document.body.appendChild(board);\n    const retry = document.createElement(\"button\");\n    retry.innerHTML =  \"RETRY\";\n    retry.className = \"retry\";\n    retry.addEventListener(\"click\", function(){\n        document.body.innerHTML = \"\";\n        snakeList = [];\n        boardList = [];\n        Snake();\n    })\n    document.body.appendChild(retry);\n\n}\n\nfunction end(timer){\n    clearInterval(timer);\n}\n\nfunction randomize(list, max){\n    list[0] = Math.floor(Math.random() * max);\n    list[1] = Math.floor(Math.random() * max);\n}\n\n\nexport default Snake;"]},"metadata":{},"sourceType":"module"}