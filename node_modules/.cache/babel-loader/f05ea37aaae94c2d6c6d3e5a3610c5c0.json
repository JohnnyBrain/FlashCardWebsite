{"ast":null,"code":"import React, { useState } from \"react\";\nvar snakeList = [];\n\nfunction Snake() {\n  const board = document.createElement('table');\n  const max = 30;\n\n  for (let i = 0; i < max; i++) {\n    const tr = board.insertRow();\n\n    for (let j = 0; j < max; j++) {\n      const td = tr.insertCell();\n      td.appendChild(document.createTextNode(\"___\"));\n      td.style.border = '1px solid black';\n    }\n  }\n\n  const start = [(max - 1) / 2, (max - 1) / 2];\n  const berry = [1, 1];\n  board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n  const len = 5;\n  const direction = [0, 0];\n  const startTimer = true;\n\n  for (let i = 0; i < len; i++) {\n    snakeList.push([start[0] + i, start[1]]);\n  }\n\n  var eaten = false;\n  document.addEventListener('keydown', function (event) {\n    //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"___\";\n    board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\"; //left arrow\n\n    if (event.keyCode == 37) {\n      //if(start[1] > 0){\n      //start[1]--;\n      //}\n      if (direction[1] != 1) {\n        direction[1] = -1;\n        direction[0] = 0;\n      }\n    } //down arrow\n\n\n    if (event.keyCode == 40) {\n      //if(start[0] < max - 1){\n      //start[0]++;\n      //}\n      if (direction[0] != -1) {\n        direction[0] = 1;\n        direction[1] = 0;\n      }\n    } //right arrow\n\n\n    if (event.keyCode == 39) {\n      //if(start[1] < max - 1){\n      //start[1]++;\n      // }\n      if (direction[1] != -1) {\n        direction[1] = 1;\n        direction[0] = 0;\n      }\n    } //up arrow\n\n\n    if (event.keyCode == 38) {\n      //if(start[0] > 0){\n      //start[0]--;\n      //}\n      if (direction[0] != 1) {\n        direction[0] = -1;\n        direction[1] = 0;\n      }\n    } //if(start[0] == berry[0] && start[1] == berry[1]){\n    //len++;\n    //}\n    //start[0] += direction[0];\n    //start[1]+= direction[1];\n    //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n\n  });\n\n  if (startTimer) {\n    var timer = setInterval(function () {\n      //for(let i = 0; i < max; i++){\n      //for(let j = 0; j < max; j++){\n      //board.rows.item(start[i]).cells.item(start[j]).innerHTML = \"***\";\n      //}\n      //}\n      board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n      if (start[0] == berry[0] && start[1] == berry[1]) {\n        //len++;\n        eaten = true;\n      } //updates position of snake\n\n\n      start[0] += direction[0];\n      start[1] += direction[1]; //for(let i = 0; i < len; i++){\n      //board.rows.item(start[0] + direction[0] * i).cells.item(start[1] + direction[1] * i).innerHTML = \"***\";\n      //}\n\n      board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n      /*if(direction[0] != 0){\n          board.rows.item(start[0] + -1 * (direction[0] * (len + 1))).cells.item(start[1]).innerHTML = \"___\";\n      }\n      else if(direction[1] != 0){\n          board.rows.item(start[0]).cells.item(start[1] + -1 * (direction[1] * (len + 1))).innerHTML = \"___\";\n      }*/\n\n      snakeList.unshift([start[0], start[1]]);\n\n      if (!eaten) {\n        board.rows.item(snakeList[snakeList.length - 1][0]).cells.item(snakeList[snakeList.length - 1][1]).innerHTML = \"___\";\n        snakeList.splice(snakeList.length - 1, 1);\n      } else {\n        eaten = false;\n      } //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n      // board.rows.item(start[0] + direction[0]).cells.item(start[1] + direction[1]).innerHTML = \"***\";\n\n    }, 100);\n    startTimer = false;\n  }\n\n  document.body.appendChild(board);\n}\n\n_c = Snake;\nexport default Snake;\n\nvar _c;\n\n$RefreshReg$(_c, \"Snake\");","map":{"version":3,"sources":["/Users/johnbrain/Projects/SnakeGame/src/snake.js"],"names":["React","useState","snakeList","Snake","board","document","createElement","max","i","tr","insertRow","j","td","insertCell","appendChild","createTextNode","style","border","start","berry","rows","item","cells","innerHTML","len","direction","startTimer","push","eaten","addEventListener","event","keyCode","timer","setInterval","unshift","length","splice","body"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nvar snakeList = [];\n\nfunction Snake(){\n\n    const board = document.createElement('table');\n    const max = 30\n    for(let i = 0; i < max; i++){\n        const tr = board.insertRow();\n        for(let j = 0; j < max; j++){\n            const td = tr.insertCell();\n            td.appendChild(document.createTextNode(\"___\"));\n            td.style.border = '1px solid black';\n        }\n    }\n    const start = [(max - 1) / 2, (max - 1) / 2];\n\n    const berry = [1, 1];\n    board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n    const len = 5;\n\n    const direction = [0, 0];\n    const startTimer = true;\n\n    for(let i = 0; i < len; i++){\n        snakeList.push([start[0] + i, start[1]]);\n    }\n\n    var eaten = false;\n\n    document.addEventListener('keydown', function(event){\n        //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"___\";\n        board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n        //left arrow\n        if(event.keyCode == 37){\n            //if(start[1] > 0){\n                //start[1]--;\n           //}\n           if(direction[1] != 1){\n                direction[1] = -1;\n                direction[0] = 0;\n           }\n        }\n\n        //down arrow\n        if(event.keyCode == 40){\n            //if(start[0] < max - 1){\n                //start[0]++;\n            //}\n            if(direction[0] != -1){\n                direction[0] = 1;\n                direction[1] = 0;\n            }\n        }\n\n        //right arrow\n        if(event.keyCode == 39){\n            //if(start[1] < max - 1){\n                //start[1]++;\n           // }\n           if(direction[1] != -1){\n                direction[1] = 1;\n                direction[0] = 0;\n           }\n        }\n\n        //up arrow\n        if(event.keyCode ==38){\n            //if(start[0] > 0){\n                //start[0]--;\n            //}\n            if(direction[0] != 1){\n                direction[0] = -1;\n                direction[1] = 0;\n            }\n        }\n\n        //if(start[0] == berry[0] && start[1] == berry[1]){\n            //len++;\n        //}\n        //start[0] += direction[0];\n        //start[1]+= direction[1];\n        //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n            \n    });\n    if(startTimer){\n    var timer = setInterval(function(){\n        //for(let i = 0; i < max; i++){\n            //for(let j = 0; j < max; j++){\n                //board.rows.item(start[i]).cells.item(start[j]).innerHTML = \"***\";\n            //}\n        //}\n        board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n        if(start[0] == berry[0] && start[1] == berry[1]){\n            //len++;\n            eaten = true;\n        }\n\n        //updates position of snake\n        \n        start[0] += direction[0];\n        start[1] += direction[1];\n        //for(let i = 0; i < len; i++){\n            //board.rows.item(start[0] + direction[0] * i).cells.item(start[1] + direction[1] * i).innerHTML = \"***\";\n        //}\n        board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n        /*if(direction[0] != 0){\n            board.rows.item(start[0] + -1 * (direction[0] * (len + 1))).cells.item(start[1]).innerHTML = \"___\";\n        }\n        else if(direction[1] != 0){\n            board.rows.item(start[0]).cells.item(start[1] + -1 * (direction[1] * (len + 1))).innerHTML = \"___\";\n        }*/\n\n        snakeList.unshift([start[0], start[1]]);\n        if(!eaten){\n            board.rows.item(snakeList[snakeList.length - 1][0]).cells.item(snakeList[snakeList.length - 1][1]).innerHTML = \"___\";\n            snakeList.splice(snakeList.length - 1, 1);\n        }\n        else{\n\n            eaten = false;\n        }\n        \n        //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n       // board.rows.item(start[0] + direction[0]).cells.item(start[1] + direction[1]).innerHTML = \"***\";\n    }, 100);\n    startTimer = false;\n    }   \n\n    document.body.appendChild(board);\n\n}\nexport default Snake;"]},"metadata":{},"sourceType":"module"}