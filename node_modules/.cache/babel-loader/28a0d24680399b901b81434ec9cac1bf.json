{"ast":null,"code":"/**\n * Handle models (i.e. docs)\n * Serialization/deserialization\n * Copying\n * Querying, update\n */\nvar util = require('util'),\n    _ = require('underscore'),\n    modifierFunctions = {},\n    lastStepModifierFunctions = {},\n    comparisonFunctions = {},\n    logicalOperators = {},\n    arrayComparisonFunctions = {};\n/**\n * Check a key, throw an error if the key is non valid\n * @param {String} k key\n * @param {Model} v value, needed to treat the Date edge case\n * Non-treatable edge cases here: if part of the object if of the form { $$date: number } or { $$deleted: true }\n * Its serialized-then-deserialized version it will transformed into a Date object\n * But you really need to want it to trigger such behaviour, even when warned not to use '$' at the beginning of the field names...\n */\n\n\nfunction checkKey(k, v) {\n  if (typeof k === 'number') {\n    k = k.toString();\n  }\n\n  if (k[0] === '$' && !(k === '$$date' && typeof v === 'number') && !(k === '$$deleted' && v === true) && !(k === '$$indexCreated') && !(k === '$$indexRemoved')) {\n    throw new Error('Field names cannot begin with the $ character');\n  }\n\n  if (k.indexOf('.') !== -1) {\n    throw new Error('Field names cannot contain a .');\n  }\n}\n/**\n * Check a DB object and throw an error if it's not valid\n * Works by applying the above checkKey function to all fields recursively\n */\n\n\nfunction checkObject(obj) {\n  if (util.isArray(obj)) {\n    obj.forEach(function (o) {\n      checkObject(o);\n    });\n  }\n\n  if (typeof obj === 'object' && obj !== null) {\n    Object.keys(obj).forEach(function (k) {\n      checkKey(k, obj[k]);\n      checkObject(obj[k]);\n    });\n  }\n}\n/**\n * Serialize an object to be persisted to a one-line string\n * For serialization/deserialization, we use the native JSON parser and not eval or Function\n * That gives us less freedom but data entered in the database may come from users\n * so eval and the like are not safe\n * Accepted primitive types: Number, String, Boolean, Date, null\n * Accepted secondary types: Objects, Arrays\n */\n\n\nfunction serialize(obj) {\n  var res;\n  res = JSON.stringify(obj, function (k, v) {\n    checkKey(k, v);\n\n    if (v === undefined) {\n      return undefined;\n    }\n\n    if (v === null) {\n      return null;\n    } // Hackish way of checking if object is Date (this way it works between execution contexts in node-webkit).\n    // We can't use value directly because for dates it is already string in this function (date.toJSON was already called), so we use this\n\n\n    if (typeof this[k].getTime === 'function') {\n      return {\n        $$date: this[k].getTime()\n      };\n    }\n\n    return v;\n  });\n  return res;\n}\n/**\n * From a one-line representation of an object generate by the serialize function\n * Return the object itself\n */\n\n\nfunction deserialize(rawData) {\n  return JSON.parse(rawData, function (k, v) {\n    if (k === '$$date') {\n      return new Date(v);\n    }\n\n    if (typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || v === null) {\n      return v;\n    }\n\n    if (v && v.$$date) {\n      return v.$$date;\n    }\n\n    return v;\n  });\n}\n/**\n * Deep copy a DB object\n * The optional strictKeys flag (defaulting to false) indicates whether to copy everything or only fields\n * where the keys are valid, i.e. don't begin with $ and don't contain a .\n */\n\n\nfunction deepCopy(obj, strictKeys) {\n  var res;\n\n  if (typeof obj === 'boolean' || typeof obj === 'number' || typeof obj === 'string' || obj === null || util.isDate(obj)) {\n    return obj;\n  }\n\n  if (util.isArray(obj)) {\n    res = [];\n    obj.forEach(function (o) {\n      res.push(deepCopy(o, strictKeys));\n    });\n    return res;\n  }\n\n  if (typeof obj === 'object') {\n    res = {};\n    Object.keys(obj).forEach(function (k) {\n      if (!strictKeys || k[0] !== '$' && k.indexOf('.') === -1) {\n        res[k] = deepCopy(obj[k], strictKeys);\n      }\n    });\n    return res;\n  }\n\n  return undefined; // For now everything else is undefined. We should probably throw an error instead\n}\n/**\n * Tells if an object is a primitive type or a \"real\" object\n * Arrays are considered primitive\n */\n\n\nfunction isPrimitiveType(obj) {\n  return typeof obj === 'boolean' || typeof obj === 'number' || typeof obj === 'string' || obj === null || util.isDate(obj) || util.isArray(obj);\n}\n/**\n * Utility functions for comparing things\n * Assumes type checking was already done (a and b already have the same type)\n * compareNSB works for numbers, strings and booleans\n */\n\n\nfunction compareNSB(a, b) {\n  if (a < b) {\n    return -1;\n  }\n\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction compareArrays(a, b) {\n  var i, comp;\n\n  for (i = 0; i < Math.min(a.length, b.length); i += 1) {\n    comp = compareThings(a[i], b[i]);\n\n    if (comp !== 0) {\n      return comp;\n    }\n  } // Common section was identical, longest one wins\n\n\n  return compareNSB(a.length, b.length);\n}\n/**\n * Compare { things U undefined }\n * Things are defined as any native types (string, number, boolean, null, date) and objects\n * We need to compare with undefined as it will be used in indexes\n * In the case of objects and arrays, we deep-compare\n * If two objects dont have the same type, the (arbitrary) type hierarchy is: undefined, null, number, strings, boolean, dates, arrays, objects\n * Return -1 if a < b, 1 if a > b and 0 if a = b (note that equality here is NOT the same as defined in areThingsEqual!)\n *\n * @param {Function} _compareStrings String comparing function, returning -1, 0 or 1, overriding default string comparison (useful for languages with accented letters)\n */\n\n\nfunction compareThings(a, b, _compareStrings) {\n  var aKeys,\n      bKeys,\n      comp,\n      i,\n      compareStrings = _compareStrings || compareNSB; // undefined\n\n  if (a === undefined) {\n    return b === undefined ? 0 : -1;\n  }\n\n  if (b === undefined) {\n    return a === undefined ? 0 : 1;\n  } // null\n\n\n  if (a === null) {\n    return b === null ? 0 : -1;\n  }\n\n  if (b === null) {\n    return a === null ? 0 : 1;\n  } // Numbers\n\n\n  if (typeof a === 'number') {\n    return typeof b === 'number' ? compareNSB(a, b) : -1;\n  }\n\n  if (typeof b === 'number') {\n    return typeof a === 'number' ? compareNSB(a, b) : 1;\n  } // Strings\n\n\n  if (typeof a === 'string') {\n    return typeof b === 'string' ? compareStrings(a, b) : -1;\n  }\n\n  if (typeof b === 'string') {\n    return typeof a === 'string' ? compareStrings(a, b) : 1;\n  } // Booleans\n\n\n  if (typeof a === 'boolean') {\n    return typeof b === 'boolean' ? compareNSB(a, b) : -1;\n  }\n\n  if (typeof b === 'boolean') {\n    return typeof a === 'boolean' ? compareNSB(a, b) : 1;\n  } // Dates\n\n\n  if (util.isDate(a)) {\n    return util.isDate(b) ? compareNSB(a.getTime(), b.getTime()) : -1;\n  }\n\n  if (util.isDate(b)) {\n    return util.isDate(a) ? compareNSB(a.getTime(), b.getTime()) : 1;\n  } // Arrays (first element is most significant and so on)\n\n\n  if (util.isArray(a)) {\n    return util.isArray(b) ? compareArrays(a, b) : -1;\n  }\n\n  if (util.isArray(b)) {\n    return util.isArray(a) ? compareArrays(a, b) : 1;\n  } // Objects\n\n\n  aKeys = Object.keys(a).sort();\n  bKeys = Object.keys(b).sort();\n\n  for (i = 0; i < Math.min(aKeys.length, bKeys.length); i += 1) {\n    comp = compareThings(a[aKeys[i]], b[bKeys[i]]);\n\n    if (comp !== 0) {\n      return comp;\n    }\n  }\n\n  return compareNSB(aKeys.length, bKeys.length);\n} // ==============================================================\n// Updating documents\n// ==============================================================\n\n/**\n * The signature of modifier functions is as follows\n * Their structure is always the same: recursively follow the dot notation while creating\n * the nested documents if needed, then apply the \"last step modifier\"\n * @param {Object} obj The model to modify\n * @param {String} field Can contain dots, in that case that means we will set a subfield recursively\n * @param {Model} value\n */\n\n/**\n * Set a field to a new value\n */\n\n\nlastStepModifierFunctions.$set = function (obj, field, value) {\n  obj[field] = value;\n};\n/**\n * Unset a field\n */\n\n\nlastStepModifierFunctions.$unset = function (obj, field, value) {\n  delete obj[field];\n};\n/**\n * Push an element to the end of an array field\n * Optional modifier $each instead of value to push several values\n * Optional modifier $slice to slice the resulting array, see https://docs.mongodb.org/manual/reference/operator/update/slice/\n * DiffÃ©reence with MongoDB: if $slice is specified and not $each, we act as if value is an empty array\n */\n\n\nlastStepModifierFunctions.$push = function (obj, field, value) {\n  // Create the array if it doesn't exist\n  if (!obj.hasOwnProperty(field)) {\n    obj[field] = [];\n  }\n\n  if (!util.isArray(obj[field])) {\n    throw new Error(\"Can't $push an element on non-array values\");\n  }\n\n  if (value !== null && typeof value === 'object' && value.$slice && value.$each === undefined) {\n    value.$each = [];\n  }\n\n  if (value !== null && typeof value === 'object' && value.$each) {\n    if (Object.keys(value).length >= 3 || Object.keys(value).length === 2 && value.$slice === undefined) {\n      throw new Error(\"Can only use $slice in cunjunction with $each when $push to array\");\n    }\n\n    if (!util.isArray(value.$each)) {\n      throw new Error(\"$each requires an array value\");\n    }\n\n    value.$each.forEach(function (v) {\n      obj[field].push(v);\n    });\n\n    if (value.$slice === undefined || typeof value.$slice !== 'number') {\n      return;\n    }\n\n    if (value.$slice === 0) {\n      obj[field] = [];\n    } else {\n      var start,\n          end,\n          n = obj[field].length;\n\n      if (value.$slice < 0) {\n        start = Math.max(0, n + value.$slice);\n        end = n;\n      } else if (value.$slice > 0) {\n        start = 0;\n        end = Math.min(n, value.$slice);\n      }\n\n      obj[field] = obj[field].slice(start, end);\n    }\n  } else {\n    obj[field].push(value);\n  }\n};\n/**\n * Add an element to an array field only if it is not already in it\n * No modification if the element is already in the array\n * Note that it doesn't check whether the original array contains duplicates\n */\n\n\nlastStepModifierFunctions.$addToSet = function (obj, field, value) {\n  var addToSet = true; // Create the array if it doesn't exist\n\n  if (!obj.hasOwnProperty(field)) {\n    obj[field] = [];\n  }\n\n  if (!util.isArray(obj[field])) {\n    throw new Error(\"Can't $addToSet an element on non-array values\");\n  }\n\n  if (value !== null && typeof value === 'object' && value.$each) {\n    if (Object.keys(value).length > 1) {\n      throw new Error(\"Can't use another field in conjunction with $each\");\n    }\n\n    if (!util.isArray(value.$each)) {\n      throw new Error(\"$each requires an array value\");\n    }\n\n    value.$each.forEach(function (v) {\n      lastStepModifierFunctions.$addToSet(obj, field, v);\n    });\n  } else {\n    obj[field].forEach(function (v) {\n      if (compareThings(v, value) === 0) {\n        addToSet = false;\n      }\n    });\n\n    if (addToSet) {\n      obj[field].push(value);\n    }\n  }\n};\n/**\n * Remove the first or last element of an array\n */\n\n\nlastStepModifierFunctions.$pop = function (obj, field, value) {\n  if (!util.isArray(obj[field])) {\n    throw new Error(\"Can't $pop an element from non-array values\");\n  }\n\n  if (typeof value !== 'number') {\n    throw new Error(value + \" isn't an integer, can't use it with $pop\");\n  }\n\n  if (value === 0) {\n    return;\n  }\n\n  if (value > 0) {\n    obj[field] = obj[field].slice(0, obj[field].length - 1);\n  } else {\n    obj[field] = obj[field].slice(1);\n  }\n};\n/**\n * Removes all instances of a value from an existing array\n */\n\n\nlastStepModifierFunctions.$pull = function (obj, field, value) {\n  var arr, i;\n\n  if (!util.isArray(obj[field])) {\n    throw new Error(\"Can't $pull an element from non-array values\");\n  }\n\n  arr = obj[field];\n\n  for (i = arr.length - 1; i >= 0; i -= 1) {\n    if (match(arr[i], value)) {\n      arr.splice(i, 1);\n    }\n  }\n};\n/**\n * Increment a numeric field's value\n */\n\n\nlastStepModifierFunctions.$inc = function (obj, field, value) {\n  if (typeof value !== 'number') {\n    throw new Error(value + \" must be a number\");\n  }\n\n  if (typeof obj[field] !== 'number') {\n    if (!_.has(obj, field)) {\n      obj[field] = value;\n    } else {\n      throw new Error(\"Don't use the $inc modifier on non-number fields\");\n    }\n  } else {\n    obj[field] += value;\n  }\n};\n/**\n * Updates the value of the field, only if specified field is greater than the current value of the field\n */\n\n\nlastStepModifierFunctions.$max = function (obj, field, value) {\n  if (typeof obj[field] === 'undefined') {\n    obj[field] = value;\n  } else if (value > obj[field]) {\n    obj[field] = value;\n  }\n};\n/**\n * Updates the value of the field, only if specified field is smaller than the current value of the field\n */\n\n\nlastStepModifierFunctions.$min = function (obj, field, value) {\n  if (typeof obj[field] === 'undefined') {\n    obj[field] = value;\n  } else if (value < obj[field]) {\n    obj[field] = value;\n  }\n}; // Given its name, create the complete modifier function\n\n\nfunction createModifierFunction(modifier) {\n  return function (obj, field, value) {\n    var fieldParts = typeof field === 'string' ? field.split('.') : field;\n\n    if (fieldParts.length === 1) {\n      lastStepModifierFunctions[modifier](obj, field, value);\n    } else {\n      if (obj[fieldParts[0]] === undefined) {\n        if (modifier === '$unset') {\n          return;\n        } // Bad looking specific fix, needs to be generalized modifiers that behave like $unset are implemented\n\n\n        obj[fieldParts[0]] = {};\n      }\n\n      modifierFunctions[modifier](obj[fieldParts[0]], fieldParts.slice(1), value);\n    }\n  };\n} // Actually create all modifier functions\n\n\nObject.keys(lastStepModifierFunctions).forEach(function (modifier) {\n  modifierFunctions[modifier] = createModifierFunction(modifier);\n});\n/**\n * Modify a DB object according to an update query\n */\n\nfunction modify(obj, updateQuery) {\n  var keys = Object.keys(updateQuery),\n      firstChars = _.map(keys, function (item) {\n    return item[0];\n  }),\n      dollarFirstChars = _.filter(firstChars, function (c) {\n    return c === '$';\n  }),\n      newDoc,\n      modifiers;\n\n  if (keys.indexOf('_id') !== -1 && updateQuery._id !== obj._id) {\n    throw new Error(\"You cannot change a document's _id\");\n  }\n\n  if (dollarFirstChars.length !== 0 && dollarFirstChars.length !== firstChars.length) {\n    throw new Error(\"You cannot mix modifiers and normal fields\");\n  }\n\n  if (dollarFirstChars.length === 0) {\n    // Simply replace the object with the update query contents\n    newDoc = deepCopy(updateQuery);\n    newDoc._id = obj._id;\n  } else {\n    // Apply modifiers\n    modifiers = _.uniq(keys);\n    newDoc = deepCopy(obj);\n    modifiers.forEach(function (m) {\n      var keys;\n\n      if (!modifierFunctions[m]) {\n        throw new Error(\"Unknown modifier \" + m);\n      } // Can't rely on Object.keys throwing on non objects since ES6\n      // Not 100% satisfying as non objects can be interpreted as objects but no false negatives so we can live with it\n\n\n      if (typeof updateQuery[m] !== 'object') {\n        throw new Error(\"Modifier \" + m + \"'s argument must be an object\");\n      }\n\n      keys = Object.keys(updateQuery[m]);\n      keys.forEach(function (k) {\n        modifierFunctions[m](newDoc, k, updateQuery[m][k]);\n      });\n    });\n  } // Check result is valid and return it\n\n\n  checkObject(newDoc);\n\n  if (obj._id !== newDoc._id) {\n    throw new Error(\"You can't change a document's _id\");\n  }\n\n  return newDoc;\n}\n\n; // ==============================================================\n// Finding documents\n// ==============================================================\n\n/**\n * Get a value from object with dot notation\n * @param {Object} obj\n * @param {String} field\n */\n\nfunction getDotValue(obj, field) {\n  var fieldParts = typeof field === 'string' ? field.split('.') : field,\n      i,\n      objs;\n\n  if (!obj) {\n    return undefined;\n  } // field cannot be empty so that means we should return undefined so that nothing can match\n\n\n  if (fieldParts.length === 0) {\n    return obj;\n  }\n\n  if (fieldParts.length === 1) {\n    return obj[fieldParts[0]];\n  }\n\n  if (util.isArray(obj[fieldParts[0]])) {\n    // If the next field is an integer, return only this item of the array\n    i = parseInt(fieldParts[1], 10);\n\n    if (typeof i === 'number' && !isNaN(i)) {\n      return getDotValue(obj[fieldParts[0]][i], fieldParts.slice(2));\n    } // Return the array of values\n\n\n    objs = new Array();\n\n    for (i = 0; i < obj[fieldParts[0]].length; i += 1) {\n      objs.push(getDotValue(obj[fieldParts[0]][i], fieldParts.slice(1)));\n    }\n\n    return objs;\n  } else {\n    return getDotValue(obj[fieldParts[0]], fieldParts.slice(1));\n  }\n}\n/**\n * Check whether 'things' are equal\n * Things are defined as any native types (string, number, boolean, null, date) and objects\n * In the case of object, we check deep equality\n * Returns true if they are, false otherwise\n */\n\n\nfunction areThingsEqual(a, b) {\n  var aKeys, bKeys, i; // Strings, booleans, numbers, null\n\n  if (a === null || typeof a === 'string' || typeof a === 'boolean' || typeof a === 'number' || b === null || typeof b === 'string' || typeof b === 'boolean' || typeof b === 'number') {\n    return a === b;\n  } // Dates\n\n\n  if (util.isDate(a) || util.isDate(b)) {\n    return util.isDate(a) && util.isDate(b) && a.getTime() === b.getTime();\n  } // Arrays (no match since arrays are used as a $in)\n  // undefined (no match since they mean field doesn't exist and can't be serialized)\n\n\n  if (!(util.isArray(a) && util.isArray(b)) && (util.isArray(a) || util.isArray(b)) || a === undefined || b === undefined) {\n    return false;\n  } // General objects (check for deep equality)\n  // a and b should be objects at this point\n\n\n  try {\n    aKeys = Object.keys(a);\n    bKeys = Object.keys(b);\n  } catch (e) {\n    return false;\n  }\n\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n\n  for (i = 0; i < aKeys.length; i += 1) {\n    if (bKeys.indexOf(aKeys[i]) === -1) {\n      return false;\n    }\n\n    if (!areThingsEqual(a[aKeys[i]], b[aKeys[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Check that two values are comparable\n */\n\n\nfunction areComparable(a, b) {\n  if (typeof a !== 'string' && typeof a !== 'number' && !util.isDate(a) && typeof b !== 'string' && typeof b !== 'number' && !util.isDate(b)) {\n    return false;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Arithmetic and comparison operators\n * @param {Native value} a Value in the object\n * @param {Native value} b Value in the query\n */\n\n\ncomparisonFunctions.$lt = function (a, b) {\n  return areComparable(a, b) && a < b;\n};\n\ncomparisonFunctions.$lte = function (a, b) {\n  return areComparable(a, b) && a <= b;\n};\n\ncomparisonFunctions.$gt = function (a, b) {\n  return areComparable(a, b) && a > b;\n};\n\ncomparisonFunctions.$gte = function (a, b) {\n  return areComparable(a, b) && a >= b;\n};\n\ncomparisonFunctions.$ne = function (a, b) {\n  if (a === undefined) {\n    return true;\n  }\n\n  return !areThingsEqual(a, b);\n};\n\ncomparisonFunctions.$in = function (a, b) {\n  var i;\n\n  if (!util.isArray(b)) {\n    throw new Error(\"$in operator called with a non-array\");\n  }\n\n  for (i = 0; i < b.length; i += 1) {\n    if (areThingsEqual(a, b[i])) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\ncomparisonFunctions.$nin = function (a, b) {\n  if (!util.isArray(b)) {\n    throw new Error(\"$nin operator called with a non-array\");\n  }\n\n  return !comparisonFunctions.$in(a, b);\n};\n\ncomparisonFunctions.$regex = function (a, b) {\n  if (!util.isRegExp(b)) {\n    throw new Error(\"$regex operator called with non regular expression\");\n  }\n\n  if (typeof a !== 'string') {\n    return false;\n  } else {\n    return b.test(a);\n  }\n};\n\ncomparisonFunctions.$exists = function (value, exists) {\n  if (exists || exists === '') {\n    // This will be true for all values of exists except false, null, undefined and 0\n    exists = true; // That's strange behaviour (we should only use true/false) but that's the way Mongo does it...\n  } else {\n    exists = false;\n  }\n\n  if (value === undefined) {\n    return !exists;\n  } else {\n    return exists;\n  }\n}; // Specific to arrays\n\n\ncomparisonFunctions.$size = function (obj, value) {\n  if (!util.isArray(obj)) {\n    return false;\n  }\n\n  if (value % 1 !== 0) {\n    throw new Error(\"$size operator called without an integer\");\n  }\n\n  return obj.length == value;\n};\n\ncomparisonFunctions.$elemMatch = function (obj, value) {\n  if (!util.isArray(obj)) {\n    return false;\n  }\n\n  var i = obj.length;\n  var result = false; // Initialize result\n\n  while (i--) {\n    if (match(obj[i], value)) {\n      // If match for array element, return true\n      result = true;\n      break;\n    }\n  }\n\n  return result;\n};\n\narrayComparisonFunctions.$size = true;\narrayComparisonFunctions.$elemMatch = true;\n/**\n * Match any of the subqueries\n * @param {Model} obj\n * @param {Array of Queries} query\n */\n\nlogicalOperators.$or = function (obj, query) {\n  var i;\n\n  if (!util.isArray(query)) {\n    throw new Error(\"$or operator used without an array\");\n  }\n\n  for (i = 0; i < query.length; i += 1) {\n    if (match(obj, query[i])) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Match all of the subqueries\n * @param {Model} obj\n * @param {Array of Queries} query\n */\n\n\nlogicalOperators.$and = function (obj, query) {\n  var i;\n\n  if (!util.isArray(query)) {\n    throw new Error(\"$and operator used without an array\");\n  }\n\n  for (i = 0; i < query.length; i += 1) {\n    if (!match(obj, query[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Inverted match of the query\n * @param {Model} obj\n * @param {Query} query\n */\n\n\nlogicalOperators.$not = function (obj, query) {\n  return !match(obj, query);\n};\n/**\n * Use a function to match\n * @param {Model} obj\n * @param {Query} query\n */\n\n\nlogicalOperators.$where = function (obj, fn) {\n  var result;\n\n  if (!_.isFunction(fn)) {\n    throw new Error(\"$where operator used without a function\");\n  }\n\n  result = fn.call(obj);\n\n  if (!_.isBoolean(result)) {\n    throw new Error(\"$where function must return boolean\");\n  }\n\n  return result;\n};\n/**\n * Tell if a given document matches a query\n * @param {Object} obj Document to check\n * @param {Object} query\n */\n\n\nfunction match(obj, query) {\n  var queryKeys, queryKey, queryValue, i; // Primitive query against a primitive type\n  // This is a bit of a hack since we construct an object with an arbitrary key only to dereference it later\n  // But I don't have time for a cleaner implementation now\n\n  if (isPrimitiveType(obj) || isPrimitiveType(query)) {\n    return matchQueryPart({\n      needAKey: obj\n    }, 'needAKey', query);\n  } // Normal query\n\n\n  queryKeys = Object.keys(query);\n\n  for (i = 0; i < queryKeys.length; i += 1) {\n    queryKey = queryKeys[i];\n    queryValue = query[queryKey];\n\n    if (queryKey[0] === '$') {\n      if (!logicalOperators[queryKey]) {\n        throw new Error(\"Unknown logical operator \" + queryKey);\n      }\n\n      if (!logicalOperators[queryKey](obj, queryValue)) {\n        return false;\n      }\n    } else {\n      if (!matchQueryPart(obj, queryKey, queryValue)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n;\n/**\n * Match an object against a specific { key: value } part of a query\n * if the treatObjAsValue flag is set, don't try to match every part separately, but the array as a whole\n */\n\nfunction matchQueryPart(obj, queryKey, queryValue, treatObjAsValue) {\n  var objValue = getDotValue(obj, queryKey),\n      i,\n      keys,\n      firstChars,\n      dollarFirstChars; // Check if the value is an array if we don't force a treatment as value\n\n  if (util.isArray(objValue) && !treatObjAsValue) {\n    // If the queryValue is an array, try to perform an exact match\n    if (util.isArray(queryValue)) {\n      return matchQueryPart(obj, queryKey, queryValue, true);\n    } // Check if we are using an array-specific comparison function\n\n\n    if (queryValue !== null && typeof queryValue === 'object' && !util.isRegExp(queryValue)) {\n      keys = Object.keys(queryValue);\n\n      for (i = 0; i < keys.length; i += 1) {\n        if (arrayComparisonFunctions[keys[i]]) {\n          return matchQueryPart(obj, queryKey, queryValue, true);\n        }\n      }\n    } // If not, treat it as an array of { obj, query } where there needs to be at least one match\n\n\n    for (i = 0; i < objValue.length; i += 1) {\n      if (matchQueryPart({\n        k: objValue[i]\n      }, 'k', queryValue)) {\n        return true;\n      } // k here could be any string\n\n    }\n\n    return false;\n  } // queryValue is an actual object. Determine whether it contains comparison operators\n  // or only normal fields. Mixed objects are not allowed\n\n\n  if (queryValue !== null && typeof queryValue === 'object' && !util.isRegExp(queryValue) && !util.isArray(queryValue)) {\n    keys = Object.keys(queryValue);\n    firstChars = _.map(keys, function (item) {\n      return item[0];\n    });\n    dollarFirstChars = _.filter(firstChars, function (c) {\n      return c === '$';\n    });\n\n    if (dollarFirstChars.length !== 0 && dollarFirstChars.length !== firstChars.length) {\n      throw new Error(\"You cannot mix operators and normal fields\");\n    } // queryValue is an object of this form: { $comparisonOperator1: value1, ... }\n\n\n    if (dollarFirstChars.length > 0) {\n      for (i = 0; i < keys.length; i += 1) {\n        if (!comparisonFunctions[keys[i]]) {\n          throw new Error(\"Unknown comparison function \" + keys[i]);\n        }\n\n        if (!comparisonFunctions[keys[i]](objValue, queryValue[keys[i]])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  } // Using regular expressions with basic querying\n\n\n  if (util.isRegExp(queryValue)) {\n    return comparisonFunctions.$regex(objValue, queryValue);\n  } // queryValue is either a native value or a normal object\n  // Basic matching is possible\n\n\n  if (!areThingsEqual(objValue, queryValue)) {\n    return false;\n  }\n\n  return true;\n} // Interface\n\n\nmodule.exports.serialize = serialize;\nmodule.exports.deserialize = deserialize;\nmodule.exports.deepCopy = deepCopy;\nmodule.exports.checkObject = checkObject;\nmodule.exports.isPrimitiveType = isPrimitiveType;\nmodule.exports.modify = modify;\nmodule.exports.getDotValue = getDotValue;\nmodule.exports.match = match;\nmodule.exports.areThingsEqual = areThingsEqual;\nmodule.exports.compareThings = compareThings;","map":{"version":3,"names":["util","require","_","modifierFunctions","lastStepModifierFunctions","comparisonFunctions","logicalOperators","arrayComparisonFunctions","checkKey","k","v","toString","Error","indexOf","checkObject","obj","isArray","forEach","o","Object","keys","serialize","res","JSON","stringify","undefined","getTime","$$date","deserialize","rawData","parse","Date","deepCopy","strictKeys","isDate","push","isPrimitiveType","compareNSB","a","b","compareArrays","i","comp","Math","min","length","compareThings","_compareStrings","aKeys","bKeys","compareStrings","sort","$set","field","value","$unset","$push","hasOwnProperty","$slice","$each","start","end","n","max","slice","$addToSet","addToSet","$pop","$pull","arr","match","splice","$inc","has","$max","$min","createModifierFunction","modifier","fieldParts","split","modify","updateQuery","firstChars","map","item","dollarFirstChars","filter","c","newDoc","modifiers","_id","uniq","m","getDotValue","objs","parseInt","isNaN","Array","areThingsEqual","e","areComparable","$lt","$lte","$gt","$gte","$ne","$in","$nin","$regex","isRegExp","test","$exists","exists","$size","$elemMatch","result","$or","query","$and","$not","$where","fn","isFunction","call","isBoolean","queryKeys","queryKey","queryValue","matchQueryPart","needAKey","treatObjAsValue","objValue","module","exports"],"sources":["/Users/johnbrain/Projects/FlashCardProject/node_modules/nedb/lib/model.js"],"sourcesContent":["/**\n * Handle models (i.e. docs)\n * Serialization/deserialization\n * Copying\n * Querying, update\n */\n\nvar util = require('util')\n  , _ = require('underscore')\n  , modifierFunctions = {}\n  , lastStepModifierFunctions = {}\n  , comparisonFunctions = {}\n  , logicalOperators = {}\n  , arrayComparisonFunctions = {}\n  ;\n\n\n/**\n * Check a key, throw an error if the key is non valid\n * @param {String} k key\n * @param {Model} v value, needed to treat the Date edge case\n * Non-treatable edge cases here: if part of the object if of the form { $$date: number } or { $$deleted: true }\n * Its serialized-then-deserialized version it will transformed into a Date object\n * But you really need to want it to trigger such behaviour, even when warned not to use '$' at the beginning of the field names...\n */\nfunction checkKey (k, v) {\n  if (typeof k === 'number') {\n    k = k.toString();\n  }\n\n  if (k[0] === '$' && !(k === '$$date' && typeof v === 'number') && !(k === '$$deleted' && v === true) && !(k === '$$indexCreated') && !(k === '$$indexRemoved')) {\n    throw new Error('Field names cannot begin with the $ character');\n  }\n\n  if (k.indexOf('.') !== -1) {\n    throw new Error('Field names cannot contain a .');\n  }\n}\n\n\n/**\n * Check a DB object and throw an error if it's not valid\n * Works by applying the above checkKey function to all fields recursively\n */\nfunction checkObject (obj) {\n  if (util.isArray(obj)) {\n    obj.forEach(function (o) {\n      checkObject(o);\n    });\n  }\n\n  if (typeof obj === 'object' && obj !== null) {\n    Object.keys(obj).forEach(function (k) {\n      checkKey(k, obj[k]);\n      checkObject(obj[k]);\n    });\n  }\n}\n\n\n/**\n * Serialize an object to be persisted to a one-line string\n * For serialization/deserialization, we use the native JSON parser and not eval or Function\n * That gives us less freedom but data entered in the database may come from users\n * so eval and the like are not safe\n * Accepted primitive types: Number, String, Boolean, Date, null\n * Accepted secondary types: Objects, Arrays\n */\nfunction serialize (obj) {\n  var res;\n\n  res = JSON.stringify(obj, function (k, v) {\n    checkKey(k, v);\n\n    if (v === undefined) { return undefined; }\n    if (v === null) { return null; }\n\n    // Hackish way of checking if object is Date (this way it works between execution contexts in node-webkit).\n    // We can't use value directly because for dates it is already string in this function (date.toJSON was already called), so we use this\n    if (typeof this[k].getTime === 'function') { return { $$date: this[k].getTime() }; }\n\n    return v;\n  });\n\n  return res;\n}\n\n\n/**\n * From a one-line representation of an object generate by the serialize function\n * Return the object itself\n */\nfunction deserialize (rawData) {\n  return JSON.parse(rawData, function (k, v) {\n    if (k === '$$date') { return new Date(v); }\n    if (typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || v === null) { return v; }\n    if (v && v.$$date) { return v.$$date; }\n\n    return v;\n  });\n}\n\n\n/**\n * Deep copy a DB object\n * The optional strictKeys flag (defaulting to false) indicates whether to copy everything or only fields\n * where the keys are valid, i.e. don't begin with $ and don't contain a .\n */\nfunction deepCopy (obj, strictKeys) {\n  var res;\n\n  if ( typeof obj === 'boolean' ||\n       typeof obj === 'number' ||\n       typeof obj === 'string' ||\n       obj === null ||\n       (util.isDate(obj)) ) {\n    return obj;\n  }\n\n  if (util.isArray(obj)) {\n    res = [];\n    obj.forEach(function (o) { res.push(deepCopy(o, strictKeys)); });\n    return res;\n  }\n\n  if (typeof obj === 'object') {\n    res = {};\n    Object.keys(obj).forEach(function (k) {\n      if (!strictKeys || (k[0] !== '$' && k.indexOf('.') === -1)) {\n        res[k] = deepCopy(obj[k], strictKeys);\n      }\n    });\n    return res;\n  }\n\n  return undefined;   // For now everything else is undefined. We should probably throw an error instead\n}\n\n\n/**\n * Tells if an object is a primitive type or a \"real\" object\n * Arrays are considered primitive\n */\nfunction isPrimitiveType (obj) {\n  return ( typeof obj === 'boolean' ||\n       typeof obj === 'number' ||\n       typeof obj === 'string' ||\n       obj === null ||\n       util.isDate(obj) ||\n       util.isArray(obj));\n}\n\n\n/**\n * Utility functions for comparing things\n * Assumes type checking was already done (a and b already have the same type)\n * compareNSB works for numbers, strings and booleans\n */\nfunction compareNSB (a, b) {\n  if (a < b) { return -1; }\n  if (a > b) { return 1; }\n  return 0;\n}\n\nfunction compareArrays (a, b) {\n  var i, comp;\n\n  for (i = 0; i < Math.min(a.length, b.length); i += 1) {\n    comp = compareThings(a[i], b[i]);\n\n    if (comp !== 0) { return comp; }\n  }\n\n  // Common section was identical, longest one wins\n  return compareNSB(a.length, b.length);\n}\n\n\n/**\n * Compare { things U undefined }\n * Things are defined as any native types (string, number, boolean, null, date) and objects\n * We need to compare with undefined as it will be used in indexes\n * In the case of objects and arrays, we deep-compare\n * If two objects dont have the same type, the (arbitrary) type hierarchy is: undefined, null, number, strings, boolean, dates, arrays, objects\n * Return -1 if a < b, 1 if a > b and 0 if a = b (note that equality here is NOT the same as defined in areThingsEqual!)\n *\n * @param {Function} _compareStrings String comparing function, returning -1, 0 or 1, overriding default string comparison (useful for languages with accented letters)\n */\nfunction compareThings (a, b, _compareStrings) {\n  var aKeys, bKeys, comp, i\n    , compareStrings = _compareStrings || compareNSB;\n\n  // undefined\n  if (a === undefined) { return b === undefined ? 0 : -1; }\n  if (b === undefined) { return a === undefined ? 0 : 1; }\n\n  // null\n  if (a === null) { return b === null ? 0 : -1; }\n  if (b === null) { return a === null ? 0 : 1; }\n\n  // Numbers\n  if (typeof a === 'number') { return typeof b === 'number' ? compareNSB(a, b) : -1; }\n  if (typeof b === 'number') { return typeof a === 'number' ? compareNSB(a, b) : 1; }\n\n  // Strings\n  if (typeof a === 'string') { return typeof b === 'string' ? compareStrings(a, b) : -1; }\n  if (typeof b === 'string') { return typeof a === 'string' ? compareStrings(a, b) : 1; }\n\n  // Booleans\n  if (typeof a === 'boolean') { return typeof b === 'boolean' ? compareNSB(a, b) : -1; }\n  if (typeof b === 'boolean') { return typeof a === 'boolean' ? compareNSB(a, b) : 1; }\n\n  // Dates\n  if (util.isDate(a)) { return util.isDate(b) ? compareNSB(a.getTime(), b.getTime()) : -1; }\n  if (util.isDate(b)) { return util.isDate(a) ? compareNSB(a.getTime(), b.getTime()) : 1; }\n\n  // Arrays (first element is most significant and so on)\n  if (util.isArray(a)) { return util.isArray(b) ? compareArrays(a, b) : -1; }\n  if (util.isArray(b)) { return util.isArray(a) ? compareArrays(a, b) : 1; }\n\n  // Objects\n  aKeys = Object.keys(a).sort();\n  bKeys = Object.keys(b).sort();\n\n  for (i = 0; i < Math.min(aKeys.length, bKeys.length); i += 1) {\n    comp = compareThings(a[aKeys[i]], b[bKeys[i]]);\n\n    if (comp !== 0) { return comp; }\n  }\n\n  return compareNSB(aKeys.length, bKeys.length);\n}\n\n\n\n// ==============================================================\n// Updating documents\n// ==============================================================\n\n/**\n * The signature of modifier functions is as follows\n * Their structure is always the same: recursively follow the dot notation while creating\n * the nested documents if needed, then apply the \"last step modifier\"\n * @param {Object} obj The model to modify\n * @param {String} field Can contain dots, in that case that means we will set a subfield recursively\n * @param {Model} value\n */\n\n/**\n * Set a field to a new value\n */\nlastStepModifierFunctions.$set = function (obj, field, value) {\n  obj[field] = value;\n};\n\n\n/**\n * Unset a field\n */\nlastStepModifierFunctions.$unset = function (obj, field, value) {\n  delete obj[field];\n};\n\n\n/**\n * Push an element to the end of an array field\n * Optional modifier $each instead of value to push several values\n * Optional modifier $slice to slice the resulting array, see https://docs.mongodb.org/manual/reference/operator/update/slice/\n * DiffÃ©reence with MongoDB: if $slice is specified and not $each, we act as if value is an empty array\n */\nlastStepModifierFunctions.$push = function (obj, field, value) {\n  // Create the array if it doesn't exist\n  if (!obj.hasOwnProperty(field)) { obj[field] = []; }\n\n  if (!util.isArray(obj[field])) { throw new Error(\"Can't $push an element on non-array values\"); }\n\n  if (value !== null && typeof value === 'object' && value.$slice && value.$each === undefined) {\n    value.$each = [];\n  }\n\n  if (value !== null && typeof value === 'object' && value.$each) {\n    if (Object.keys(value).length >= 3 || (Object.keys(value).length === 2 && value.$slice === undefined)) { throw new Error(\"Can only use $slice in cunjunction with $each when $push to array\"); }\n    if (!util.isArray(value.$each)) { throw new Error(\"$each requires an array value\"); }\n\n    value.$each.forEach(function (v) {\n      obj[field].push(v);\n    });\n\n    if (value.$slice === undefined || typeof value.$slice !== 'number') { return; }\n\n    if (value.$slice === 0) {\n      obj[field] = [];\n    } else {\n      var start, end, n = obj[field].length;\n      if (value.$slice < 0) {\n        start = Math.max(0, n + value.$slice);\n        end = n;\n      } else if (value.$slice > 0) {\n        start = 0;\n        end = Math.min(n, value.$slice);\n      }\n      obj[field] = obj[field].slice(start, end);\n    }\n  } else {\n    obj[field].push(value);\n  }\n};\n\n\n/**\n * Add an element to an array field only if it is not already in it\n * No modification if the element is already in the array\n * Note that it doesn't check whether the original array contains duplicates\n */\nlastStepModifierFunctions.$addToSet = function (obj, field, value) {\n  var addToSet = true;\n\n  // Create the array if it doesn't exist\n  if (!obj.hasOwnProperty(field)) { obj[field] = []; }\n\n  if (!util.isArray(obj[field])) { throw new Error(\"Can't $addToSet an element on non-array values\"); }\n\n  if (value !== null && typeof value === 'object' && value.$each) {\n    if (Object.keys(value).length > 1) { throw new Error(\"Can't use another field in conjunction with $each\"); }\n    if (!util.isArray(value.$each)) { throw new Error(\"$each requires an array value\"); }\n\n    value.$each.forEach(function (v) {\n      lastStepModifierFunctions.$addToSet(obj, field, v);\n    });\n  } else {\n    obj[field].forEach(function (v) {\n      if (compareThings(v, value) === 0) { addToSet = false; }\n    });\n    if (addToSet) { obj[field].push(value); }\n  }\n};\n\n\n/**\n * Remove the first or last element of an array\n */\nlastStepModifierFunctions.$pop = function (obj, field, value) {\n  if (!util.isArray(obj[field])) { throw new Error(\"Can't $pop an element from non-array values\"); }\n  if (typeof value !== 'number') { throw new Error(value + \" isn't an integer, can't use it with $pop\"); }\n  if (value === 0) { return; }\n\n  if (value > 0) {\n    obj[field] = obj[field].slice(0, obj[field].length - 1);\n  } else {\n    obj[field] = obj[field].slice(1);\n  }\n};\n\n\n/**\n * Removes all instances of a value from an existing array\n */\nlastStepModifierFunctions.$pull = function (obj, field, value) {\n  var arr, i;\n\n  if (!util.isArray(obj[field])) { throw new Error(\"Can't $pull an element from non-array values\"); }\n\n  arr = obj[field];\n  for (i = arr.length - 1; i >= 0; i -= 1) {\n    if (match(arr[i], value)) {\n      arr.splice(i, 1);\n    }\n  }\n};\n\n\n/**\n * Increment a numeric field's value\n */\nlastStepModifierFunctions.$inc = function (obj, field, value) {\n  if (typeof value !== 'number') { throw new Error(value + \" must be a number\"); }\n\n  if (typeof obj[field] !== 'number') {\n    if (!_.has(obj, field)) {\n      obj[field] = value;\n    } else {\n      throw new Error(\"Don't use the $inc modifier on non-number fields\");\n    }\n  } else {\n    obj[field] += value;\n  }\n};\n\n/**\n * Updates the value of the field, only if specified field is greater than the current value of the field\n */\nlastStepModifierFunctions.$max = function (obj, field, value) {\n  if (typeof obj[field] === 'undefined') {\n    obj[field] = value;\n  } else if (value > obj[field]) {\n    obj[field] = value;\n  }\n};\n\n/**\n * Updates the value of the field, only if specified field is smaller than the current value of the field\n */\nlastStepModifierFunctions.$min = function (obj, field, value) {\n  if (typeof obj[field] === 'undefined') {Â \n    obj[field] = value;\n  } else if (value < obj[field]) {\n    obj[field] = value;\n  }\n};\n\n// Given its name, create the complete modifier function\nfunction createModifierFunction (modifier) {\n  return function (obj, field, value) {\n    var fieldParts = typeof field === 'string' ? field.split('.') : field;\n\n    if (fieldParts.length === 1) {\n      lastStepModifierFunctions[modifier](obj, field, value);\n    } else {\n      if (obj[fieldParts[0]] === undefined) {\n        if (modifier === '$unset') { return; }   // Bad looking specific fix, needs to be generalized modifiers that behave like $unset are implemented\n        obj[fieldParts[0]] = {};\n      }\n      modifierFunctions[modifier](obj[fieldParts[0]], fieldParts.slice(1), value);\n    }\n  };\n}\n\n// Actually create all modifier functions\nObject.keys(lastStepModifierFunctions).forEach(function (modifier) {\n  modifierFunctions[modifier] = createModifierFunction(modifier);\n});\n\n\n/**\n * Modify a DB object according to an update query\n */\nfunction modify (obj, updateQuery) {\n  var keys = Object.keys(updateQuery)\n    , firstChars = _.map(keys, function (item) { return item[0]; })\n    , dollarFirstChars = _.filter(firstChars, function (c) { return c === '$'; })\n    , newDoc, modifiers\n    ;\n\n  if (keys.indexOf('_id') !== -1 && updateQuery._id !== obj._id) { throw new Error(\"You cannot change a document's _id\"); }\n\n  if (dollarFirstChars.length !== 0 && dollarFirstChars.length !== firstChars.length) {\n    throw new Error(\"You cannot mix modifiers and normal fields\");\n  }\n\n  if (dollarFirstChars.length === 0) {\n    // Simply replace the object with the update query contents\n    newDoc = deepCopy(updateQuery);\n    newDoc._id = obj._id;\n  } else {\n    // Apply modifiers\n    modifiers = _.uniq(keys);\n    newDoc = deepCopy(obj);\n    modifiers.forEach(function (m) {\n      var keys;\n\n      if (!modifierFunctions[m]) { throw new Error(\"Unknown modifier \" + m); }\n\n      // Can't rely on Object.keys throwing on non objects since ES6\n      // Not 100% satisfying as non objects can be interpreted as objects but no false negatives so we can live with it\n      if (typeof updateQuery[m] !== 'object') {\n        throw new Error(\"Modifier \" + m + \"'s argument must be an object\");\n      }\n\n      keys = Object.keys(updateQuery[m]);\n      keys.forEach(function (k) {\n        modifierFunctions[m](newDoc, k, updateQuery[m][k]);\n      });\n    });\n  }\n\n  // Check result is valid and return it\n  checkObject(newDoc);\n\n  if (obj._id !== newDoc._id) { throw new Error(\"You can't change a document's _id\"); }\n  return newDoc;\n};\n\n\n// ==============================================================\n// Finding documents\n// ==============================================================\n\n/**\n * Get a value from object with dot notation\n * @param {Object} obj\n * @param {String} field\n */\nfunction getDotValue (obj, field) {\n  var fieldParts = typeof field === 'string' ? field.split('.') : field\n    , i, objs;\n\n  if (!obj) { return undefined; }   // field cannot be empty so that means we should return undefined so that nothing can match\n\n  if (fieldParts.length === 0) { return obj; }\n\n  if (fieldParts.length === 1) { return obj[fieldParts[0]]; }\n\n  if (util.isArray(obj[fieldParts[0]])) {\n    // If the next field is an integer, return only this item of the array\n    i = parseInt(fieldParts[1], 10);\n    if (typeof i === 'number' && !isNaN(i)) {\n      return getDotValue(obj[fieldParts[0]][i], fieldParts.slice(2))\n    }\n\n    // Return the array of values\n    objs = new Array();\n    for (i = 0; i < obj[fieldParts[0]].length; i += 1) {\n       objs.push(getDotValue(obj[fieldParts[0]][i], fieldParts.slice(1)));\n    }\n    return objs;\n  } else {\n    return getDotValue(obj[fieldParts[0]], fieldParts.slice(1));\n  }\n}\n\n\n/**\n * Check whether 'things' are equal\n * Things are defined as any native types (string, number, boolean, null, date) and objects\n * In the case of object, we check deep equality\n * Returns true if they are, false otherwise\n */\nfunction areThingsEqual (a, b) {\n  var aKeys , bKeys , i;\n\n  // Strings, booleans, numbers, null\n  if (a === null || typeof a === 'string' || typeof a === 'boolean' || typeof a === 'number' ||\n      b === null || typeof b === 'string' || typeof b === 'boolean' || typeof b === 'number') { return a === b; }\n\n  // Dates\n  if (util.isDate(a) || util.isDate(b)) { return util.isDate(a) && util.isDate(b) && a.getTime() === b.getTime(); }\n\n  // Arrays (no match since arrays are used as a $in)\n  // undefined (no match since they mean field doesn't exist and can't be serialized)\n  if ((!(util.isArray(a) && util.isArray(b)) && (util.isArray(a) || util.isArray(b))) || a === undefined || b === undefined) { return false; }\n\n  // General objects (check for deep equality)\n  // a and b should be objects at this point\n  try {\n    aKeys = Object.keys(a);\n    bKeys = Object.keys(b);\n  } catch (e) {\n    return false;\n  }\n\n  if (aKeys.length !== bKeys.length) { return false; }\n  for (i = 0; i < aKeys.length; i += 1) {\n    if (bKeys.indexOf(aKeys[i]) === -1) { return false; }\n    if (!areThingsEqual(a[aKeys[i]], b[aKeys[i]])) { return false; }\n  }\n  return true;\n}\n\n\n/**\n * Check that two values are comparable\n */\nfunction areComparable (a, b) {\n  if (typeof a !== 'string' && typeof a !== 'number' && !util.isDate(a) &&\n      typeof b !== 'string' && typeof b !== 'number' && !util.isDate(b)) {\n    return false;\n  }\n\n  if (typeof a !== typeof b) { return false; }\n\n  return true;\n}\n\n\n/**\n * Arithmetic and comparison operators\n * @param {Native value} a Value in the object\n * @param {Native value} b Value in the query\n */\ncomparisonFunctions.$lt = function (a, b) {\n  return areComparable(a, b) && a < b;\n};\n\ncomparisonFunctions.$lte = function (a, b) {\n  return areComparable(a, b) && a <= b;\n};\n\ncomparisonFunctions.$gt = function (a, b) {\n  return areComparable(a, b) && a > b;\n};\n\ncomparisonFunctions.$gte = function (a, b) {\n  return areComparable(a, b) && a >= b;\n};\n\ncomparisonFunctions.$ne = function (a, b) {\n  if (a === undefined) { return true; }\n  return !areThingsEqual(a, b);\n};\n\ncomparisonFunctions.$in = function (a, b) {\n  var i;\n\n  if (!util.isArray(b)) { throw new Error(\"$in operator called with a non-array\"); }\n\n  for (i = 0; i < b.length; i += 1) {\n    if (areThingsEqual(a, b[i])) { return true; }\n  }\n\n  return false;\n};\n\ncomparisonFunctions.$nin = function (a, b) {\n  if (!util.isArray(b)) { throw new Error(\"$nin operator called with a non-array\"); }\n\n  return !comparisonFunctions.$in(a, b);\n};\n\ncomparisonFunctions.$regex = function (a, b) {\n  if (!util.isRegExp(b)) { throw new Error(\"$regex operator called with non regular expression\"); }\n\n  if (typeof a !== 'string') {\n    return false\n  } else {\n    return b.test(a);\n  }\n};\n\ncomparisonFunctions.$exists = function (value, exists) {\n  if (exists || exists === '') {   // This will be true for all values of exists except false, null, undefined and 0\n    exists = true;                 // That's strange behaviour (we should only use true/false) but that's the way Mongo does it...\n  } else {\n    exists = false;\n  }\n\n  if (value === undefined) {\n    return !exists\n  } else {\n    return exists;\n  }\n};\n\n// Specific to arrays\ncomparisonFunctions.$size = function (obj, value) {\n    if (!util.isArray(obj)) { return false; }\n    if (value % 1 !== 0) { throw new Error(\"$size operator called without an integer\"); }\n\n    return (obj.length == value);\n};\ncomparisonFunctions.$elemMatch = function (obj, value) {\n  if (!util.isArray(obj)) { return false; }\n  var i = obj.length;\n  var result = false;   // Initialize result\n  while (i--) {\n    if (match(obj[i], value)) {   // If match for array element, return true\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\narrayComparisonFunctions.$size = true;\narrayComparisonFunctions.$elemMatch = true;\n\n\n/**\n * Match any of the subqueries\n * @param {Model} obj\n * @param {Array of Queries} query\n */\nlogicalOperators.$or = function (obj, query) {\n  var i;\n\n  if (!util.isArray(query)) { throw new Error(\"$or operator used without an array\"); }\n\n  for (i = 0; i < query.length; i += 1) {\n    if (match(obj, query[i])) { return true; }\n  }\n\n  return false;\n};\n\n\n/**\n * Match all of the subqueries\n * @param {Model} obj\n * @param {Array of Queries} query\n */\nlogicalOperators.$and = function (obj, query) {\n  var i;\n\n  if (!util.isArray(query)) { throw new Error(\"$and operator used without an array\"); }\n\n  for (i = 0; i < query.length; i += 1) {\n    if (!match(obj, query[i])) { return false; }\n  }\n\n  return true;\n};\n\n\n/**\n * Inverted match of the query\n * @param {Model} obj\n * @param {Query} query\n */\nlogicalOperators.$not = function (obj, query) {\n  return !match(obj, query);\n};\n\n\n/**\n * Use a function to match\n * @param {Model} obj\n * @param {Query} query\n */\nlogicalOperators.$where = function (obj, fn) {\n  var result;\n\n  if (!_.isFunction(fn)) { throw new Error(\"$where operator used without a function\"); }\n\n  result = fn.call(obj);\n  if (!_.isBoolean(result)) { throw new Error(\"$where function must return boolean\"); }\n\n  return result;\n};\n\n\n/**\n * Tell if a given document matches a query\n * @param {Object} obj Document to check\n * @param {Object} query\n */\nfunction match (obj, query) {\n  var queryKeys, queryKey, queryValue, i;\n\n  // Primitive query against a primitive type\n  // This is a bit of a hack since we construct an object with an arbitrary key only to dereference it later\n  // But I don't have time for a cleaner implementation now\n  if (isPrimitiveType(obj) || isPrimitiveType(query)) {\n    return matchQueryPart({ needAKey: obj }, 'needAKey', query);\n  }\n\n  // Normal query\n  queryKeys = Object.keys(query);\n  for (i = 0; i < queryKeys.length; i += 1) {\n    queryKey = queryKeys[i];\n    queryValue = query[queryKey];\n\n    if (queryKey[0] === '$') {\n      if (!logicalOperators[queryKey]) { throw new Error(\"Unknown logical operator \" + queryKey); }\n      if (!logicalOperators[queryKey](obj, queryValue)) { return false; }\n    } else {\n      if (!matchQueryPart(obj, queryKey, queryValue)) { return false; }\n    }\n  }\n\n  return true;\n};\n\n\n/**\n * Match an object against a specific { key: value } part of a query\n * if the treatObjAsValue flag is set, don't try to match every part separately, but the array as a whole\n */\nfunction matchQueryPart (obj, queryKey, queryValue, treatObjAsValue) {\n  var objValue = getDotValue(obj, queryKey)\n    , i, keys, firstChars, dollarFirstChars;\n\n  // Check if the value is an array if we don't force a treatment as value\n  if (util.isArray(objValue) && !treatObjAsValue) {\n    // If the queryValue is an array, try to perform an exact match\n    if (util.isArray(queryValue)) {\n      return matchQueryPart(obj, queryKey, queryValue, true);\n    }\n\n    // Check if we are using an array-specific comparison function\n    if (queryValue !== null && typeof queryValue === 'object' && !util.isRegExp(queryValue)) {\n      keys = Object.keys(queryValue);\n      for (i = 0; i < keys.length; i += 1) {\n        if (arrayComparisonFunctions[keys[i]]) { return matchQueryPart(obj, queryKey, queryValue, true); }\n      }\n    }\n\n    // If not, treat it as an array of { obj, query } where there needs to be at least one match\n    for (i = 0; i < objValue.length; i += 1) {\n      if (matchQueryPart({ k: objValue[i] }, 'k', queryValue)) { return true; }   // k here could be any string\n    }\n    return false;\n  }\n\n  // queryValue is an actual object. Determine whether it contains comparison operators\n  // or only normal fields. Mixed objects are not allowed\n  if (queryValue !== null && typeof queryValue === 'object' && !util.isRegExp(queryValue) && !util.isArray(queryValue)) {\n    keys = Object.keys(queryValue);\n    firstChars = _.map(keys, function (item) { return item[0]; });\n    dollarFirstChars = _.filter(firstChars, function (c) { return c === '$'; });\n\n    if (dollarFirstChars.length !== 0 && dollarFirstChars.length !== firstChars.length) {\n      throw new Error(\"You cannot mix operators and normal fields\");\n    }\n\n    // queryValue is an object of this form: { $comparisonOperator1: value1, ... }\n    if (dollarFirstChars.length > 0) {\n      for (i = 0; i < keys.length; i += 1) {\n        if (!comparisonFunctions[keys[i]]) { throw new Error(\"Unknown comparison function \" + keys[i]); }\n\n        if (!comparisonFunctions[keys[i]](objValue, queryValue[keys[i]])) { return false; }\n      }\n      return true;\n    }\n  }\n\n  // Using regular expressions with basic querying\n  if (util.isRegExp(queryValue)) { return comparisonFunctions.$regex(objValue, queryValue); }\n\n  // queryValue is either a native value or a normal object\n  // Basic matching is possible\n  if (!areThingsEqual(objValue, queryValue)) { return false; }\n\n  return true;\n}\n\n\n// Interface\nmodule.exports.serialize = serialize;\nmodule.exports.deserialize = deserialize;\nmodule.exports.deepCopy = deepCopy;\nmodule.exports.checkObject = checkObject;\nmodule.exports.isPrimitiveType = isPrimitiveType;\nmodule.exports.modify = modify;\nmodule.exports.getDotValue = getDotValue;\nmodule.exports.match = match;\nmodule.exports.areThingsEqual = areThingsEqual;\nmodule.exports.compareThings = compareThings;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}