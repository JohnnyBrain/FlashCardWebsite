{"ast":null,"code":"import React, { useState } from \"react\";\n\nfunction Snake() {\n  const board = document.createElement('table');\n  const max = 5;\n\n  for (let i = 0; i < max; i++) {\n    const tr = board.insertRow();\n\n    for (let j = 0; j < max; j++) {\n      const td = tr.insertCell();\n      td.appendChild(document.createTextNode(\"___\"));\n      td.style.border = '1px solid black';\n    }\n  }\n\n  const start = [(max - 1) / 2, (max - 1) / 2];\n  board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n  const berry = [1, 1];\n  board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n  const len = 1;\n  const direction = [-1, 0];\n  const startTimer = false;\n  document.addEventListener('keydown', function (event) {\n    board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"___\";\n    board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n    if (event.keyCode = 32) {\n      startTimer = true;\n    } //left arrow\n\n\n    if (event.keyCode == 37) {\n      //if(start[1] > 0){\n      //start[1]--;\n      //}\n      direction = [0, -1];\n    } //down arrow\n\n\n    if (event.keyCode == 40) {\n      //if(start[0] < max - 1){\n      //start[0]++;\n      //}\n      direction = [-1, 0];\n    } //right arrow\n\n\n    if (event.keyCode == 39) {\n      //if(start[1] < max - 1){\n      //start[1]++;\n      //}\n      direction = [0, 1];\n    } //up arrow\n\n\n    if (event.keyCode == 38) {\n      //if(start[0] > 0){\n      //start[0]--;\n      //}\n      direction = [1, 0];\n    }\n\n    if (start[0] == berry[0] && start[1] == berry[1]) {\n      len++;\n    }\n\n    start[0] += direction[0];\n    start[1] += direction[1]; //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n  });\n  document.body.appendChild(board);\n\n  if (started) {\n    var timer = setInterval(function () {\n      if (sec >= 10) {\n        timerDisplay.innerHTML = sec;\n      } else if (sec >= 0) {\n        timerDisplay.innerHTML = \"0\" + sec;\n      }\n\n      sec--;\n\n      if (sec < 0\n      /*|| testArea.innerHTML.length == 0*/\n\n      /*i == wordList.length*/\n      ) {\n        clearInterval(timer);\n        highScore = Math.max(highScore, correctScore.innerHTML);\n        highScoreLabel.innerHTML = highScore;\n      }\n\n      if (sec > 0) {\n        correctScore.innerHTML = Math.floor(wordCount / (60 - sec) * 60);\n      }\n    }, 1000);\n  }\n\n  started = false;\n}\n\n_c = Snake;\nexport default Snake;\n\nvar _c;\n\n$RefreshReg$(_c, \"Snake\");","map":{"version":3,"sources":["/Users/johnbrain/Japanese/SnakeGame/src/snake.js"],"names":["React","useState","Snake","board","document","createElement","max","i","tr","insertRow","j","td","insertCell","appendChild","createTextNode","style","border","start","rows","item","cells","innerHTML","berry","len","direction","startTimer","addEventListener","event","keyCode","body","started","timer","setInterval","sec","timerDisplay","clearInterval","highScore","Math","correctScore","highScoreLabel","floor","wordCount"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,KAAT,GAAgB;AAEZ,QAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACA,QAAMC,GAAG,GAAG,CAAZ;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,GAAnB,EAAwBC,CAAC,EAAzB,EAA4B;AACxB,UAAMC,EAAE,GAAGL,KAAK,CAACM,SAAN,EAAX;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,GAAnB,EAAwBI,CAAC,EAAzB,EAA4B;AACxB,YAAMC,EAAE,GAAGH,EAAE,CAACI,UAAH,EAAX;AACAD,MAAAA,EAAE,CAACE,WAAH,CAAeT,QAAQ,CAACU,cAAT,CAAwB,KAAxB,CAAf;AACAH,MAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,GAAkB,iBAAlB;AACH;AACJ;;AACD,QAAMC,KAAK,GAAG,CAAC,CAACX,GAAG,GAAG,CAAP,IAAY,CAAb,EAAgB,CAACA,GAAG,GAAG,CAAP,IAAY,CAA5B,CAAd;AACAH,EAAAA,KAAK,CAACe,IAAN,CAAWC,IAAX,CAAgBF,KAAK,CAAC,CAAD,CAArB,EAA0BG,KAA1B,CAAgCD,IAAhC,CAAqCF,KAAK,CAAC,CAAD,CAA1C,EAA+CI,SAA/C,GAA2D,KAA3D;AAEA,QAAMC,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAd;AACAnB,EAAAA,KAAK,CAACe,IAAN,CAAWC,IAAX,CAAgBG,KAAK,CAAC,CAAD,CAArB,EAA0BF,KAA1B,CAAgCD,IAAhC,CAAqCG,KAAK,CAAC,CAAD,CAA1C,EAA+CD,SAA/C,GAA2D,KAA3D;AAEA,QAAME,GAAG,GAAG,CAAZ;AAEA,QAAMC,SAAS,GAAG,CAAC,CAAC,CAAF,EAAK,CAAL,CAAlB;AACA,QAAMC,UAAU,GAAG,KAAnB;AAEArB,EAAAA,QAAQ,CAACsB,gBAAT,CAA0B,SAA1B,EAAqC,UAASC,KAAT,EAAe;AAChDxB,IAAAA,KAAK,CAACe,IAAN,CAAWC,IAAX,CAAgBF,KAAK,CAAC,CAAD,CAArB,EAA0BG,KAA1B,CAAgCD,IAAhC,CAAqCF,KAAK,CAAC,CAAD,CAA1C,EAA+CI,SAA/C,GAA2D,KAA3D;AACAlB,IAAAA,KAAK,CAACe,IAAN,CAAWC,IAAX,CAAgBG,KAAK,CAAC,CAAD,CAArB,EAA0BF,KAA1B,CAAgCD,IAAhC,CAAqCG,KAAK,CAAC,CAAD,CAA1C,EAA+CD,SAA/C,GAA2D,KAA3D;;AAEA,QAAGM,KAAK,CAACC,OAAN,GAAgB,EAAnB,EAAsB;AAClBH,MAAAA,UAAU,GAAG,IAAb;AACH,KAN+C,CAQhD;;;AACA,QAAGE,KAAK,CAACC,OAAN,IAAiB,EAApB,EAAuB;AACnB;AACI;AACJ;AACAJ,MAAAA,SAAS,GAAG,CAAC,CAAD,EAAI,CAAC,CAAL,CAAZ;AACH,KAd+C,CAgBhD;;;AACA,QAAGG,KAAK,CAACC,OAAN,IAAiB,EAApB,EAAuB;AACnB;AACI;AACJ;AACAJ,MAAAA,SAAS,GAAG,CAAC,CAAC,CAAF,EAAK,CAAL,CAAZ;AACH,KAtB+C,CAwBhD;;;AACA,QAAGG,KAAK,CAACC,OAAN,IAAiB,EAApB,EAAuB;AACnB;AACI;AACJ;AACAJ,MAAAA,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAZ;AACH,KA9B+C,CAgChD;;;AACA,QAAGG,KAAK,CAACC,OAAN,IAAiB,EAApB,EAAuB;AACnB;AACI;AACJ;AACAJ,MAAAA,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAZ;AACH;;AAED,QAAGP,KAAK,CAAC,CAAD,CAAL,IAAYK,KAAK,CAAC,CAAD,CAAjB,IAAwBL,KAAK,CAAC,CAAD,CAAL,IAAYK,KAAK,CAAC,CAAD,CAA5C,EAAgD;AAC5CC,MAAAA,GAAG;AACN;;AACDN,IAAAA,KAAK,CAAC,CAAD,CAAL,IAAYO,SAAS,CAAC,CAAD,CAArB;AACAP,IAAAA,KAAK,CAAC,CAAD,CAAL,IAAWO,SAAS,CAAC,CAAD,CAApB,CA5CgD,CA6ChD;AACH,GA9CD;AAgDApB,EAAAA,QAAQ,CAACyB,IAAT,CAAchB,WAAd,CAA0BV,KAA1B;;AAEA,MAAG2B,OAAH,EAAW;AACP,QAAIC,KAAK,GAAGC,WAAW,CAAC,YAAU;AAC9B,UAAGC,GAAG,IAAI,EAAV,EAAa;AACTC,QAAAA,YAAY,CAACb,SAAb,GAAyBY,GAAzB;AACH,OAFD,MAGK,IAAGA,GAAG,IAAI,CAAV,EAAY;AACbC,QAAAA,YAAY,CAACb,SAAb,GAAyB,MAAMY,GAA/B;AACH;;AACDA,MAAAA,GAAG;;AAEH,UAAGA,GAAG,GAAG;AAAE;;AAAqC;AAAhD,QAAyE;AACrEE,QAAAA,aAAa,CAACJ,KAAD,CAAb;AACAK,QAAAA,SAAS,GAAGC,IAAI,CAAC/B,GAAL,CAAS8B,SAAT,EAAoBE,YAAY,CAACjB,SAAjC,CAAZ;AACAkB,QAAAA,cAAc,CAAClB,SAAf,GAA2Be,SAA3B;AACH;;AACD,UAAGH,GAAG,GAAG,CAAT,EAAW;AACPK,QAAAA,YAAY,CAACjB,SAAb,GAAyBgB,IAAI,CAACG,KAAL,CAAWC,SAAS,IAAI,KAAKR,GAAT,CAAT,GAAyB,EAApC,CAAzB;AACH;AAGJ,KAnBsB,EAmBpB,IAnBoB,CAAvB;AAoBF;;AACDH,EAAAA,OAAO,GAAG,KAAV;AAEJ;;KAjGQ5B,K;AAkGT,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Snake(){\n\n    const board = document.createElement('table');\n    const max = 5\n    for(let i = 0; i < max; i++){\n        const tr = board.insertRow();\n        for(let j = 0; j < max; j++){\n            const td = tr.insertCell();\n            td.appendChild(document.createTextNode(\"___\"));\n            td.style.border = '1px solid black';\n        }\n    }\n    const start = [(max - 1) / 2, (max - 1) / 2];\n    board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n\n    const berry = [1, 1];\n    board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n    const len = 1;\n\n    const direction = [-1, 0];\n    const startTimer = false;\n\n    document.addEventListener('keydown', function(event){\n        board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"___\";\n        board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n        if(event.keyCode = 32){\n            startTimer = true;\n        }\n\n        //left arrow\n        if(event.keyCode == 37){\n            //if(start[1] > 0){\n                //start[1]--;\n            //}\n            direction = [0, -1];\n        }\n\n        //down arrow\n        if(event.keyCode == 40){\n            //if(start[0] < max - 1){\n                //start[0]++;\n            //}\n            direction = [-1, 0];\n        }\n\n        //right arrow\n        if(event.keyCode == 39){\n            //if(start[1] < max - 1){\n                //start[1]++;\n            //}\n            direction = [0, 1];\n        }\n\n        //up arrow\n        if(event.keyCode == 38){\n            //if(start[0] > 0){\n                //start[0]--;\n            //}\n            direction = [1, 0];\n        }\n\n        if(start[0] == berry[0] && start[1] == berry[1]){\n            len++;\n        }\n        start[0] += direction[0];\n        start[1]+= direction[1];\n        //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n    });\n\n    document.body.appendChild(board);\n\n    if(started){\n        var timer = setInterval(function(){\n            if(sec >= 10){\n                timerDisplay.innerHTML = sec;\n            }\n            else if(sec >= 0){\n                timerDisplay.innerHTML = \"0\" + sec;\n            }\n            sec--;\n    \n            if(sec < 0 /*|| testArea.innerHTML.length == 0*//*i == wordList.length*/){\n                clearInterval(timer);\n                highScore = Math.max(highScore, correctScore.innerHTML);\n                highScoreLabel.innerHTML = highScore;\n            }\n            if(sec > 0){\n                correctScore.innerHTML = Math.floor(wordCount / (60 - sec) * 60);\n            }\n            \n            \n        }, 1000);\n     }\n     started = false;\n\n}\nexport default Snake;"]},"metadata":{},"sourceType":"module"}