{"ast":null,"code":"import _asyncToGenerator from\"/Users/johnbrain/Projects/FlashCardProject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/johnbrain/Projects/FlashCardProject/node_modules/@babel/runtime/regenerator/index.js\";var _require=require('express'),response=_require.response;var express=require('express');var fs=require('fs');var mysql=require('mysql');var Datastore=require('nedb');var argon2=require('argon2');var _require2=require('path'),resolve=_require2.resolve;var app=express();app.listen(3000,function(){return console.log('working!');});app.use(express.static('src'));//makes server able to understand incoming data as json.\napp.use(express.json({limit:'1mb'}));//app.use(express.json({strict: false}));\nvar database=new Datastore('database.db');database.loadDatabase();function readDataFile(){var sendDeckList=[];/*return fs.readFileSync('Data.txt', function(err, data) {\n      if(err){\n        throw err;\n      }\n      var deckList = data.toString().split(\"\\n\");\n      for(i in deckList) {\n          //console.log(JSON.parse(deckList[i]).deckList[0].name);\n          var tempDeck = JSON.parse(deckList[i]).deckList;\n          for(i in tempDeck){\n            //var deckName = tempDeck[i].name;\n            var newDeck = new Deck(tempDeck[i].name);\n            var cardList = tempDeck[i].cardList;\n            for(i in cardList){\n              var newCard = new Card(cardList[i].front, cardList[i].back);\n              newDeck.addCard(newCard);\n            }\n            sendDeckList.push(newDeck);\n            //console.log(newDeck.getName());\n            //console.log(newDeck.getCardList());\n            //console.log(deckName);\n          }\n      }\n      //console.log(sendDeckList);\n      //return sendDeckList;\n  });*/ /*\n  return fs.readFileSync('Data.txt', function(err, data) {\n    if(err){\n      throw err;\n    }\n    var deckList = data.toString().split(\"\\n\");\n    for(i in deckList) {\n        //console.log(JSON.parse(deckList[i]).deckList[0].name);\n        var tempDeck = JSON.parse(deckList[i]).deckList;\n        for(i in tempDeck){\n          //var deckName = tempDeck[i].name;\n          sendDeckList.push([]);\n          sendDeckList[i].push(tempDeck[i].name);\n          var cardList = tempDeck[i].cardList;\n          for(i in cardList){\n            sendDeckList[i].push([cardList[i].front, cardList[i].back]);\n          }\n          //console.log(newDeck.getName());\n          //console.log(newDeck.getCardList());\n          //console.log(deckName);\n        }\n        \n    }\n    //return sendDeckList;\n  });\n  */ //console.log(sendDeckList);\n//return sendDeckList;\n}//connects the server to the client to recieve and send data. Request is what the client sends to the server, ie data. \n// the ressponse is what the server sends beck to the client, ie a confirmation upon recieving the data.\napp.post('/api',function(req,res){console.log(\"request recieved\");console.log(req.body);fs.appendFile('./Data.txt',JSON.stringify(/*req.body.time*/req.body)+\"\\n\",function(err){if(err){console.error(err);}// file written successfully\n});//what is being sent back to the client\nres.json({status:'success',DeckList:req.body});});/*\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.writeFile('./Data.txt', JSON.stringify(/*req.body.time*/ /* req.body) + \"\\n\", err => {\n  if (err) {\n    console.error(err);\n  }\n  // file written successfully\n});\n//what is being sent back to the client\nres.json({\n  status: 'success',\n  DeckList: req.body\n});\n});\n*/ //ONLY WORKS IF NO TWO USERNAMES ARE THE SAME\napp.post('/editDeckList',function(req,res){console.log(\"request recieved\");console.log(req.body);//database.insert(req.body);\n//database.insert(req.body[0].sendDeckList);\n//what was used before adding hashing\n//database.update({username: req.body.username, password: req.body.password}, req.body);\nvar hash=hashPassword(req.body.password).then(function(rtn){req.body.password=rtn;database.update({username:req.body.username},req.body);});//what is being sent back to the client\nres.json({status:'success',DeckList:req.body});});/*\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n    console.log(\"good\");\n    //res.send(\"high\");\n    var rtnList = readDataFile();\n    console.log(rtnList);\n    //rtnList = ['h', 'h'];\n    res.send(rtnList);\n});\n*/ //sends a response to the client.\napp.get('/getData',function(req,res){console.log(\"good\");//res.send(\"high\");\ndatabase.find({},function(err,data){if(err){console.log(err);}res.json(data);console.log(data[0].sendDeckList[0].name);});//console.log(rtnList);\n//rtnList = ['h', 'h'];\n//res.send(rtnList);\n});app.post('/login',function(req,res){console.log(\"good\");//res.send(\"high\");\ndatabase.find({username:req.body.username},function(err,data){if(data.length==0){console.log(\"err\");console.log(data);res.json({});}else{//this is just test stuff you can delete it\nconsole.log(data[0].password);console.log(req.body.password);var bing=verifyPassword(data[0].password,req.body.password).then(function(rtn){console.log(rtn);console.log(data[0]);});var _loop=function _loop(i){var verify=verifyPassword(data[i].password,req.body.password).then(function(rtn){if(rtn){res.json([data[i]]);console.log('login succesful');}});};for(var i=0;i<data.length;i++){_loop(i);}//res.json(data);\n/*\n      console.log(data);\n      res.json(data);\n      console.log(data[0].sendDeckList[0].name);\n      console.log(req.body.username);\n      */}});/*\n  database.find({username: req.body.username, password: req.body.password}, (err, data) => {\n    if(data.length == 0){\n      console.log(\"err\");\n      console.log(data);\n      res.json({});\n    }\n    else{\n      console.log(data);\n      res.json(data);\n      console.log(data[0].sendDeckList[0].name);\n      console.log(req.body.username);\n    }\n  });\n  */ /*\n    const hash = hashPassword(req.body.password).then(rtn => {\n      console.log(rtn);\n      req.body.password = rtn;\n      database.find({username: req.body.username, password: req.body.password}, (err, data) => {\n        if(data.length == 0){\n          console.log(\"err\");\n          res.json({});\n        }\n        else{\n          console.log(data);\n          res.json(data);\n          console.log(data[0].sendDeckList[0].name);\n          console.log(req.body.username);\n        }\n      });\n    });\n    */ //console.log(rtnList);\n//rtnList = ['h', 'h'];\n//res.send(rtnList);\n});//hashes the password\nfunction hashPassword(_x){return _hashPassword.apply(this,arguments);}//checks if a hashed password and the normal password are the same and returns as boolean\nfunction _hashPassword(){_hashPassword=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(password){var hash;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return argon2.hash(password);case 3:hash=_context.sent;return _context.abrupt(\"return\",hash);case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return _hashPassword.apply(this,arguments);}function verifyPassword(_x2,_x3){return _verifyPassword.apply(this,arguments);}function _verifyPassword(){_verifyPassword=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(hashPass,password){var verify;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return argon2.verify(hashPass,password);case 3:verify=_context2.sent;return _context2.abrupt(\"return\",verify);case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);}));return _verifyPassword.apply(this,arguments);}app.post('/createAccount',function(req,res){var username=req.body.username;var password=req.body.password;database.find({username:req.body.username},function(err,data){console.log(data.length);if(data.length!=0){console.log(\"err\");console.log(data);res.json({success:\"bad\"});}else{var hash=hashPassword(password).then(function(rtn){console.log(rtn);req.body.password=rtn;database.insert(req.body);res.json({success:\"good\"});/*res.json({\n          username: req.body.username,\n          password: rtn\n        });*/});}});//database.insert(req.body);\n//what is being sent back to the client\n//res.json({\n//status: 'success',\n//DeckList: req.body\n//});\n});//console.log(\"high\");\n/*\nconst fs = require('fs');\nconst content = 'Some content!';\n\nfs.writeFile('./Data.txt', content, err => {\n  if (err) {\n    console.error(err);\n  }\n  // file written successfully\n});\n*/ //const myURL = new URL('/foo', 'https://example.org/');\n//console.log('good');","map":{"version":3,"names":["require","response","express","fs","mysql","Datastore","argon2","resolve","app","listen","console","log","use","static","json","limit","database","loadDatabase","readDataFile","sendDeckList","post","req","res","body","appendFile","JSON","stringify","err","error","status","DeckList","hash","hashPassword","password","then","rtn","update","username","get","find","data","name","length","bing","verifyPassword","i","verify","hashPass","success","insert"],"sources":["/Users/johnbrain/Projects/FlashCardProject/src/index.js"],"sourcesContent":["\n\nconst { response } = require('express');\nconst express = require('express');\nconst fs = require('fs');\nconst mysql = require('mysql');\nconst Datastore = require('nedb');\nconst argon2 = require('argon2');\nconst { resolve } = require('path');\n\nconst app = express();\napp.listen(3000, () => console.log('working!'));\napp.use(express.static('src'));\n//makes server able to understand incoming data as json.\napp.use(express.json({ limit: '1mb' }));\n//app.use(express.json({strict: false}));\nconst database = new Datastore('database.db');\ndatabase.loadDatabase();\n\nfunction readDataFile() {\n  var sendDeckList = [];\n  /*return fs.readFileSync('Data.txt', function(err, data) {\n      if(err){\n        throw err;\n      }\n      var deckList = data.toString().split(\"\\n\");\n      for(i in deckList) {\n          //console.log(JSON.parse(deckList[i]).deckList[0].name);\n          var tempDeck = JSON.parse(deckList[i]).deckList;\n          for(i in tempDeck){\n            //var deckName = tempDeck[i].name;\n            var newDeck = new Deck(tempDeck[i].name);\n            var cardList = tempDeck[i].cardList;\n            for(i in cardList){\n              var newCard = new Card(cardList[i].front, cardList[i].back);\n              newDeck.addCard(newCard);\n            }\n            sendDeckList.push(newDeck);\n            //console.log(newDeck.getName());\n            //console.log(newDeck.getCardList());\n            //console.log(deckName);\n          }\n      }\n      //console.log(sendDeckList);\n      //return sendDeckList;\n  });*/\n  /*\n  return fs.readFileSync('Data.txt', function(err, data) {\n    if(err){\n      throw err;\n    }\n    var deckList = data.toString().split(\"\\n\");\n    for(i in deckList) {\n        //console.log(JSON.parse(deckList[i]).deckList[0].name);\n        var tempDeck = JSON.parse(deckList[i]).deckList;\n        for(i in tempDeck){\n          //var deckName = tempDeck[i].name;\n          sendDeckList.push([]);\n          sendDeckList[i].push(tempDeck[i].name);\n          var cardList = tempDeck[i].cardList;\n          for(i in cardList){\n            sendDeckList[i].push([cardList[i].front, cardList[i].back]);\n          }\n          //console.log(newDeck.getName());\n          //console.log(newDeck.getCardList());\n          //console.log(deckName);\n        }\n        \n    }\n    //return sendDeckList;\n  });\n  */\n  //console.log(sendDeckList);\n  //return sendDeckList;\n}\n\n\n//connects the server to the client to recieve and send data. Request is what the client sends to the server, ie data. \n// the ressponse is what the server sends beck to the client, ie a confirmation upon recieving the data.\napp.post('/api', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.appendFile('./Data.txt', JSON.stringify(/*req.body.time*/ req.body) + \"\\n\", err => {\n    if (err) {\n      console.error(err);\n    }\n    // file written successfully\n  });\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n\n/*\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.writeFile('./Data.txt', JSON.stringify(/*req.body.time*//* req.body) + \"\\n\", err => {\n  if (err) {\n    console.error(err);\n  }\n  // file written successfully\n});\n//what is being sent back to the client\nres.json({\n  status: 'success',\n  DeckList: req.body\n});\n});\n*/\n\n//ONLY WORKS IF NO TWO USERNAMES ARE THE SAME\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  //database.insert(req.body);\n  //database.insert(req.body[0].sendDeckList);\n\n  //what was used before adding hashing\n  //database.update({username: req.body.username, password: req.body.password}, req.body);\n\n  const hash = hashPassword(req.body.password).then(rtn => {\n    req.body.password = rtn;\n    database.update({ username: req.body.username }, req.body);\n  });\n\n\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n\n/*\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n    console.log(\"good\");\n    //res.send(\"high\");\n    var rtnList = readDataFile();\n    console.log(rtnList);\n    //rtnList = ['h', 'h'];\n    res.send(rtnList);\n});\n*/\n\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n  console.log(\"good\");\n  //res.send(\"high\");\n  database.find({}, (err, data) => {\n    if (err) {\n      console.log(err);\n    }\n    res.json(data);\n    console.log(data[0].sendDeckList[0].name);\n  });\n  //console.log(rtnList);\n  //rtnList = ['h', 'h'];\n  //res.send(rtnList);\n});\n\napp.post('/login', (req, res) => {\n  console.log(\"good\");\n  //res.send(\"high\");\n\n  database.find({ username: req.body.username }, (err, data) => {\n    if (data.length == 0) {\n      console.log(\"err\");\n      console.log(data);\n      res.json({});\n    }\n    else {\n      //this is just test stuff you can delete it\n      console.log(data[0].password);\n      console.log(req.body.password);\n      const bing = verifyPassword(data[0].password, req.body.password).then(rtn => {\n        console.log(rtn);\n        console.log(data[0]);\n      });\n\n      for (let i = 0; i < data.length; i++) {\n        const verify = verifyPassword(data[i].password, req.body.password).then(rtn => {\n          if (rtn) {\n            res.json([data[i]]);\n            console.log('login succesful');\n          }\n        })\n      }\n      //res.json(data);\n      /*\n      console.log(data);\n      res.json(data);\n      console.log(data[0].sendDeckList[0].name);\n      console.log(req.body.username);\n      */\n    }\n  });\n\n  /*\n  database.find({username: req.body.username, password: req.body.password}, (err, data) => {\n    if(data.length == 0){\n      console.log(\"err\");\n      console.log(data);\n      res.json({});\n    }\n    else{\n      console.log(data);\n      res.json(data);\n      console.log(data[0].sendDeckList[0].name);\n      console.log(req.body.username);\n    }\n  });\n  */\n  /*\n    const hash = hashPassword(req.body.password).then(rtn => {\n      console.log(rtn);\n      req.body.password = rtn;\n      database.find({username: req.body.username, password: req.body.password}, (err, data) => {\n        if(data.length == 0){\n          console.log(\"err\");\n          res.json({});\n        }\n        else{\n          console.log(data);\n          res.json(data);\n          console.log(data[0].sendDeckList[0].name);\n          console.log(req.body.username);\n        }\n      });\n    });\n    */\n\n  //console.log(rtnList);\n  //rtnList = ['h', 'h'];\n  //res.send(rtnList);\n});\n\n//hashes the password\nasync function hashPassword(password) {\n  try {\n    const hash = await argon2.hash(password);\n    return hash;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\n//checks if a hashed password and the normal password are the same and returns as boolean\nasync function verifyPassword(hashPass, password) {\n  try {\n    const verify = await argon2.verify(hashPass, password);\n    return verify;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\napp.post('/createAccount', (req, res) => {\n  var username = req.body.username;\n  var password = req.body.password;\n  database.find({ username: req.body.username }, (err, data) => {\n    console.log(data.length);\n    if (data.length != 0) {\n      console.log(\"err\");\n      console.log(data);\n      res.json({ success: \"bad\" });\n    }\n    else {\n      const hash = hashPassword(password).then(rtn => {\n        console.log(rtn);\n        req.body.password = rtn;\n        database.insert(req.body);\n\n        res.json({ success: \"good\" });\n\n        /*res.json({\n          username: req.body.username,\n          password: rtn\n        });*/\n      });\n    }\n  });\n\n  //database.insert(req.body);\n\n  //what is being sent back to the client\n  //res.json({\n  //status: 'success',\n  //DeckList: req.body\n  //});\n});\n\n\n\n\n//console.log(\"high\");\n\n/*\nconst fs = require('fs');\nconst content = 'Some content!';\n\nfs.writeFile('./Data.txt', content, err => {\n  if (err) {\n    console.error(err);\n  }\n  // file written successfully\n});\n*/\n\n//const myURL = new URL('/foo', 'https://example.org/');\n\n//console.log('good');\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}