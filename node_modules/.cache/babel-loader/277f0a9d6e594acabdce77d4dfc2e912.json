{"ast":null,"code":"import React, { useState } from \"react\";\nvar snakeList = [];\n\nfunction Snake() {\n  const board = document.createElement('table');\n  const max = 30;\n\n  for (let i = 0; i < max; i++) {\n    const tr = board.insertRow();\n\n    for (let j = 0; j < max; j++) {\n      const td = tr.insertCell();\n      td.appendChild(document.createTextNode(\"___\"));\n      td.style.border = '1px solid black';\n    }\n  }\n\n  const start = [(max - 1) / 2, (max - 1) / 2];\n  board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n  const berry = [1, 1];\n  board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n  const len = 1;\n  const direction = [0, 0];\n  const startTimer = false;\n  snakeList.push(start[0], start[1]);\n  document.addEventListener('keydown', function (event) {\n    //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"___\";\n    board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\"; //left arrow\n\n    if (event.keyCode == 37) {\n      //if(start[1] > 0){\n      //start[1]--;\n      //}\n      if (direction[1] != 1) {\n        direction[1] = -1;\n        direction[0] = 0;\n      }\n    } //down arrow\n\n\n    if (event.keyCode == 40) {\n      //if(start[0] < max - 1){\n      //start[0]++;\n      //}\n      if (direction[0] != -1) {\n        direction[0] = 1;\n        direction[1] = 0;\n      }\n    } //right arrow\n\n\n    if (event.keyCode == 39) {\n      //if(start[1] < max - 1){\n      //start[1]++;\n      // }\n      if (direction[1] != -1) {\n        direction[1] = 1;\n        direction[0] = 0;\n      }\n    } //up arrow\n\n\n    if (event.keyCode == 38) {\n      //if(start[0] > 0){\n      //start[0]--;\n      //}\n      if (direction[0] != 1) {\n        direction[0] = -1;\n        direction[1] = 0;\n      }\n    } //if(start[0] == berry[0] && start[1] == berry[1]){\n    //len++;\n    //}\n    //start[0] += direction[0];\n    //start[1]+= direction[1];\n    //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n\n  });\n  var timer = setInterval(function () {\n    //for(let i = 0; i < max; i++){\n    //for(let j = 0; j < max; j++){\n    //board.rows.item(start[i]).cells.item(start[j]).innerHTML = \"***\";\n    //}\n    //}\n    board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n    if (start[0] == berry[0] && start[1] == berry[1]) {\n      len++;\n    } //updates position of snake\n\n\n    start[0] += direction[0];\n    start[1] += direction[1]; //for(let i = 0; i < len; i++){\n    //board.rows.item(start[0] + direction[0] * i).cells.item(start[1] + direction[1] * i).innerHTML = \"***\";\n    //}\n\n    board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n    /*if(direction[0] != 0){\n        board.rows.item(start[0] + -1 * (direction[0] * (len + 1))).cells.item(start[1]).innerHTML = \"___\";\n    }\n    else if(direction[1] != 0){\n        board.rows.item(start[0]).cells.item(start[1] + -1 * (direction[1] * (len + 1))).innerHTML = \"___\";\n    }*/\n\n    snakeList.unshift([start[0], start[1]]);\n    board.rows.item(snakeList[snakeList.length - 1][0]).cells.item(snakeList[snakeList.length - 1][1]).innerHTML = \"___\";\n    snakeList.splice(snakeList.length, 1); //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n    // board.rows.item(start[0] + direction[0]).cells.item(start[1] + direction[1]).innerHTML = \"***\";\n  }, 100);\n  document.body.appendChild(board);\n}\n\n_c = Snake;\nexport default Snake;\n\nvar _c;\n\n$RefreshReg$(_c, \"Snake\");","map":{"version":3,"sources":["/Users/johnbrain/Projects/SnakeGame/src/snake.js"],"names":["React","useState","snakeList","Snake","board","document","createElement","max","i","tr","insertRow","j","td","insertCell","appendChild","createTextNode","style","border","start","rows","item","cells","innerHTML","berry","len","direction","startTimer","push","addEventListener","event","keyCode","timer","setInterval","unshift","length","splice","body"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nvar snakeList = [];\n\nfunction Snake(){\n\n    const board = document.createElement('table');\n    const max = 30\n    for(let i = 0; i < max; i++){\n        const tr = board.insertRow();\n        for(let j = 0; j < max; j++){\n            const td = tr.insertCell();\n            td.appendChild(document.createTextNode(\"___\"));\n            td.style.border = '1px solid black';\n        }\n    }\n    const start = [(max - 1) / 2, (max - 1) / 2];\n    board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n\n    const berry = [1, 1];\n    board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n    const len = 1;\n\n    const direction = [0, 0];\n    const startTimer = false;\n    snakeList.push(start[0], start[1])\n    ;\n    document.addEventListener('keydown', function(event){\n        //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"___\";\n        board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n        //left arrow\n        if(event.keyCode == 37){\n            //if(start[1] > 0){\n                //start[1]--;\n           //}\n           if(direction[1] != 1){\n                direction[1] = -1;\n                direction[0] = 0;\n           }\n        }\n\n        //down arrow\n        if(event.keyCode == 40){\n            //if(start[0] < max - 1){\n                //start[0]++;\n            //}\n            if(direction[0] != -1){\n                direction[0] = 1;\n                direction[1] = 0;\n            }\n        }\n\n        //right arrow\n        if(event.keyCode == 39){\n            //if(start[1] < max - 1){\n                //start[1]++;\n           // }\n           if(direction[1] != -1){\n                direction[1] = 1;\n                direction[0] = 0;\n           }\n        }\n\n        //up arrow\n        if(event.keyCode ==38){\n            //if(start[0] > 0){\n                //start[0]--;\n            //}\n            if(direction[0] != 1){\n                direction[0] = -1;\n                direction[1] = 0;\n            }\n        }\n\n        //if(start[0] == berry[0] && start[1] == berry[1]){\n            //len++;\n        //}\n        //start[0] += direction[0];\n        //start[1]+= direction[1];\n        //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n\n        \n            \n    });\n    var timer = setInterval(function(){\n        //for(let i = 0; i < max; i++){\n            //for(let j = 0; j < max; j++){\n                //board.rows.item(start[i]).cells.item(start[j]).innerHTML = \"***\";\n            //}\n        //}\n        board.rows.item(berry[0]).cells.item(berry[1]).innerHTML = \"***\";\n\n        if(start[0] == berry[0] && start[1] == berry[1]){\n            len++;\n        }\n\n        //updates position of snake\n        \n        start[0] += direction[0];\n        start[1] += direction[1];\n        //for(let i = 0; i < len; i++){\n            //board.rows.item(start[0] + direction[0] * i).cells.item(start[1] + direction[1] * i).innerHTML = \"***\";\n        //}\n        board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n        /*if(direction[0] != 0){\n            board.rows.item(start[0] + -1 * (direction[0] * (len + 1))).cells.item(start[1]).innerHTML = \"___\";\n        }\n        else if(direction[1] != 0){\n            board.rows.item(start[0]).cells.item(start[1] + -1 * (direction[1] * (len + 1))).innerHTML = \"___\";\n        }*/\n\n        snakeList.unshift([start[0], start[1]]);\n        board.rows.item(snakeList[snakeList.length - 1][0]).cells.item(snakeList[snakeList.length - 1][1]).innerHTML = \"___\";\n        snakeList.splice(snakeList.length, 1);\n        \n        //board.rows.item(start[0]).cells.item(start[1]).innerHTML = \"***\";\n       // board.rows.item(start[0] + direction[0]).cells.item(start[1] + direction[1]).innerHTML = \"***\";\n    }, 100);\n\n    document.body.appendChild(board);\n\n}\nexport default Snake;"]},"metadata":{},"sourceType":"module"}