{"ast":null,"code":"import { Card } from \"./Card.js\";\nexport class Deck {\n  constructor(name) {\n    this.name = name;\n    this.cardList = [];\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  setName(name) {\n    this.name = name;\n  }\n\n  getCardList() {\n    return this.cardList;\n  }\n\n  getCard(idx) {\n    /*if(idx < 0 || idx >= this.cardList.length){\n        //throw new Error(\"idx not in cardList\");\n    }\n    return this.cardList[idx];*/\n    return \"test'\";\n  }\n\n  addCard(card) {\n    this.cardList.push(card);\n  }\n\n  removeCard(idx) {\n    if (idx < 0 || idx >= this.cardList.length) {\n      throw new Error(\"idx not in cardList\");\n    }\n\n    this.cardList.splice(idx, 1);\n  }\n\n  removeCard(front, back) {\n    for (let i = 0; i < this.cardList.length; i++) {\n      if (this.cardList.getCard(i).getFront == front && this.cardList.getCard(i).getBack == back) {\n        this.cardList.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  getCard(idx) {\n    /*if(idx < 0 || idx >= this.cardList.length){\n        //throw new Error(\"idx not in cardList\");\n    }\n    return this.cardList[idx];*/\n    return \"test'\";\n  }\n\n  getCard(front, back) {\n    for (let i = 0; i < this.cardList.length; i++) {\n      if (this.cardList.getCard(i).getFront() == front && this.cardList.getCard(i).getBack() == back) {\n        return this.cardList.getCard(i);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/johnbrain/Projects/FlashCardProject/src/Deck.js"],"names":["Card","Deck","constructor","name","cardList","getName","setName","getCardList","getCard","idx","addCard","card","push","removeCard","length","Error","splice","front","back","i","getFront","getBack"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,WAAnB;AAEA,OAAO,MAAMC,IAAN,CAAU;AAEbC,EAAAA,WAAW,CAACC,IAAD,EAAM;AACb,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACH;;AAEDC,EAAAA,OAAO,GAAE;AACL,WAAO,KAAKF,IAAZ;AACH;;AAEDG,EAAAA,OAAO,CAACH,IAAD,EAAM;AACV,SAAKA,IAAL,GAAYA,IAAZ;AACF;;AAEDI,EAAAA,WAAW,GAAE;AACT,WAAO,KAAKH,QAAZ;AACH;;AACDI,EAAAA,OAAO,CAACC,GAAD,EAAK;AACR;AACR;AACA;AACA;AACQ,WAAO,OAAP;AACH;;AAEDC,EAAAA,OAAO,CAACC,IAAD,EAAM;AACT,SAAKP,QAAL,CAAcQ,IAAd,CAAmBD,IAAnB;AACH;;AAEDE,EAAAA,UAAU,CAACJ,GAAD,EAAK;AACX,QAAGA,GAAG,GAAG,CAAN,IAAWA,GAAG,IAAI,KAAKL,QAAL,CAAcU,MAAnC,EAA0C;AACtC,YAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACH;;AACD,SAAKX,QAAL,CAAcY,MAAd,CAAqBP,GAArB,EAA0B,CAA1B;AACH;;AAEDI,EAAAA,UAAU,CAACI,KAAD,EAAQC,IAAR,EAAa;AACnB,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKf,QAAL,CAAcU,MAAjC,EAAyCK,CAAC,EAA1C,EAA6C;AACzC,UAAG,KAAKf,QAAL,CAAcI,OAAd,CAAsBW,CAAtB,EAAyBC,QAAzB,IAAqCH,KAArC,IACA,KAAKb,QAAL,CAAcI,OAAd,CAAsBW,CAAtB,EAAyBE,OAAzB,IAAoCH,IADvC,EAC4C;AACxC,aAAKd,QAAL,CAAcY,MAAd,CAAqBG,CAArB,EAAwB,CAAxB;AACA;AACH;AACJ;AACJ;;AAEDX,EAAAA,OAAO,CAACC,GAAD,EAAK;AACR;AACR;AACA;AACA;AACQ,WAAO,OAAP;AACH;;AAEDD,EAAAA,OAAO,CAACS,KAAD,EAAQC,IAAR,EAAa;AAChB,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKf,QAAL,CAAcU,MAAjC,EAAyCK,CAAC,EAA1C,EAA6C;AACzC,UAAG,KAAKf,QAAL,CAAcI,OAAd,CAAsBW,CAAtB,EAAyBC,QAAzB,MAAuCH,KAAvC,IACA,KAAKb,QAAL,CAAcI,OAAd,CAAsBW,CAAtB,EAAyBE,OAAzB,MAAsCH,IADzC,EAC8C;AAC1C,eAAO,KAAKd,QAAL,CAAcI,OAAd,CAAsBW,CAAtB,CAAP;AACH;AACJ;AACJ;;AA9DY","sourcesContent":["import {Card} from \"./Card.js\";\n\nexport class Deck{\n\n    constructor(name){\n        this.name = name;\n        this.cardList = [];\n    }\n\n    getName(){\n        return this.name;\n    }\n\n    setName(name){\n       this.name = name;\n    }\n\n    getCardList(){\n        return this.cardList;\n    }\n    getCard(idx){\n        /*if(idx < 0 || idx >= this.cardList.length){\n            //throw new Error(\"idx not in cardList\");\n        }\n        return this.cardList[idx];*/\n        return \"test'\"\n    }\n\n    addCard(card){\n        this.cardList.push(card);\n    }\n\n    removeCard(idx){\n        if(idx < 0 || idx >= this.cardList.length){\n            throw new Error(\"idx not in cardList\");\n        }\n        this.cardList.splice(idx, 1);\n    }\n\n    removeCard(front, back){\n        for(let i = 0; i < this.cardList.length; i++){\n            if(this.cardList.getCard(i).getFront == front \n            && this.cardList.getCard(i).getBack == back){\n                this.cardList.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    getCard(idx){\n        /*if(idx < 0 || idx >= this.cardList.length){\n            //throw new Error(\"idx not in cardList\");\n        }\n        return this.cardList[idx];*/\n        return \"test'\"\n    }\n\n    getCard(front, back){\n        for(let i = 0; i < this.cardList.length; i++){\n            if(this.cardList.getCard(i).getFront() == front \n            && this.cardList.getCard(i).getBack() == back){\n                return this.cardList.getCard(i);\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}