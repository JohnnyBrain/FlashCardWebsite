{"ast":null,"code":"var players = [];\nvar deck = [];\nvar board = [];\nvar tempDeck = 0;\nvar winner = -1;\nvar cnt = 52;\n/*\n    9: straight flush\n    8: four of a kind\n    7: full house\n    6: flush\n    5: straight\n    4: 3 of a kind\n    3: 2 pair\n    2: pair\n    1: high card\n\n\n    1: diamond\n    2: spades\n    3: clubs\n    4: hearts\n */\n\nfunction pokerGame() {\n  deck = [];\n  players = [];\n  board = [];\n\n  for (let i = 2; i <= 13; i++) {\n    deck.push([[i, 1], [i, 2], [i, 3], [i, 4]]);\n  } //players.push([[12, 2], [12, 1]]);\n  //players.push([[13, 1], [13, 3]]);\n\n  /*players.push([]);\n  var tempi = Math.floor(Math.random() * deck.length);\n  var tempj =  Math.floor(Math.random() * deck[tempi].length);\n  players[0].push(deck[tempi][tempj]);\n  var tempi = Math.floor(Math.random() * deck.length);\n  var tempj =  Math.floor(Math.random() * deck[tempi].length);\n  players[0].push(deck[tempi][tempj]);\n  players.push([]);\n  var tempi = Math.floor(Math.random() * deck.length);\n  var tempj =  Math.floor(Math.random() * deck[tempi].length);\n  players[1].push(deck[tempi][tempj]);\n  var tempi = Math.floor(Math.random() * deck.length);\n  var tempj =  Math.floor(Math.random() * deck[tempi].length);\n  players[1].push(deck[tempi][tempj]);*/\n\n  /*for(let i = 0; i < 5; i++){\n      var tempi = Math.floor(Math.random() * deck.length);\n      var tempj =  Math.floor(Math.random() * deck[tempi].length);\n      board.push(deck[tempi][tempj]);\n      deck[tempi].splice(tempj, 1);\n  }*/\n\n  /*board.push([2,2]);\n  board.push([3,3]);\n  board.push([7,2]);\n  board.push([4,1]);\n  board.push([10,3]);*/\n\n\n  var playerProb = [];\n\n  for (let i = 0; i < players.length; i++) {\n    playerProb[i] = 0;\n  }\n\n  var num = 2;\n  var cnt = 2;\n  var rtn = 0;\n  /*board.length > 0*/\n\n  /*while(cnt < 11){\n      rtn = 1;\n      board = [];\n      for(let i = 4; i >= 0; i--){\n          var tempi = Math.floor(Math.random() * deck.length);\n          var tempj =  Math.floor(Math.random() * deck[tempi].length);\n          board.push(deck[tempi][tempj].slice());\n          deck[tempi].splice(tempj, 1);\n          if(deck[tempi].length == 0){\n              deck.splice(tempi, 1);\n          }\n          \n      }\n      cnt += 1;\n      //return board;\n      //rtn = board;\n      \n       //return win(players, board);\n      //win(players, board)\n      playerProb[win(players, board)] += 1;\n  }*/\n\n  players.push(deck[2][1].slice(), deck[4][3].slice());\n  deck[2].splice(1, 1);\n  deck[4].splice(3, 1);\n  players.push(deck[6][0].slice(), deck[8][2].slice());\n  deck[6].splice(0, 1);\n  deck[8].splice(2, 1); //var winPoint = win(players, board);\n\n  var winPoint = calc(players, deck, board); //var winPoint = 1;\n\n  const testL = document.createElement(\"label\"); //testL.innerHTML = winPoint;\n\n  testL.innerHTML = winPoint;\n  document.body.appendChild(testL); //tempDeck = deck;\n}\n\nfunction calc(players, deck, board) {\n  var playerProb = [];\n\n  for (let i = 0; i < deck.length; i++) {\n    for (let j = 0; j < deck[i].length; j++) {\n      tempDeck.push(deck[i][j].slice());\n    }\n  }\n\n  var tempBoard = [[], [], [], [], []];\n  var tempDeck = deck.slice();\n\n  for (let i = 0; i < players.length; i++) {\n    playerProb.push(0);\n  }\n  /*if(board.length == 0){\n      for(let i = 0; i < tempDeck.length; i++){\n          board[0] = tempDeck[i].slice()\n           for(let j = i + 1; j < tempDeck.length; j++){\n              board[1] = tempDeck[j].slice()\n               for(let h = j + 1; h < tempDeck.length; h++){\n                  board[2] = tempDeck[h].slice()\n                   for(let l = h + 1; l < tempDeck.length; l++){\n                      board[3] = tempDeck[l].slice()\n                       for(let m = l + 1; m < tempDeck.length; m++){\n                          board[4] = tempDeck[h].slice()\n                          playerProb[win(players, board)]++;\n                      }\n                  }\n              }\n          } \n      }\n  }*/\n\n\n  return playerProb;\n  /*if(board.length == 0){\n      while(cnt >= 0){\n          for(let i = 0; i < 5; i++){\n              var tempi = Math.floor(Math.random() * deck.length);\n              var tempj =  Math.floor(Math.random() * deck[tempi].length);\n              board.push(deck[tempi][tempj]);\n              deck[tempi].splice(tempj, 1);\n          }\n          cnt--;\n          playerProb[win(players, board)]++;\n      }\n  }*/\n}\n/*function play(deck, board){\n    if(board.length == 0){\n        for(let i = 0; i < 3; i++){\n            var tempi = Math.floor(Math.random() * deck.length);\n            var tempj =  Math.floor(Math.random() * deck[tempi].length);\n            board.add(deck[tempi][tempj]);\n            deck[tempi].splice(tempj, 1);\n        }\n    }\n    else if(board.length == 3 || board.length == 4){\n        var tempi = Math.floor(Math.random() * deck.length);\n        var tempj =  Math.floor(Math.random() * deck[tempi].length);\n        board.add(deck[tempi][tempj]);\n        deck[tempi].splice(tempj, 1);\n    }\n}*/\n\n\nfunction win(player, board) {\n  var winner = 0;\n  var max = 0;\n  var win = [];\n  var playerBoard = [];\n  var repeat = true;\n  /*while(repeat){\n      repeat = false;\n      for(let i = 0; i < board.length - 1; i++){\n          if(board[i] > board[i + 1]){\n              var temp = board[i];\n              board[i] = board[i + 1];\n              board[i + 1] = temp;\n              repeat = true;\n          }\n      }\n  }*/\n\n  for (let i = 0; i < player.length; i++) {\n    win.push([[], 0, 0]);\n    playerBoard.push([player[i][0], player[i][1], board[0], board[1], board[2], board[3], board[4]]); //return playerBoard[0][0][0];\n    //sorts the array\n\n    var repeat = true;\n\n    while (repeat) {\n      repeat = false;\n\n      for (let j = 0; j < playerBoard[i].length - 1; j++) {\n        if (playerBoard[i][j][0] > playerBoard[i][j + 1][0]) {\n          var temp = playerBoard[i][j];\n          playerBoard[i][j] = playerBoard[i][j + 1];\n          playerBoard[i][j + 1] = temp;\n          repeat = true;\n        }\n      }\n    }\n  } //straights and straight flush\n\n\n  for (let i = 0; i < playerBoard.length; i++) {\n    var cnt = 1;\n    var straightFlush = 1;\n    var repeat = false;\n    var temp = [];\n\n    for (let j = 0; j < playerBoard[i].length - 1; j++) {\n      if (!repeat) {\n        temp.push(playerBoard[i][j]);\n      }\n\n      if (playerBoard[i][j][0] + 1 == playerBoard[i][j + 1][0]) {\n        repeat = true;\n        cnt += 1;\n\n        if (playerBoard[i][j][1] == playerBoard[i][j + 1][1]) {\n          straightFlush += 1;\n          temp.push(playerBoard[i][j + 1]);\n        } else {\n          temp.push(playerBoard[i][j + 1]);\n        }\n      } else if (playerBoard[i][j][0] == playerBoard[i][j + 1][0]) {\n        repeat = true; //temp.push(playerBoard[i][j]);\n        //cnt++;\n      } else {\n        cnt = 1;\n        repeat = false;\n        straightFlush = 1;\n        temp = [];\n      }\n\n      if (cnt == 5 && straightFlush == 5) {\n        //win[i] = temp;\n        win[i][0] = temp.slice();\n        win[i][1] = 9;\n        temp.splice(0, 1);\n        cnt--;\n        straightFlush--;\n      } else if (cnt == 5) {\n        win[i][0] = temp.slice();\n        win[i][1] = 5;\n        temp.splice(0, 1);\n        cnt--;\n        straightFlush--;\n      }\n    }\n  } //pairs, 3 of a kind, full house, 4 of a kind\n\n\n  for (let i = 0; i < playerBoard.length; i++) {\n    var pair = 0;\n    var twoPair = 0;\n    var secondPair = false;\n    var threePairs = 0;\n    var thirdPair = false;\n    var temp = [];\n    var card = playerBoard[i][0];\n    var first = true;\n\n    for (let j = 0; j < playerBoard[i].length - 1; j++) {\n      if (card[0] == playerBoard[i][j + 1][0]) {\n        if (secondPair && !thirdPair) {\n          twoPair++;\n        } else if (thirdPair) {\n          threePairs++;\n        } else {\n          pair++;\n        } //temp.push(card);\n\n\n        if (first) {\n          temp.push(card);\n          first = false;\n        }\n\n        temp.push(playerBoard[i][j + 1]);\n      } else {\n        if (pair >= 1) {\n          secondPair = true;\n        }\n\n        if (secondPair && secondPair >= 1) {\n          thirdPair = true;\n        }\n\n        card = playerBoard[i][j + 1];\n        first = true; //pair = 0;\n        //twoPair = 0;\n        //temp = [];\n      }\n\n      if (pair >= 1) {\n        win[i][0] = temp.slice; //four of a kind\n\n        if (pair == 3 || twoPair == 3) {\n          win[i][1] = Math.max(win[i][1], 8);\n          win[i][0] = temp.slice();\n        } //full house\n        else if (pair == 2 && twoPair == 1 || pair == 1 && twoPair == 2) {\n          win[i][1] = Math.max(win[i][1], 7);\n          win[i][0] = temp.slice();\n        } else if (pair == 2 && threePairs == 1 || pair == 1 && threePairs == 2) {\n          win[i][1] = Math.max(win[i][1], 7);\n          win[i][0] = temp.slice();\n        } else if (threePairs == 2 && twoPair == 1 || threePairs == 1 && twoPair == 2) {\n          win[i][1] = Math.max(win[i][1], 7);\n          win[i][0] = temp.slice();\n        } //three of a kind\n        else if (pair == 2) {\n          win[i][1] = Math.max(win[i][1], 4);\n          win[i][0] = temp.slice();\n        } //two pair\n\n\n        if (pair == 1 && twoPair == 1 || pair == 1 && threePairs == 1 || threePairs == 1 && twoPair == 1) {\n          win[i][1] = Math.max(win[i][1], 3);\n          win[i][0] = temp.slice();\n        } //pair\n        else if (pair == 1) {\n          win[i][1] = Math.max(win[i][1], 2);\n          win[i][0] = temp.slice();\n        }\n      }\n    }\n  } //flush\n\n\n  for (let i = 0; i < playerBoard.length; i++) {\n    var d = 0;\n    var s = 0;\n    var c = 0;\n    var h = 0;\n\n    for (let j = 0; j < playerBoard[i].length; j++) {\n      if (playerBoard[i][j][1] == 1) {\n        d++;\n      } else if (playerBoard[i][j][1] == 2) {\n        s++;\n      } else if (playerBoard[i][j][1] == 3) {\n        c++;\n      } else if (playerBoard[i][j][1] == 4) {\n        h++;\n      }\n    }\n\n    if (d >= 5) {\n      win[i][1] = Math.max(win[i][1], 6);\n\n      for (let j = 0; j < playerBoard[i].length; j++) {\n        if (playerBoard[i][j][1] == 1) {\n          win[i][0].push(playerBoard[i][j]);\n        }\n      }\n    } else if (s >= 5) {\n      win[i][1] = Math.max(win[i][1], 6);\n\n      for (let j = 0; j < playerBoard[i].length; j++) {\n        if (playerBoard[i][j][1] == 2) {\n          win[i][0].push(playerBoard[i][j]);\n        }\n      }\n    } else if (c >= 5) {\n      win[i][1] = Math.max(win[i][1], 6);\n\n      for (let j = 0; j < playerBoard[i].length; j++) {\n        if (playerBoard[i][j][1] == 3) {\n          win[i][0].push(playerBoard[i][j]);\n        }\n      }\n    } else if (h >= 5) {\n      win[i][1] = Math.max(win[i][1], 6);\n\n      for (let j = 0; j < playerBoard[i].length; j++) {\n        if (playerBoard[i][j][1] == 4) {\n          win[i][0].push(playerBoard[i][j]);\n        }\n      }\n    }\n  } //high card\n\n\n  for (let i = 0; i < playerBoard.length; i++) {\n    if (win[i][1] == 0) {\n      win[i][1] = 1;\n      win[i][0].push(playerBoard[i][playerBoard[i].length - 1]);\n    }\n  } //checks if anyone has a winner\n  //loop1: \n\n\n  var winner = -1;\n\n  for (let i = 0; i < win.length; i++) {\n    var winnerList = [];\n    var multiWin = false; //straight flush\n\n    if (win[i][1] == 9) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 9) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n\n        for (let j = 0; j < winnerList.length - 1; j++) {\n          if (winner[0][winner.length - 1][0] < winnerList[j][0][winner.length - 1][0]) {\n            winner = winnerList[i][1];\n          }\n        }\n      } else {\n        //winner = winnerList[i][1];\n        winner = i;\n      }\n\n      break;\n    } //four of a kind\n    else if (win[i][1] == 8) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 8) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var fourKind;\n\n        for (let j = 0; j < winnerList[0][0].length - 3; j++) {\n          if (winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0] && winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]\n          /* && winnerList[0][0][j + 3][0] == winnerList[0][0][j + 4][0]*/\n          ) {\n            fourKind = winnerList[0][0][j][0];\n          }\n        }\n\n        var fourKind2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          for (let k = 0; k < winnerList[j][0].length - 3; k++) {\n            if (winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0] && winnerList[j][0][k + 2][0] == winnerList[j][0][k + 3][0]) {\n              fourKind2 = winnerList[j][0][k][0];\n            }\n          }\n\n          if (fourKind2 > fourKind) {\n            fourKind = fourKind2; //winner = winnerList[j];\n\n            winner = i;\n          }\n        }\n      } else {\n        //winner = winnerList[0];\n        winner = i;\n        break;\n      }\n    } //full house\n    //FULL HOUSE IS NOT WORKING!!!!!!! THE TWO PAIR IS NOT COUNTING ALL POSSIBLE SCENARIOS\n    else if (win[i][1] == 7) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 7) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var threeKind = 0;\n        var twoKind = 0;\n\n        for (let j = 0; j < winnerList[0][0].length - 2; j++) {\n          if (winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n          /*&& winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]*/\n          ) {\n            threeKind = Math.max(threeKind, winnerList[0][0][j][0]);\n          } else if (winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]\n          /*&& winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]*/\n          ) {\n            twoKind = Math.max(twoKind, winnerList[0][0][j][0]);\n          }\n        }\n\n        var threeKind2 = 0;\n        var twoKind2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          for (let k = 0; k < winnerList[j][0].length - 2; k++) {\n            if (winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]) {\n              threeKind2 = Math.max(threeKind2, winnerList[j][0][k][0]);\n            } else if (winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]) {\n              twoKind2 = Math.max(twoKind2, winnerList[j][0][k][0]);\n            }\n          }\n\n          if (threeKind2 > threeKind) {\n            threeKind = threeKind2;\n            winner = winnerList[j];\n          } else if (threeKind2 == threeKind) {\n            if (twoKind2 > twoKind) {\n              twoKind = twoKind2;\n              threeKind = threeKind2;\n              winner = i;\n            }\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    } //flush\n    //STILL NEED TO ADD CHECKS FOR NEXT HIGHEST CARD IN CASE TOP HIGHERST CARDS ARE BOTH THE SAME\n    else if (win[i][1] == 6) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 6) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var flush = winnerList[0][0][winnerList[0][0].length - 1][0];\n        var flush2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          flush2 = winnerList[j][0][winnerList[j][0].length - 1][0];\n\n          if (flush2 > flush) {\n            flush = flush2;\n            winner = i;\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    } //straight\n    //STILL NEED TO ADD CHECKS FOR STYRAIGHT SPECIFIC KICKERS\n    else if (win[i][1] == 5) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 5) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var straight = winnerList[0][0][winnerList[0][0].length - 1][0];\n        var straight2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          straight2 = winnerList[j][0][winnerList[j][0].length - 1][0];\n\n          if (straight2 > straight) {\n            straight = straight2;\n            winner = i;\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    } //three of a kind\n    else if (win[i][1] == 4) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 4) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var threeKind;\n\n        for (let j = 0; j < winnerList[0][0].length - 2; j++) {\n          if (winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0] && winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]) {\n            threeKind = Math.max(winnerList[0][0][j][0], threeKind);\n          }\n        }\n\n        var threeKind2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          for (let k = 0; k < winnerList[j][0].length - 2; k++) {\n            if (winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0] && winnerList[j][0][k + 2][0] == winnerList[j][0][k + 3][0]) {\n              threeKind2 = Math.max(winnerList[j][0][k][0], threeKind2);\n            }\n          }\n\n          if (threeKind2 > threeKind) {\n            threeKind = threeKind2;\n            winner = i;\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    } //two pair\n    else if (win[i][1] == 3) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 3) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var maxTwoKind = 0;\n        var secondTwoKind = 0;\n\n        for (let j = 0; j < winnerList[0][0].length - 1; j++) {\n          if (winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]\n          /* && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]*/\n          ) {\n            if (maxTwoKind <= winnerList[0][0][j][0]) {\n              var temp = maxTwoKind;\n              maxTwoKind = winnerList[0][0][j][0];\n              secondTwoKind = temp;\n            } //maxTwoKind = Math.max(maxTwoKind, winnerList[0][0][j][0]);\n            //firstDone = true;\n\n          }\n        }\n\n        var maxTwoKind2 = 0;\n        var secondTwoKind2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          for (let k = 0; k < winnerList[j][0].length - 1; k++) {\n            if (winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]) {\n              if (maxTwoKind2 <= winnerList[j][0][k][0]) {\n                var temp = maxTwoKind2;\n                maxTwoKind2 = winnerList[j][0][k][0];\n                secondTwoKind2 = temp;\n              }\n            }\n          }\n\n          if (maxTwoKind2 > maxTwoKind) {\n            maxTwoKind = maxTwoKind2;\n            winner = winnerList[j];\n          } else if (maxTwoKind2 == maxTwoKind) {\n            if (secondTwoKind2 > secondTwoKind) {\n              secondTwoKind = secondTwoKind2;\n              maxTwoKind = maxTwoKind2;\n              winner = i;\n            }\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    } //pair\n    else if (win[i][1] == 2) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 2) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var pair;\n\n        for (let j = 0; j < winnerList[0][0].length - 1; j++) {\n          if (winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]) {\n            pair = Math.max(winnerList[0][0][j][0], pair);\n          }\n        }\n\n        var pair2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          for (let k = 0; k < winnerList[j][0].length - 1; k++) {\n            if (winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]) {\n              pair2 = Math.max(winnerList[j][0][k][0], pair2);\n            }\n          }\n\n          if (pair2 > pair) {\n            pair = pair2;\n            winner = i;\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    } //high card\n    else if (win[i][1] == 1) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 1) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var high;\n\n        for (let j = 0; j < winnerList[0][0].length; j++) {\n          high = Math.max(winnerList[0][0][j][0], pair);\n        }\n\n        var high2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          for (let k = 0; k < winnerList[j][0].length; k++) {\n            high2 = Math.max(winnerList[j][0][k][0], pair);\n          }\n\n          if (high2 > high) {\n            high = high2;\n            winner = i;\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    }\n  }\n\n  return winner;\n}\n\nexport default pokerGame;","map":{"version":3,"sources":["/Users/johnbrain/Projects/PokerGame/src/PokerGame.js"],"names":["players","deck","board","tempDeck","winner","cnt","pokerGame","i","push","playerProb","length","num","rtn","slice","splice","winPoint","calc","testL","document","createElement","innerHTML","body","appendChild","j","tempBoard","win","player","max","playerBoard","repeat","temp","straightFlush","pair","twoPair","secondPair","threePairs","thirdPair","card","first","Math","d","s","c","h","winnerList","multiWin","fourKind","fourKind2","k","threeKind","twoKind","threeKind2","twoKind2","flush","flush2","straight","straight2","maxTwoKind","secondTwoKind","maxTwoKind2","secondTwoKind2","pair2","high","high2"],"mappings":"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","sourcesContent":["\nvar players = [];\nvar deck = [];\nvar board = [];\nvar tempDeck = 0;\nvar winner = -1;\nvar cnt = 52;\n\n/*\n    9: straight flush\n    8: four of a kind\n    7: full house\n    6: flush\n    5: straight\n    4: 3 of a kind\n    3: 2 pair\n    2: pair\n    1: high card\n\n\n    1: diamond\n    2: spades\n    3: clubs\n    4: hearts\n */\n\nfunction pokerGame(){\n    deck = [];\n    players = [];\n    board = [];\n    for(let i = 2; i <= 13; i++){\n        deck.push([[i, 1], [i, 2], [i, 3], [i, 4]]);\n    }\n    //players.push([[12, 2], [12, 1]]);\n    //players.push([[13, 1], [13, 3]]);\n    \n    /*players.push([]);\n    var tempi = Math.floor(Math.random() * deck.length);\n    var tempj =  Math.floor(Math.random() * deck[tempi].length);\n    players[0].push(deck[tempi][tempj]);\n    var tempi = Math.floor(Math.random() * deck.length);\n    var tempj =  Math.floor(Math.random() * deck[tempi].length);\n    players[0].push(deck[tempi][tempj]);\n    players.push([]);\n    var tempi = Math.floor(Math.random() * deck.length);\n    var tempj =  Math.floor(Math.random() * deck[tempi].length);\n    players[1].push(deck[tempi][tempj]);\n    var tempi = Math.floor(Math.random() * deck.length);\n    var tempj =  Math.floor(Math.random() * deck[tempi].length);\n    players[1].push(deck[tempi][tempj]);*/\n\n    /*for(let i = 0; i < 5; i++){\n        var tempi = Math.floor(Math.random() * deck.length);\n        var tempj =  Math.floor(Math.random() * deck[tempi].length);\n        board.push(deck[tempi][tempj]);\n        deck[tempi].splice(tempj, 1);\n    }*/\n    /*board.push([2,2]);\n    board.push([3,3]);\n    board.push([7,2]);\n    board.push([4,1]);\n    board.push([10,3]);*/\n\n    var playerProb = []\n    for(let i = 0; i < players.length; i++){\n        playerProb[i] = 0;\n    }\n    var num = 2;\n    var cnt = 2;\n    var rtn = 0;\n    /*board.length > 0*/ \n    /*while(cnt < 11){\n        rtn = 1;\n        board = [];\n        for(let i = 4; i >= 0; i--){\n            var tempi = Math.floor(Math.random() * deck.length);\n            var tempj =  Math.floor(Math.random() * deck[tempi].length);\n            board.push(deck[tempi][tempj].slice());\n            deck[tempi].splice(tempj, 1);\n            if(deck[tempi].length == 0){\n                deck.splice(tempi, 1);\n            }\n            \n        }\n        cnt += 1;\n        //return board;\n        //rtn = board;\n        \n\n        //return win(players, board);\n        //win(players, board)\n        playerProb[win(players, board)] += 1;\n    }*/\n\n    players.push(deck[2][1].slice(), deck[4][3].slice());\n    deck[2].splice(1, 1);\n    deck[4].splice(3, 1);\n    players.push(deck[6][0].slice(), deck[8][2].slice());\n    deck[6].splice(0, 1);\n    deck[8].splice(2, 1);\n\n    //var winPoint = win(players, board);\n    var winPoint = calc(players, deck, board);\n    //var winPoint = 1;\n    \n    const testL = document.createElement(\"label\");\n    //testL.innerHTML = winPoint;\n    testL.innerHTML = winPoint;\n    document.body.appendChild(testL);\n        //tempDeck = deck;\n}\n\nfunction calc(players, deck, board){\n    var playerProb = []\n    for(let i = 0; i < deck.length; i++){\n        for(let j = 0; j < deck[i].length; j++){\n            tempDeck.push(deck[i][j].slice());\n        }\n    }\n    var tempBoard = [[],[],[],[],[]];\n    var tempDeck = deck.slice();\n    for(let i = 0; i < players.length; i++){\n        playerProb.push(0);\n    }\n    /*if(board.length == 0){\n        for(let i = 0; i < tempDeck.length; i++){\n            board[0] = tempDeck[i].slice()\n\n            for(let j = i + 1; j < tempDeck.length; j++){\n                board[1] = tempDeck[j].slice()\n\n                for(let h = j + 1; h < tempDeck.length; h++){\n                    board[2] = tempDeck[h].slice()\n\n                    for(let l = h + 1; l < tempDeck.length; l++){\n                        board[3] = tempDeck[l].slice()\n\n                        for(let m = l + 1; m < tempDeck.length; m++){\n                            board[4] = tempDeck[h].slice()\n                            playerProb[win(players, board)]++;\n                        }\n                    }\n                }\n            } \n        }\n    }*/\n    return playerProb;\n    /*if(board.length == 0){\n        while(cnt >= 0){\n            for(let i = 0; i < 5; i++){\n                var tempi = Math.floor(Math.random() * deck.length);\n                var tempj =  Math.floor(Math.random() * deck[tempi].length);\n                board.push(deck[tempi][tempj]);\n                deck[tempi].splice(tempj, 1);\n            }\n            cnt--;\n            playerProb[win(players, board)]++;\n        }\n    }*/\n}\n\n/*function play(deck, board){\n    if(board.length == 0){\n        for(let i = 0; i < 3; i++){\n            var tempi = Math.floor(Math.random() * deck.length);\n            var tempj =  Math.floor(Math.random() * deck[tempi].length);\n            board.add(deck[tempi][tempj]);\n            deck[tempi].splice(tempj, 1);\n        }\n    }\n    else if(board.length == 3 || board.length == 4){\n        var tempi = Math.floor(Math.random() * deck.length);\n        var tempj =  Math.floor(Math.random() * deck[tempi].length);\n        board.add(deck[tempi][tempj]);\n        deck[tempi].splice(tempj, 1);\n    }\n}*/\n\nfunction win(player, board){\n    var winner = 0;\n    var max = 0;\n    var win = [];\n    var playerBoard = []\n\n    var repeat = true;\n    /*while(repeat){\n        repeat = false;\n        for(let i = 0; i < board.length - 1; i++){\n            if(board[i] > board[i + 1]){\n                var temp = board[i];\n                board[i] = board[i + 1];\n                board[i + 1] = temp;\n                repeat = true;\n            }\n        }\n    }*/\n    \n    for(let i = 0; i < player.length; i++){\n        win.push([[], 0, 0]);\n        playerBoard.push([player[i][0], player[i][1], board[0], board[1], board[2], board[3], board[4]]);\n        \n        //return playerBoard[0][0][0];\n        //sorts the array\n        var repeat = true;\n        while(repeat){\n            repeat = false;\n            for(let j = 0; j < playerBoard[i].length - 1; j++){\n                if(playerBoard[i][j][0] > playerBoard[i][j + 1][0]){\n                    var temp = playerBoard[i][j];\n                    playerBoard[i][j] = playerBoard[i][j + 1];\n                    playerBoard[i][j + 1] = temp;\n                    repeat = true;\n                }\n            }\n        }\n    }\n\n    //straights and straight flush\n    for(let i = 0; i < playerBoard.length; i++){\n        var cnt = 1;\n        var straightFlush = 1;\n        var repeat = false;\n        var temp = [];\n        for(let j = 0; j < playerBoard[i].length - 1; j++){\n            if(!repeat){\n                temp.push(playerBoard[i][j]);\n            }\n            if(playerBoard[i][j][0] + 1 == playerBoard[i][j + 1][0]){\n                repeat = true;\n                cnt += 1;\n                if(playerBoard[i][j][1] == playerBoard[i][j + 1][1]){\n                    straightFlush += 1;\n                    temp.push(playerBoard[i][j + 1]);\n                }\n                else{\n                    temp.push(playerBoard[i][j + 1]);\n                }\n            }\n            else if(playerBoard[i][j][0] == playerBoard[i][j + 1][0]){\n                repeat = true;\n                 //temp.push(playerBoard[i][j]);\n                //cnt++;\n            }\n            else{\n                cnt = 1;\n                repeat = false;\n                straightFlush = 1;\n                temp = [];\n            }\n            if(cnt == 5 && straightFlush == 5){\n                //win[i] = temp;\n                win[i][0] = temp.slice();\n                win[i][1] = 9;\n                temp.splice(0, 1);\n                cnt--;\n                straightFlush--;\n            }\n            else if(cnt == 5){\n                win[i][0] = temp.slice();\n                win[i][1] = 5;\n                temp.splice(0, 1);\n                cnt--;\n                straightFlush--;\n            }\n        }\n    }\n\n    //pairs, 3 of a kind, full house, 4 of a kind\n    for(let i = 0; i < playerBoard.length; i++){\n        var pair = 0;\n        var twoPair = 0;\n        var secondPair = false;\n        var threePairs = 0;\n        var thirdPair = false;\n        var temp = [];\n        var card = playerBoard[i][0];\n        var first = true;\n        for(let j = 0; j < playerBoard[i].length - 1; j++){\n            if(card[0] == playerBoard[i][j + 1][0]){\n                if(secondPair && !thirdPair){\n                    twoPair++;\n                }\n                else if(thirdPair){\n                    threePairs++;\n                }\n                else{\n                    pair++;\n                }\n                //temp.push(card);\n                if(first){\n                    temp.push(card);\n                    first = false;\n                }\n                temp.push(playerBoard[i][j + 1]);\n            }\n            else{\n                if(pair >= 1){\n                    secondPair = true;\n                }\n                if(secondPair && secondPair >= 1){\n                    thirdPair = true;\n                }\n                card = playerBoard[i][j + 1];\n                first = true;\n                //pair = 0;\n                //twoPair = 0;\n                //temp = [];\n            }\n\n            if(pair >= 1){\n                win[i][0] = temp.slice;\n                //four of a kind\n                if(pair == 3 || twoPair == 3){\n                    win[i][1] = Math.max(win[i][1], 8);\n                    win[i][0] = temp.slice();\n                }\n                //full house\n                else if((pair == 2 && twoPair == 1) || (pair == 1 && twoPair == 2)){\n                    win[i][1] = Math.max(win[i][1], 7);\n                    win[i][0] = temp.slice();\n                }\n                else if((pair == 2 && threePairs == 1) || (pair == 1 && threePairs == 2)){\n                    win[i][1] = Math.max(win[i][1], 7);\n                    win[i][0] = temp.slice();\n                }\n                else if((threePairs == 2 && twoPair == 1) || (threePairs == 1 && twoPair == 2)){\n                    win[i][1] = Math.max(win[i][1], 7);\n                    win[i][0] = temp.slice();\n                }\n                //three of a kind\n                else if(pair == 2){\n                    win[i][1] = Math.max(win[i][1], 4);\n                    win[i][0] = temp.slice();\n                }\n                //two pair\n                if((pair == 1 && twoPair == 1) || (pair == 1 && threePairs == 1) || (threePairs == 1 && twoPair == 1)){\n                    win[i][1] = Math.max(win[i][1], 3);\n                    win[i][0] = temp.slice();\n                }\n                //pair\n                else if(pair == 1){\n                    win[i][1] = Math.max(win[i][1], 2);\n                    win[i][0] = temp.slice();\n                } \n            }\n        }\n    }\n\n    //flush\n    for(let i = 0; i < playerBoard.length; i++){\n        var d = 0;\n        var s = 0;\n        var c = 0;\n        var h = 0;\n        for(let j = 0; j < playerBoard[i].length; j++){\n            if(playerBoard[i][j][1] == 1){\n                d++;\n            }\n            else if(playerBoard[i][j][1] == 2){\n                s++;\n            }\n            else if(playerBoard[i][j][1] == 3){\n                c++;\n            }\n            else if(playerBoard[i][j][1] == 4){\n                h++;\n            }\n        }\n        if(d >= 5){\n            win[i][1] = Math.max(win[i][1], 6);\n            for(let j = 0; j < playerBoard[i].length; j++){\n                if(playerBoard[i][j][1] == 1){\n                    win[i][0].push(playerBoard[i][j]);\n                }\n            }\n        }\n        else if(s >= 5){\n            win[i][1] = Math.max(win[i][1], 6);\n            for(let j = 0; j < playerBoard[i].length; j++){\n                if(playerBoard[i][j][1] == 2){\n                    win[i][0].push(playerBoard[i][j]);\n                }\n            }\n        }\n        else if(c >= 5){\n            win[i][1] = Math.max(win[i][1], 6);\n            for(let j = 0; j < playerBoard[i].length; j++){\n                if(playerBoard[i][j][1] == 3){\n                    win[i][0].push(playerBoard[i][j]);\n                }\n            }\n        }\n        else if(h >= 5){\n            win[i][1] = Math.max(win[i][1], 6);\n            for(let j = 0; j < playerBoard[i].length; j++){\n                if(playerBoard[i][j][1] == 4){\n                    win[i][0].push(playerBoard[i][j]);\n                }\n            }\n        }\n    }\n\n    //high card\n    for(let i = 0; i < playerBoard.length; i++){\n        if(win[i][1] == 0){\n            win[i][1] = 1;\n            win[i][0].push(playerBoard[i][playerBoard[i].length - 1]);\n        }   \n    }\n\n    //checks if anyone has a winner\n    //loop1: \n    var winner = -1;\n    for(let i = 0; i < win.length; i++){\n        var winnerList = [];\n        var multiWin = false;\n        //straight flush\n        if(win[i][1] == 9){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 9){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                for(let j = 0; j < winnerList.length - 1; j++){\n                    if(winner[0][winner.length - 1][0] < winnerList[j][0][winner.length - 1][0]){\n                        winner = winnerList[i][1];\n                    }\n                } \n            }\n            else{\n                //winner = winnerList[i][1];\n                winner = i;\n            }\n            break;\n        }\n        //four of a kind\n        else if(win[i][1] == 8){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 8){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var fourKind;\n                for(let j = 0; j < winnerList[0][0].length - 3; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n                         && winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]/* && winnerList[0][0][j + 3][0] == winnerList[0][0][j + 4][0]*/){\n                            fourKind = winnerList[0][0][j][0];\n                         }\n                }\n                var fourKind2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 3; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]\n                             && winnerList[j][0][k + 2][0] == winnerList[j][0][k + 3][0]){\n                                fourKind2 = winnerList[j][0][k][0];\n                             }\n                    }\n                    if(fourKind2 > fourKind){\n                        fourKind = fourKind2;\n                        //winner = winnerList[j];\n                        winner = i;\n                    }\n                } \n            }\n            else{\n                //winner = winnerList[0];\n                winner = i;\n                break;\n            }\n        }\n        //full house\n        //FULL HOUSE IS NOT WORKING!!!!!!! THE TWO PAIR IS NOT COUNTING ALL POSSIBLE SCENARIOS\n        else if(win[i][1] == 7){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 7){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var threeKind = 0;\n                var twoKind = 0;\n                for(let j = 0; j < winnerList[0][0].length - 2; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n                         /*&& winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]*/){\n                            threeKind = Math.max(threeKind, winnerList[0][0][j][0]);\n                         }\n                    else if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] /*&& winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]*/){\n                        twoKind = Math.max(twoKind, winnerList[0][0][j][0]);\n                    }\n                }\n                var threeKind2 = 0\n                var twoKind2 = 0;\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 2; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]){\n                                threeKind2 = Math.max(threeKind2, winnerList[j][0][k][0]);\n                             }\n                        else if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]){\n                            twoKind2 = Math.max(twoKind2, winnerList[j][0][k][0]);\n                        }\n                    }\n                    if(threeKind2 > threeKind){\n                        threeKind = threeKind2;\n                        winner = winnerList[j];\n                    }\n                    else if(threeKind2 == threeKind){\n                        if(twoKind2 > twoKind){\n                            twoKind = twoKind2\n                            threeKind = threeKind2;\n                            winner = i;\n                        }\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n        //flush\n        //STILL NEED TO ADD CHECKS FOR NEXT HIGHEST CARD IN CASE TOP HIGHERST CARDS ARE BOTH THE SAME\n        else if(win[i][1] == 6){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 6){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var flush = winnerList[0][0][winnerList[0][0].length - 1][0];\n                var flush2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    flush2 = winnerList[j][0][winnerList[j][0].length - 1][0];\n                    if(flush2 > flush){\n                        flush = flush2;\n                        winner = i;\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n        //straight\n        //STILL NEED TO ADD CHECKS FOR STYRAIGHT SPECIFIC KICKERS\n        else if(win[i][1] == 5){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 5){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var straight = winnerList[0][0][winnerList[0][0].length - 1][0];\n                var straight2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    straight2 = winnerList[j][0][winnerList[j][0].length - 1][0];\n                    if(straight2 > straight){\n                        straight = straight2;\n                        winner = i;\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n        //three of a kind\n        else if(win[i][1] == 4){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 4){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var threeKind;\n                for(let j = 0; j < winnerList[0][0].length - 2; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n                         && winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]){\n                            threeKind = Math.max(winnerList[0][0][j][0], threeKind);\n                         }\n                }\n                var threeKind2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 2; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]\n                             && winnerList[j][0][k + 2][0] == winnerList[j][0][k + 3][0]){\n                                threeKind2 = Math.max(winnerList[j][0][k][0], threeKind2);\n                             }\n                    }\n                    if(threeKind2 > threeKind){\n                        threeKind = threeKind2;\n                        winner = i;\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n        //two pair\n        else if(win[i][1] == 3){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 3){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var maxTwoKind = 0;\n                var secondTwoKind = 0;\n                for(let j = 0; j < winnerList[0][0].length - 1; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]/* && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]*/){\n                        if(maxTwoKind <= winnerList[0][0][j][0]){\n                            var temp = maxTwoKind\n                            maxTwoKind = winnerList[0][0][j][0];\n                            secondTwoKind = temp;\n                        }\n                        //maxTwoKind = Math.max(maxTwoKind, winnerList[0][0][j][0]);\n                        //firstDone = true;\n                    }\n                }\n                var maxTwoKind2 = 0\n                var secondTwoKind2 = 0;\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 1; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]){\n                            if(maxTwoKind2 <= winnerList[j][0][k][0]){\n                                var temp = maxTwoKind2\n                                maxTwoKind2 = winnerList[j][0][k][0];\n                                secondTwoKind2 = temp;\n                            }\n                        }\n                    }\n                    if(maxTwoKind2 > maxTwoKind){\n                        maxTwoKind = maxTwoKind2;\n                        winner = winnerList[j];\n                    }\n                    else if(maxTwoKind2 == maxTwoKind){\n                        if(secondTwoKind2 > secondTwoKind){\n                            secondTwoKind = secondTwoKind2\n                            maxTwoKind = maxTwoKind2;\n                            winner = i;\n                        }\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n        //pair\n        else if(win[i][1] == 2){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 2){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var pair;\n                for(let j = 0; j < winnerList[0][0].length - 1; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]){\n                        pair = Math.max(winnerList[0][0][j][0], pair);\n                         }\n                }\n                var pair2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 1; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]){\n                                pair2 = Math.max(winnerList[j][0][k][0], pair2);\n                             }\n                    }\n                    if(pair2 > pair){\n                        pair = pair2;\n                        winner = i;\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n        //high card\n        else if(win[i][1] == 1){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 1){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var high;\n                for(let j = 0; j < winnerList[0][0].length; j++){\n                    high = Math.max(winnerList[0][0][j][0], pair);\n                }\n                var high2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length; k++){\n                        high2 = Math.max(winnerList[j][0][k][0], pair);\n                    }\n                    if(high2 > high){\n                        high = high2;\n                        winner = i;\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n    }\n    return winner;\n}\n\nexport default pokerGame;"]},"metadata":{},"sourceType":"module"}