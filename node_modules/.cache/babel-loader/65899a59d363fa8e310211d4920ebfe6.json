{"ast":null,"code":"var _require=require('express'),response=_require.response;var express=require('express');var fs=require('fs');var mysql=require('mysql');var Datastore=require('nedb');var app=express();app.listen(3000,function(){return console.log('working!');});app.use(express.static('src'));//makes server able to understand incoming data as json.\napp.use(express.json({limit:'1mb'}));//app.use(express.json({strict: false}));\nvar database=new Datastore('database.db');database.loadDatabase();function readDataFile(){var sendDeckList=[];/*return fs.readFileSync('Data.txt', function(err, data) {\n      if(err){\n        throw err;\n      }\n      var deckList = data.toString().split(\"\\n\");\n      for(i in deckList) {\n          //console.log(JSON.parse(deckList[i]).deckList[0].name);\n          var tempDeck = JSON.parse(deckList[i]).deckList;\n          for(i in tempDeck){\n            //var deckName = tempDeck[i].name;\n            var newDeck = new Deck(tempDeck[i].name);\n            var cardList = tempDeck[i].cardList;\n            for(i in cardList){\n              var newCard = new Card(cardList[i].front, cardList[i].back);\n              newDeck.addCard(newCard);\n            }\n            sendDeckList.push(newDeck);\n            //console.log(newDeck.getName());\n            //console.log(newDeck.getCardList());\n            //console.log(deckName);\n          }\n      }\n      //console.log(sendDeckList);\n      //return sendDeckList;\n  });*/return fs.readFileSync('Data.txt',function(err,data){if(err){throw err;}var deckList=data.toString().split(\"\\n\");for(i in deckList){//console.log(JSON.parse(deckList[i]).deckList[0].name);\nvar tempDeck=JSON.parse(deckList[i]).deckList;for(i in tempDeck){//var deckName = tempDeck[i].name;\nsendDeckList.push([]);sendDeckList[i].push(tempDeck[i].name);var cardList=tempDeck[i].cardList;for(i in cardList){sendDeckList[i].push([cardList[i].front,cardList[i].back]);}//console.log(newDeck.getName());\n//console.log(newDeck.getCardList());\n//console.log(deckName);\n}}//return sendDeckList;\n});//console.log(sendDeckList);\n//return sendDeckList;\n}//connects the server to the client to recieve and send data. Request is what the client sends to the server, ie data. \n// the ressponse is what the server sends beck to the client, ie a confirmation upon recieving the data.\napp.post('/api',function(req,res){console.log(\"request recieved\");console.log(req.body);fs.appendFile('./Data.txt',JSON.stringify(/*req.body.time*/req.body)+\"\\n\",function(err){if(err){console.error(err);}// file written successfully\n});//what is being sent back to the client\nres.json({status:'success',DeckList:req.body});});/*\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.writeFile('./Data.txt', JSON.stringify(/*req.body.time*/ /* req.body) + \"\\n\", err => {\n    if (err) {\n      console.error(err);\n    }\n    // file written successfully\n  });\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n*/app.post('/editDeckList',function(req,res){console.log(\"request recieved\");console.log(req.body);//database.insert(req.body);\n//database.insert(req.body[0].sendDeckList);\ndatabase.update({username:req.body.username,password:req.body.password},req.body);//what is being sent back to the client\nres.json({status:'success',DeckList:req.body});});/*\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n    console.log(\"good\");\n    //res.send(\"high\");\n    var rtnList = readDataFile();\n    console.log(rtnList);\n    //rtnList = ['h', 'h'];\n    res.send(rtnList);\n});\n*/ //sends a response to the client.\napp.get('/getData',function(req,res){console.log(\"good\");//res.send(\"high\");\ndatabase.find({},function(err,data){if(err){console.log(err);}res.json(data);console.log(data[0].sendDeckList[0].name);});//console.log(rtnList);\n//rtnList = ['h', 'h'];\n//res.send(rtnList);\n});app.post('/login',function(req,res){console.log(\"good\");//res.send(\"high\");\ndatabase.find({username:req.body.username,password:req.body.password},function(err,data){if(data.length==0){console.log(\"err\");res.json({});}else{console.log(data);res.json(data);console.log(data[0].sendDeckList[0].name);console.log(req.body.username);}});//console.log(rtnList);\n//rtnList = ['h', 'h'];\n//res.send(rtnList);\n});app.post('/createAccount',function(req,res){database.insert(req.body);//what is being sent back to the client\nres.json({status:'success',DeckList:req.body});});//console.log(\"high\");\n/*\nconst fs = require('fs');\nconst content = 'Some content!';\n\nfs.writeFile('./Data.txt', content, err => {\n  if (err) {\n    console.error(err);\n  }\n  // file written successfully\n});\n*/ //const myURL = new URL('/foo', 'https://example.org/');\n//console.log('good');","map":{"version":3,"names":["require","response","express","fs","mysql","Datastore","app","listen","console","log","use","static","json","limit","database","loadDatabase","readDataFile","sendDeckList","readFileSync","err","data","deckList","toString","split","i","tempDeck","JSON","parse","push","name","cardList","front","back","post","req","res","body","appendFile","stringify","error","status","DeckList","update","username","password","get","find","length","insert"],"sources":["/Users/johnbrain/Projects/FlashCardProject/src/index.js"],"sourcesContent":["\n\nconst { response } = require('express');\nconst express = require('express');\nconst fs = require('fs');\nconst mysql = require('mysql');\nconst Datastore = require('nedb');\n\nconst app = express();\napp.listen(3000, () => console.log('working!'));\napp.use(express.static('src'));\n//makes server able to understand incoming data as json.\napp.use(express.json({limit: '1mb'}));\n//app.use(express.json({strict: false}));\nconst database = new Datastore('database.db');\ndatabase.loadDatabase();\n\nfunction readDataFile(){\n  var sendDeckList = [];\n  /*return fs.readFileSync('Data.txt', function(err, data) {\n      if(err){\n        throw err;\n      }\n      var deckList = data.toString().split(\"\\n\");\n      for(i in deckList) {\n          //console.log(JSON.parse(deckList[i]).deckList[0].name);\n          var tempDeck = JSON.parse(deckList[i]).deckList;\n          for(i in tempDeck){\n            //var deckName = tempDeck[i].name;\n            var newDeck = new Deck(tempDeck[i].name);\n            var cardList = tempDeck[i].cardList;\n            for(i in cardList){\n              var newCard = new Card(cardList[i].front, cardList[i].back);\n              newDeck.addCard(newCard);\n            }\n            sendDeckList.push(newDeck);\n            //console.log(newDeck.getName());\n            //console.log(newDeck.getCardList());\n            //console.log(deckName);\n          }\n      }\n      //console.log(sendDeckList);\n      //return sendDeckList;\n  });*/\n  return fs.readFileSync('Data.txt', function(err, data) {\n    if(err){\n      throw err;\n    }\n    var deckList = data.toString().split(\"\\n\");\n    for(i in deckList) {\n        //console.log(JSON.parse(deckList[i]).deckList[0].name);\n        var tempDeck = JSON.parse(deckList[i]).deckList;\n        for(i in tempDeck){\n          //var deckName = tempDeck[i].name;\n          sendDeckList.push([]);\n          sendDeckList[i].push(tempDeck[i].name);\n          var cardList = tempDeck[i].cardList;\n          for(i in cardList){\n            sendDeckList[i].push([cardList[i].front, cardList[i].back]);\n          }\n          //console.log(newDeck.getName());\n          //console.log(newDeck.getCardList());\n          //console.log(deckName);\n        }\n        \n    }\n    //return sendDeckList;\n  });\n  //console.log(sendDeckList);\n  //return sendDeckList;\n}\n\n//connects the server to the client to recieve and send data. Request is what the client sends to the server, ie data. \n// the ressponse is what the server sends beck to the client, ie a confirmation upon recieving the data.\napp.post('/api', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.appendFile('./Data.txt', JSON.stringify(/*req.body.time*/ req.body) + \"\\n\", err => {\n    if (err) {\n      console.error(err);\n    }\n    // file written successfully\n  });\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n\n/*\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  fs.writeFile('./Data.txt', JSON.stringify(/*req.body.time*//* req.body) + \"\\n\", err => {\n    if (err) {\n      console.error(err);\n    }\n    // file written successfully\n  });\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n*/\n\napp.post('/editDeckList', (req, res) => {\n  console.log(\"request recieved\");\n  console.log(req.body);\n  //database.insert(req.body);\n  //database.insert(req.body[0].sendDeckList);\n  database.update({username: req.body.username, password: req.body.password}, req.body);\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n});\n\n/*\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n    console.log(\"good\");\n    //res.send(\"high\");\n    var rtnList = readDataFile();\n    console.log(rtnList);\n    //rtnList = ['h', 'h'];\n    res.send(rtnList);\n});\n*/\n\n//sends a response to the client.\napp.get('/getData', (req, res) => {\n  console.log(\"good\");\n  //res.send(\"high\");\n  database.find({}, (err, data) => {\n    if(err){\n      console.log(err);\n    }\n    res.json(data);\n    console.log(data[0].sendDeckList[0].name);\n  });\n  //console.log(rtnList);\n  //rtnList = ['h', 'h'];\n  //res.send(rtnList);\n});\n\napp.post('/login', (req, res) => {\n  console.log(\"good\");\n  //res.send(\"high\");\n  database.find({username: req.body.username, password: req.body.password}, (err, data) => {\n    if(data.length == 0){\n      console.log(\"err\");\n      res.json({});\n    }\n    else{\n      console.log(data);\n      res.json(data);\n      console.log(data[0].sendDeckList[0].name);\n      console.log(req.body.username);\n    }\n  });\n  //console.log(rtnList);\n  //rtnList = ['h', 'h'];\n  //res.send(rtnList);\n});\n\napp.post('/createAccount', (req, res) => {\n  database.insert(req.body);\n  //what is being sent back to the client\n  res.json({\n    status: 'success',\n    DeckList: req.body\n  });\n})\n\n\n\n\n//console.log(\"high\");\n\n/*\nconst fs = require('fs');\nconst content = 'Some content!';\n\nfs.writeFile('./Data.txt', content, err => {\n  if (err) {\n    console.error(err);\n  }\n  // file written successfully\n});\n*/\n\n//const myURL = new URL('/foo', 'https://example.org/');\n\n//console.log('good');\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}