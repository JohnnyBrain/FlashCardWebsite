{"ast":null,"code":"var players = [];\nvar deck = [];\nvar board = [];\nvar tempDeck = 0;\nvar winner = -1;\n/*\n    9: straight flush\n    8: four of a kind\n    7: full house\n    6: flush\n    5: straight\n    4: 3 of a kind\n    3: 2 pair\n    2: pair\n    1: high card\n\n\n    1: diamond\n    2: spades\n    3: clubs\n    4: hearts\n */\n\nfunction pokerGame() {\n  deck = [];\n  players = [];\n  board = [];\n\n  for (let i = 2; i <= 13; i++) {\n    deck.push([[i, 1], [i, 2], [i, 3], [i, 4]]);\n  }\n\n  players.push([5, 1][(8, 3)]);\n  players.push([11, 1][(12, 3)]);\n\n  for (let i = 0; i < 5; i++) {\n    var tempi = Math.floor(Math.random() * deck.length);\n    var tempj = Math.floor(Math.random() * deck[tempi].length);\n    board.add(deck[tempi][tempj]);\n    deck[tempi].splice(tempj, 1);\n  } //var winPoint = win(players, board);\n\n\n  const label = document.createElement(\"label\");\n  label.innerHTML = \"high\";\n  document.body.appendChild(label); //tempDeck = deck;\n}\n/*function calc(players, deck, board){\n    var max = 0;\n    var playerProb = []\n    for(let i = 0; i < players.length; i++){\n        playerProb[i] = 0;\n    }\n    if(board.length == 0){\n        for(let i = 0; i < players.length; i++){\n            for(let j = 0; j < deck.length; j++);\n        }\n    }\n}*/\n\n/*function play(deck, board){\n    if(board.length == 0){\n        for(let i = 0; i < 3; i++){\n            var tempi = Math.floor(Math.random() * deck.length);\n            var tempj =  Math.floor(Math.random() * deck[tempi].length);\n            board.add(deck[tempi][tempj]);\n            deck[tempi].splice(tempj, 1);\n        }\n    }\n    else if(board.length == 3 || board.length == 4){\n        var tempi = Math.floor(Math.random() * deck.length);\n        var tempj =  Math.floor(Math.random() * deck[tempi].length);\n        board.add(deck[tempi][tempj]);\n        deck[tempi].splice(tempj, 1);\n    }\n}*/\n\n/*\nfunction win(player, board){\n    var winner = 0;\n    var max = 0;\n    var win = [];\n    var playerBoard = []\n\n    var repeat = true;\n    /*while(repeat){\n        repeat = false;\n        for(let i = 0; i < board.length - 1; i++){\n            if(board[i] > board[i + 1]){\n                var temp = board[i];\n                board[i] = board[i + 1];\n                board[i + 1] = temp;\n                repeat = true;\n            }\n        }\n    }*/\n\n/*\nfor(let i = 0; i < player.length; i++){\n win.push([[], 0, 0]);\n playerBoard.push([player[i][0], player[i][1], board[0], board[1], board[2], board[3], board[4]]);\n \n //sorts the array\n var repeat = true;\n while(repeat){\n     repeat = false;\n     for(let j = 0; j < playerBoard.length - 1; j++){\n         if(playerBoard[i][0] > playerBoard[i + 1][0]){\n             var temp = playerBoard[i];\n             playerBoard[i] = playerBoard[i + 1];\n             playerBoard[i + 1] = temp;\n             repeat = true;\n         }\n     }\n }\n}\n//straights and straight flush\nfor(let i = 0; i < playerBoard.length; i++){\n var cnt = 0;\n var straightFlush = 0;\n var temp = []\n for(let j = 0; j < playerBoard[i].length - 1; i++){\n     if(playerBoard[i][j][0] == playerBoard[i][j + 1][0]){\n         cnt += 1;\n         if(playerBoard[i][j][1] == playerBoard[i][j + 1][1]){\n             straightFlush += 1;\n             temp.push(playerBoard[i][j]);\n         }\n         else{\n             temp.push(playerBoard[i][j]);\n         }\n     }\n     else{\n         cnt = 0;\n         straightFlush = 0;\n         temp = [];\n     }\n     if(cnt == 5 && straightFlush == 5){\n         //win[i] = temp;\n         win[i][0] = temp.slice();\n         win[i][1] = 9;\n         temp.splice(i, 1);\n         cnt--;\n         straightFlush--;\n     }\n     else if(cnt == 5){\n         win[i][0] = temp.slice();\n         win[i][1] = 5;\n         temp.splice(i, 1);\n         cnt--;\n         straightFlush--;\n     }\n }\n}\n//pairs, 3 of a kind, full house, 4 of a kind\nfor(let i = 0; i < playerBoard.length; i++){\n var pair = 0;\n var twoPair = 0;\n var secondPair = false;\n var threePairs = 0;\n var thirdPair = false;\n var temp = [];\n var card = playerBoard[i][0][0];\n for(let j = 0; j < playerBoard[i].length - 1; i++){\n     if(card == playerBoard[i][j + 1][0]){\n         if(secondPair && !thirdPair){\n             twoPair++;\n         }\n         else if(thirdPair){\n             threePairs++;\n         }\n         else{\n             pair++;\n         }\n         temp.push(card);\n         temp.push(playerBoard[i][i + 1]);\n     }\n     else{\n         if(pair >= 1){\n             secondPair = true;\n         }\n         if(secondPair && secondPair >= 1){\n             thirdPair = true;\n         }\n         card = playerBoard[i][j + 1][0];\n         //pair = 0;\n         //twoPair = 0;\n         //temp = [];\n     }\n      if(pair > 1){\n         win[i][0] = temp.slice;\n         //four of a kind\n         if(pair == 3 || twoPair == 3){\n             win[i][1] = Math.max(win[i][1], 8);\n         }\n         //full house\n         else if((pair == 2 && twoPair == 1) || (pair == 1 && twoPair == 2)){\n             win[i][1] = Math.max(win[i][1], 7);\n         }\n         else if((pair == 2 && threePairs == 1) || (pair == 1 && threePairs == 2)){\n             win[i][1] = Math.max(win[i][1], 7);\n         }\n         else if((threePairs == 2 && twoPair == 1) || (threePairs == 1 && twoPair == 2)){\n             win[i][1] = Math.max(win[i][1], 7);\n         }\n         //three of a kind\n         else if(pair == 2){\n             win[i][1] = Math.max(win[i][1], 4);\n         }\n         //two pair\n         if((pair == 1 && twoPair == 1) || (pair == 1 && threePairs == 1) || (threePairs == 1 && twoPair == 1)){\n             win[i][1] = Math.max(win[i][1], 3);\n         }\n         //pair\n         else if(pair == 1){\n             win[i][1] = Math.max(win[i][1], 2);\n         } \n     }\n }\n}\n//flush\nfor(let i = 0; i < playerBoard.length; i++){\n var d = 0;\n var s = 0;\n var c = 0;\n var h = 0;\n for(let j = 0; j < playerBoard[i].length; j++){\n     if(playerBoard[i][j][1] == 1){\n         d++;\n     }\n     else if(playerBoard[i][j][1] == 2){\n         s++;\n     }\n     else if(playerBoard[i][j][1] == 3){\n         c++;\n     }\n     else if(playerBoard[i][j][1] == 4){\n         h++;\n     }\n }\n if(d >= 5){\n     win[i][1] = Math.max(win[i][1], 6);\n     for(let j = 0; j < playerBoard[i].length; j++){\n         if(playerBoard[i][j][1] == 1){\n             win[i][0].push(playerBoard[i][j]);\n         }\n     }\n }\n else if(s >= 5){\n     win[i][1] = Math.max(win[i][1], 6);\n     for(let j = 0; j < playerBoard[i].length; j++){\n         if(playerBoard[i][j][1] == 2){\n             win[i][0].push(playerBoard[i][j]);\n         }\n     }\n }\n else if(c >= 5){\n     win[i][1] = Math.max(win[i][1], 6);\n     for(let j = 0; j < playerBoard[i].length; j++){\n         if(playerBoard[i][j][1] == 3){\n             win[i][0].push(playerBoard[i][j]);\n         }\n     }\n }\n else if(h >= 5){\n     win[i][1] = Math.max(win[i][1], 6);\n     for(let j = 0; j < playerBoard[i].length; j++){\n         if(playerBoard[i][j][1] == 4){\n             win[i][0].push(playerBoard[i][j]);\n         }\n     }\n }\n}\n//high card\nfor(let i = 0; i < playerBoard.length; i++){\n if(win[i][1] == 0){\n     win[i][1] = 1;\n     win[i][0].push(playerBoard[playerBoard.length - 1]);\n }   \n}\n//checks if anyone has a winner\n//loop1: \nfor(let i = 0; i < win.length; i++){\n var winnerList = [];\n var multiWin = false;\n //straight flush\n if(win[i][1] == 9){\n     winnerList.push(win[i])\n     for(let j = i + 1; i < win.length; i++){\n         if(win[j][1] == 9){\n             multiWin = true;\n             winnerList.push(win[j]);\n         }\n     }\n     if(multiWin){\n         winner = winnerList[0];\n         for(let j = 0; j < winnerList.length - 1; j++){\n             if(winner[0][winner.length - 1][0] < winnerList[j][0][winner.length - 1][0]){\n                 winner = winnerList[j];\n             }\n         } \n     }\n     else{\n         winner = winnerList[0];\n         break;\n     }\n }\n //four of a kind\n else if(win[i][1] == 8){\n     winnerList.push(win[i])\n     for(let j = i + 1; i < win.length; i++){\n         if(win[j][1] == 8){\n             multiWin = true;\n             winnerList.push(win[j]);\n         }\n     }\n     if(multiWin){\n         winner = winnerList[0];\n         var fourKind;\n         for(let j = 0; j < winnerList[0][0].length - 3; j++){\n             if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n                  && winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]/* && winnerList[0][0][j + 3][0] == winnerList[0][0][j + 4][0]*/\n\n/*){\nfourKind = winnerList[0][0][j][0];\n}\n}\nvar fourKind2 = 0\nfor(let j = 1; j < winnerList.length; j++){\nfor(let k = 0; k < winnerList[j][0].length - 3; k++){\nif(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]\n&& winnerList[j][0][k + 2][0] == winnerList[j][0][k + 3][0]){\nfourKind2 = winnerList[j][0][k][0];\n}\n}\nif(fourKind2 > fourKind){\nfourKind = fourKind2;\nwinner = winnerList[j];\n}\n} \n}\nelse{\nwinner = winnerList[0];\nbreak;\n}\n}\n//full house\n//FULL HOUSE IS NOT WORKING!!!!!!! THE TWO PAIR IS NOT COUNTING ALL POSSIBLE SCENARIOS\nelse if(win[i][1] == 7){\nwinnerList.push(win[i])\nfor(let j = i + 1; i < win.length; i++){\nif(win[j][1] == 7){\nmultiWin = true;\nwinnerList.push(win[j]);\n}\n}\nif(multiWin){\nwinner = winnerList[0];\nvar threeKind = 0;\nvar twoKind = 0;\nfor(let j = 0; j < winnerList[0][0].length - 2; j++){\nif(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n/*&& winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]*/\n\n/*){\nthreeKind = Math.max(threeKind, winnerList[0][0][j][0]);\n}\nelse if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] /*&& winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]*/\n\n/*){\ntwoKind = Math.max(twoKind, winnerList[0][0][j][0]);\n}\n}\nvar threeKind2 = 0\nvar twoKind2 = 0;\nfor(let j = 1; j < winnerList.length; j++){\nfor(let k = 0; k < winnerList[j][0].length - 2; k++){\nif(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]){\nthreeKind2 = Math.max(threeKind2, winnerList[j][0][k][0]);\n}\nelse if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]){\ntwoKind2 = Math.max(twoKind2, winnerList[j][0][k][0]);\n}\n}\nif(threeKind2 > threeKind){\nthreeKind = threeKind2;\nwinner = winnerList[j];\n}\nelse if(threeKind2 == threeKind){\nif(twoKind2 > twoKind){\ntwoKind = twoKind2\nthreeKind = threeKind2;\nwinner = winnerList[j];\n}\n}\n} \n}\nelse{\nwinner = winnerList[0];\nbreak;\n}\n}\n//flush\n//STILL NEED TO ADD CHECKS FOR NEXT HIGHEST CARD IN CASE TOP HIGHERST CARDS ARE BOTH THE SAME\nelse if(win[i][1] == 6){\nwinnerList.push(win[i])\nfor(let j = i + 1; i < win.length; i++){\nif(win[j][1] == 6){\nmultiWin = true;\nwinnerList.push(win[j]);\n}\n}\nif(multiWin){\nwinner = winnerList[0];\nvar flush = winnerList[0][0][winnerList[0][0].length - 1][0];\nvar flush2 = 0\nfor(let j = 1; j < winnerList.length; j++){\nflush2 = winnerList[j][0][winnerList[j][0].length - 1][0];\nif(flush2 > flush){\nflush = flush2;\nwinner = winnerList[j];\n}\n} \n}\nelse{\nwinner = winnerList[0];\nbreak;\n}\n}\n//straight\n//STILL NEED TO ADD CHECKS FOR STYRAIGHT SPECIFIC KICKERS\nelse if(win[i][1] == 5){\nwinnerList.push(win[i])\nfor(let j = i + 1; i < win.length; i++){\nif(win[j][1] == 5){\nmultiWin = true;\nwinnerList.push(win[j]);\n}\n}\nif(multiWin){\nwinner = winnerList[0];\nvar straight = winnerList[0][0][winnerList[0][0].length - 1][0];\nvar straight2 = 0\nfor(let j = 1; j < winnerList.length; j++){\nstraight2 = winnerList[j][0][winnerList[j][0].length - 1][0];\nif(straight2 > straight){\nstraight = straight2;\nwinner = winnerList[j];\n}\n} \n}\nelse{\nwinner = winnerList[0];\nbreak;\n}\n}\n//three of a kind\nelse if(win[i][1] == 4){\nwinnerList.push(win[i])\nfor(let j = i + 1; i < win.length; i++){\nif(win[j][1] == 4){\nmultiWin = true;\nwinnerList.push(win[j]);\n}\n}\nif(multiWin){\nwinner = winnerList[0];\nvar threeKind;\nfor(let j = 0; j < winnerList[0][0].length - 2; j++){\nif(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n&& winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]){\nthreeKind = Math.max(winnerList[0][0][j][0], threeKind);\n}\n}\nvar threeKind2 = 0\nfor(let j = 1; j < winnerList.length; j++){\nfor(let k = 0; k < winnerList[j][0].length - 2; k++){\nif(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]\n&& winnerList[j][0][k + 2][0] == winnerList[j][0][k + 3][0]){\nthreeKind2 = Math.max(winnerList[j][0][k][0], threeKind2);\n}\n}\nif(threeKind2 > threeKind){\nthreeKind = threeKind2;\nwinner = winnerList[j];\n}\n} \n}\nelse{\nwinner = winnerList[0];\nbreak;\n}\n}\n//two pair\nelse if(win[i][1] == 3){\nwinnerList.push(win[i])\nfor(let j = i + 1; i < win.length; i++){\nif(win[j][1] == 3){\nmultiWin = true;\nwinnerList.push(win[j]);\n}\n}\nif(multiWin){\nwinner = winnerList[0];\nvar maxTwoKind = 0;\nvar secondTwoKind = 0;\nfor(let j = 0; j < winnerList[0][0].length - 1; j++){\nif(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]/* && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]*/\n\n/*){\nif(maxTwoKind <= winnerList[0][0][j][0]){\nvar temp = maxTwoKind\nmaxTwoKind = winnerList[0][0][j][0];\nsecondTwoKind = temp;\n}\n//maxTwoKind = Math.max(maxTwoKind, winnerList[0][0][j][0]);\n//firstDone = true;\n}\n}\nvar maxTwoKind2 = 0\nvar secondTwoKind2 = 0;\nfor(let j = 1; j < winnerList.length; j++){\nfor(let k = 0; k < winnerList[j][0].length - 1; k++){\nif(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]){\nif(maxTwoKind2 <= winnerList[j][0][k][0]){\nvar temp = maxTwoKind2\nmaxTwoKind2 = winnerList[j][0][k][0];\nsecondTwoKind2 = temp;\n}\n}\n}\nif(maxTwoKind2 > maxTwoKind){\nmaxTwoKind = maxTwoKind2;\nwinner = winnerList[j];\n}\nelse if(maxTwoKind2 == maxTwoKind){\nif(secondTwoKind2 > secondTwoKind){\nsecondTwoKind = secondTwoKind2\nmaxTwoKind = maxTwoKind2;\nwinner = winnerList[j];\n}\n}\n} \n}\nelse{\nwinner = winnerList[0];\nbreak;\n}\n}\n//pair\nelse if(win[i][1] == 2){\nwinnerList.push(win[i])\nfor(let j = i + 1; i < win.length; i++){\nif(win[j][1] == 2){\nmultiWin = true;\nwinnerList.push(win[j]);\n}\n}\nif(multiWin){\nwinner = winnerList[0];\nvar pair;\nfor(let j = 0; j < winnerList[0][0].length - 1; j++){\nif(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]){\npair = Math.max(winnerList[0][0][j][0], pair);\n}\n}\nvar pair2 = 0\nfor(let j = 1; j < winnerList.length; j++){\nfor(let k = 0; k < winnerList[j][0].length - 1; k++){\nif(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]){\npair2 = Math.max(winnerList[j][0][k][0], pair2);\n}\n}\nif(pair2 > pair){\npair = pair2;\nwinner = winnerList[j];\n}\n} \n}\nelse{\nwinner = winnerList[0];\nbreak;\n}\n}\n//high card\nelse if(win[i][1] == 1){\nwinnerList.push(win[i])\nfor(let j = i + 1; i < win.length; i++){\nif(win[j][1] == 1){\nmultiWin = true;\nwinnerList.push(win[j]);\n}\n}\nif(multiWin){\nwinner = winnerList[0];\nvar high;\nfor(let j = 0; j < winnerList[0][0].length; j++){\nhigh = Math.max(winnerList[0][0][j][0], pair);\n}\nvar high2 = 0\nfor(let j = 1; j < winnerList.length; j++){\nfor(let k = 0; k < winnerList[j][0].length; k++){\nhigh2 = Math.max(winnerList[0][0][j][0], pair);\n}\nif(high2 > high){\nhigh = high2;\nwinner = winnerList[j];\n}\n} \n}\nelse{\nwinner = winnerList[0];\nbreak;\n}\n}\n}\nreturn winner;\n}*/\n\n\nexport default pokerGame;","map":{"version":3,"sources":["/Users/johnbrain/Projects/PokerGame/src/PokerGame.js"],"names":["players","deck","board","tempDeck","winner","pokerGame","i","push","tempi","Math","floor","random","length","tempj","add","splice","label","document","createElement","innerHTML","body","appendChild"],"mappings":"AACA,IAAIA,OAAO,GAAG,EAAd;AACA,IAAIC,IAAI,GAAG,EAAX;AACA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,QAAQ,GAAG,CAAf;AACA,IAAIC,MAAM,GAAG,CAAC,CAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,SAAT,GAAoB;AAChBJ,EAAAA,IAAI,GAAG,EAAP;AACAD,EAAAA,OAAO,GAAG,EAAV;AACAE,EAAAA,KAAK,GAAG,EAAR;;AACA,OAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,EAApB,EAAwBA,CAAC,EAAzB,EAA4B;AACxBL,IAAAA,IAAI,CAACM,IAAL,CAAU,CAAC,CAACD,CAAD,EAAI,CAAJ,CAAD,EAAS,CAACA,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAACA,CAAD,EAAI,CAAJ,CAAjB,EAAyB,CAACA,CAAD,EAAI,CAAJ,CAAzB,CAAV;AACH;;AACDN,EAAAA,OAAO,CAACO,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAO,GAAG,CAAV,EAAb;AACAP,EAAAA,OAAO,CAACO,IAAR,CAAa,CAAC,EAAD,EAAK,CAAL,GAAQ,IAAI,CAAZ,EAAb;;AAEA,OAAI,IAAID,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtB,QAAIE,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,IAAI,CAACW,MAAhC,CAAZ;AACA,QAAIC,KAAK,GAAIJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,IAAI,CAACO,KAAD,CAAJ,CAAYI,MAAvC,CAAb;AACAV,IAAAA,KAAK,CAACY,GAAN,CAAUb,IAAI,CAACO,KAAD,CAAJ,CAAYK,KAAZ,CAAV;AACAZ,IAAAA,IAAI,CAACO,KAAD,CAAJ,CAAYO,MAAZ,CAAmBF,KAAnB,EAA0B,CAA1B;AACH,GAfe,CAiBhB;;;AAEA,QAAMG,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAF,EAAAA,KAAK,CAACG,SAAN,GAAkB,MAAlB;AACAF,EAAAA,QAAQ,CAACG,IAAT,CAAcC,WAAd,CAA0BL,KAA1B,EArBgB,CAsBZ;AACP;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMoJ;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAwF;AACxF;AACA;AACA;;AAAgJ;AAChJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAA2I;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeX,SAAf","sourcesContent":["\nvar players = [];\nvar deck = [];\nvar board = [];\nvar tempDeck = 0;\nvar winner = -1;\n\n/*\n    9: straight flush\n    8: four of a kind\n    7: full house\n    6: flush\n    5: straight\n    4: 3 of a kind\n    3: 2 pair\n    2: pair\n    1: high card\n\n\n    1: diamond\n    2: spades\n    3: clubs\n    4: hearts\n */\n\nfunction pokerGame(){\n    deck = [];\n    players = [];\n    board = [];\n    for(let i = 2; i <= 13; i++){\n        deck.push([[i, 1], [i, 2], [i, 3], [i, 4]]);\n    }\n    players.push([5, 1][8, 3]);\n    players.push([11, 1][12, 3]);\n\n    for(let i = 0; i < 5; i++){\n        var tempi = Math.floor(Math.random() * deck.length);\n        var tempj =  Math.floor(Math.random() * deck[tempi].length);\n        board.add(deck[tempi][tempj]);\n        deck[tempi].splice(tempj, 1);\n    }\n\n    //var winPoint = win(players, board);\n    \n    const label = document.createElement(\"label\");\n    label.innerHTML = \"high\";\n    document.body.appendChild(label);\n        //tempDeck = deck;\n}\n\n/*function calc(players, deck, board){\n    var max = 0;\n    var playerProb = []\n    for(let i = 0; i < players.length; i++){\n        playerProb[i] = 0;\n    }\n    if(board.length == 0){\n        for(let i = 0; i < players.length; i++){\n            for(let j = 0; j < deck.length; j++);\n        }\n    }\n}*/\n\n/*function play(deck, board){\n    if(board.length == 0){\n        for(let i = 0; i < 3; i++){\n            var tempi = Math.floor(Math.random() * deck.length);\n            var tempj =  Math.floor(Math.random() * deck[tempi].length);\n            board.add(deck[tempi][tempj]);\n            deck[tempi].splice(tempj, 1);\n        }\n    }\n    else if(board.length == 3 || board.length == 4){\n        var tempi = Math.floor(Math.random() * deck.length);\n        var tempj =  Math.floor(Math.random() * deck[tempi].length);\n        board.add(deck[tempi][tempj]);\n        deck[tempi].splice(tempj, 1);\n    }\n}*/\n/*\nfunction win(player, board){\n    var winner = 0;\n    var max = 0;\n    var win = [];\n    var playerBoard = []\n\n    var repeat = true;\n    /*while(repeat){\n        repeat = false;\n        for(let i = 0; i < board.length - 1; i++){\n            if(board[i] > board[i + 1]){\n                var temp = board[i];\n                board[i] = board[i + 1];\n                board[i + 1] = temp;\n                repeat = true;\n            }\n        }\n    }*//*\n    for(let i = 0; i < player.length; i++){\n        win.push([[], 0, 0]);\n        playerBoard.push([player[i][0], player[i][1], board[0], board[1], board[2], board[3], board[4]]);\n        \n        //sorts the array\n        var repeat = true;\n        while(repeat){\n            repeat = false;\n            for(let j = 0; j < playerBoard.length - 1; j++){\n                if(playerBoard[i][0] > playerBoard[i + 1][0]){\n                    var temp = playerBoard[i];\n                    playerBoard[i] = playerBoard[i + 1];\n                    playerBoard[i + 1] = temp;\n                    repeat = true;\n                }\n            }\n        }\n    }\n\n    //straights and straight flush\n    for(let i = 0; i < playerBoard.length; i++){\n        var cnt = 0;\n        var straightFlush = 0;\n        var temp = []\n        for(let j = 0; j < playerBoard[i].length - 1; i++){\n            if(playerBoard[i][j][0] == playerBoard[i][j + 1][0]){\n                cnt += 1;\n                if(playerBoard[i][j][1] == playerBoard[i][j + 1][1]){\n                    straightFlush += 1;\n                    temp.push(playerBoard[i][j]);\n                }\n                else{\n                    temp.push(playerBoard[i][j]);\n                }\n            }\n            else{\n                cnt = 0;\n                straightFlush = 0;\n                temp = [];\n            }\n            if(cnt == 5 && straightFlush == 5){\n                //win[i] = temp;\n                win[i][0] = temp.slice();\n                win[i][1] = 9;\n                temp.splice(i, 1);\n                cnt--;\n                straightFlush--;\n            }\n            else if(cnt == 5){\n                win[i][0] = temp.slice();\n                win[i][1] = 5;\n                temp.splice(i, 1);\n                cnt--;\n                straightFlush--;\n            }\n        }\n    }\n\n    //pairs, 3 of a kind, full house, 4 of a kind\n    for(let i = 0; i < playerBoard.length; i++){\n        var pair = 0;\n        var twoPair = 0;\n        var secondPair = false;\n        var threePairs = 0;\n        var thirdPair = false;\n        var temp = [];\n        var card = playerBoard[i][0][0];\n        for(let j = 0; j < playerBoard[i].length - 1; i++){\n            if(card == playerBoard[i][j + 1][0]){\n                if(secondPair && !thirdPair){\n                    twoPair++;\n                }\n                else if(thirdPair){\n                    threePairs++;\n                }\n                else{\n                    pair++;\n                }\n                temp.push(card);\n                temp.push(playerBoard[i][i + 1]);\n            }\n            else{\n                if(pair >= 1){\n                    secondPair = true;\n                }\n                if(secondPair && secondPair >= 1){\n                    thirdPair = true;\n                }\n                card = playerBoard[i][j + 1][0];\n                //pair = 0;\n                //twoPair = 0;\n                //temp = [];\n            }\n\n            if(pair > 1){\n                win[i][0] = temp.slice;\n                //four of a kind\n                if(pair == 3 || twoPair == 3){\n                    win[i][1] = Math.max(win[i][1], 8);\n                }\n                //full house\n                else if((pair == 2 && twoPair == 1) || (pair == 1 && twoPair == 2)){\n                    win[i][1] = Math.max(win[i][1], 7);\n                }\n                else if((pair == 2 && threePairs == 1) || (pair == 1 && threePairs == 2)){\n                    win[i][1] = Math.max(win[i][1], 7);\n                }\n                else if((threePairs == 2 && twoPair == 1) || (threePairs == 1 && twoPair == 2)){\n                    win[i][1] = Math.max(win[i][1], 7);\n                }\n                //three of a kind\n                else if(pair == 2){\n                    win[i][1] = Math.max(win[i][1], 4);\n                }\n                //two pair\n                if((pair == 1 && twoPair == 1) || (pair == 1 && threePairs == 1) || (threePairs == 1 && twoPair == 1)){\n                    win[i][1] = Math.max(win[i][1], 3);\n                }\n                //pair\n                else if(pair == 1){\n                    win[i][1] = Math.max(win[i][1], 2);\n                } \n            }\n        }\n    }\n\n    //flush\n    for(let i = 0; i < playerBoard.length; i++){\n        var d = 0;\n        var s = 0;\n        var c = 0;\n        var h = 0;\n        for(let j = 0; j < playerBoard[i].length; j++){\n            if(playerBoard[i][j][1] == 1){\n                d++;\n            }\n            else if(playerBoard[i][j][1] == 2){\n                s++;\n            }\n            else if(playerBoard[i][j][1] == 3){\n                c++;\n            }\n            else if(playerBoard[i][j][1] == 4){\n                h++;\n            }\n        }\n        if(d >= 5){\n            win[i][1] = Math.max(win[i][1], 6);\n            for(let j = 0; j < playerBoard[i].length; j++){\n                if(playerBoard[i][j][1] == 1){\n                    win[i][0].push(playerBoard[i][j]);\n                }\n            }\n        }\n        else if(s >= 5){\n            win[i][1] = Math.max(win[i][1], 6);\n            for(let j = 0; j < playerBoard[i].length; j++){\n                if(playerBoard[i][j][1] == 2){\n                    win[i][0].push(playerBoard[i][j]);\n                }\n            }\n        }\n        else if(c >= 5){\n            win[i][1] = Math.max(win[i][1], 6);\n            for(let j = 0; j < playerBoard[i].length; j++){\n                if(playerBoard[i][j][1] == 3){\n                    win[i][0].push(playerBoard[i][j]);\n                }\n            }\n        }\n        else if(h >= 5){\n            win[i][1] = Math.max(win[i][1], 6);\n            for(let j = 0; j < playerBoard[i].length; j++){\n                if(playerBoard[i][j][1] == 4){\n                    win[i][0].push(playerBoard[i][j]);\n                }\n            }\n        }\n    }\n\n    //high card\n    for(let i = 0; i < playerBoard.length; i++){\n        if(win[i][1] == 0){\n            win[i][1] = 1;\n            win[i][0].push(playerBoard[playerBoard.length - 1]);\n        }   \n    }\n\n    //checks if anyone has a winner\n    //loop1: \n    for(let i = 0; i < win.length; i++){\n        var winnerList = [];\n        var multiWin = false;\n        //straight flush\n        if(win[i][1] == 9){\n            winnerList.push(win[i])\n            for(let j = i + 1; i < win.length; i++){\n                if(win[j][1] == 9){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                for(let j = 0; j < winnerList.length - 1; j++){\n                    if(winner[0][winner.length - 1][0] < winnerList[j][0][winner.length - 1][0]){\n                        winner = winnerList[j];\n                    }\n                } \n            }\n            else{\n                winner = winnerList[0];\n                break;\n            }\n        }\n        //four of a kind\n        else if(win[i][1] == 8){\n            winnerList.push(win[i])\n            for(let j = i + 1; i < win.length; i++){\n                if(win[j][1] == 8){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var fourKind;\n                for(let j = 0; j < winnerList[0][0].length - 3; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n                         && winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]/* && winnerList[0][0][j + 3][0] == winnerList[0][0][j + 4][0]*//*){\n                            fourKind = winnerList[0][0][j][0];\n                         }\n                }\n                var fourKind2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 3; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]\n                             && winnerList[j][0][k + 2][0] == winnerList[j][0][k + 3][0]){\n                                fourKind2 = winnerList[j][0][k][0];\n                             }\n                    }\n                    if(fourKind2 > fourKind){\n                        fourKind = fourKind2;\n                        winner = winnerList[j];\n                    }\n                } \n            }\n            else{\n                winner = winnerList[0];\n                break;\n            }\n        }\n        //full house\n        //FULL HOUSE IS NOT WORKING!!!!!!! THE TWO PAIR IS NOT COUNTING ALL POSSIBLE SCENARIOS\n        else if(win[i][1] == 7){\n            winnerList.push(win[i])\n            for(let j = i + 1; i < win.length; i++){\n                if(win[j][1] == 7){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var threeKind = 0;\n                var twoKind = 0;\n                for(let j = 0; j < winnerList[0][0].length - 2; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n                         /*&& winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]*//*){\n                            threeKind = Math.max(threeKind, winnerList[0][0][j][0]);\n                         }\n                    else if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] /*&& winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]*//*){\n                        twoKind = Math.max(twoKind, winnerList[0][0][j][0]);\n                    }\n                }\n                var threeKind2 = 0\n                var twoKind2 = 0;\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 2; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]){\n                                threeKind2 = Math.max(threeKind2, winnerList[j][0][k][0]);\n                             }\n                        else if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]){\n                            twoKind2 = Math.max(twoKind2, winnerList[j][0][k][0]);\n                        }\n                    }\n                    if(threeKind2 > threeKind){\n                        threeKind = threeKind2;\n                        winner = winnerList[j];\n                    }\n                    else if(threeKind2 == threeKind){\n                        if(twoKind2 > twoKind){\n                            twoKind = twoKind2\n                            threeKind = threeKind2;\n                            winner = winnerList[j];\n                        }\n                    }\n                } \n            }\n            else{\n                winner = winnerList[0];\n                break;\n            }\n        }\n        //flush\n        //STILL NEED TO ADD CHECKS FOR NEXT HIGHEST CARD IN CASE TOP HIGHERST CARDS ARE BOTH THE SAME\n        else if(win[i][1] == 6){\n            winnerList.push(win[i])\n            for(let j = i + 1; i < win.length; i++){\n                if(win[j][1] == 6){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var flush = winnerList[0][0][winnerList[0][0].length - 1][0];\n                var flush2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    flush2 = winnerList[j][0][winnerList[j][0].length - 1][0];\n                    if(flush2 > flush){\n                        flush = flush2;\n                        winner = winnerList[j];\n                    }\n                } \n            }\n            else{\n                winner = winnerList[0];\n                break;\n            }\n        }\n        //straight\n        //STILL NEED TO ADD CHECKS FOR STYRAIGHT SPECIFIC KICKERS\n        else if(win[i][1] == 5){\n            winnerList.push(win[i])\n            for(let j = i + 1; i < win.length; i++){\n                if(win[j][1] == 5){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var straight = winnerList[0][0][winnerList[0][0].length - 1][0];\n                var straight2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    straight2 = winnerList[j][0][winnerList[j][0].length - 1][0];\n                    if(straight2 > straight){\n                        straight = straight2;\n                        winner = winnerList[j];\n                    }\n                } \n            }\n            else{\n                winner = winnerList[0];\n                break;\n            }\n        }\n        //three of a kind\n        else if(win[i][1] == 4){\n            winnerList.push(win[i])\n            for(let j = i + 1; i < win.length; i++){\n                if(win[j][1] == 4){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var threeKind;\n                for(let j = 0; j < winnerList[0][0].length - 2; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n                         && winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]){\n                            threeKind = Math.max(winnerList[0][0][j][0], threeKind);\n                         }\n                }\n                var threeKind2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 2; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]\n                             && winnerList[j][0][k + 2][0] == winnerList[j][0][k + 3][0]){\n                                threeKind2 = Math.max(winnerList[j][0][k][0], threeKind2);\n                             }\n                    }\n                    if(threeKind2 > threeKind){\n                        threeKind = threeKind2;\n                        winner = winnerList[j];\n                    }\n                } \n            }\n            else{\n                winner = winnerList[0];\n                break;\n            }\n        }\n        //two pair\n        else if(win[i][1] == 3){\n            winnerList.push(win[i])\n            for(let j = i + 1; i < win.length; i++){\n                if(win[j][1] == 3){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var maxTwoKind = 0;\n                var secondTwoKind = 0;\n                for(let j = 0; j < winnerList[0][0].length - 1; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]/* && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]*//*){\n                        if(maxTwoKind <= winnerList[0][0][j][0]){\n                            var temp = maxTwoKind\n                            maxTwoKind = winnerList[0][0][j][0];\n                            secondTwoKind = temp;\n                        }\n                        //maxTwoKind = Math.max(maxTwoKind, winnerList[0][0][j][0]);\n                        //firstDone = true;\n                    }\n                }\n                var maxTwoKind2 = 0\n                var secondTwoKind2 = 0;\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 1; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]){\n                            if(maxTwoKind2 <= winnerList[j][0][k][0]){\n                                var temp = maxTwoKind2\n                                maxTwoKind2 = winnerList[j][0][k][0];\n                                secondTwoKind2 = temp;\n                            }\n                        }\n                    }\n                    if(maxTwoKind2 > maxTwoKind){\n                        maxTwoKind = maxTwoKind2;\n                        winner = winnerList[j];\n                    }\n                    else if(maxTwoKind2 == maxTwoKind){\n                        if(secondTwoKind2 > secondTwoKind){\n                            secondTwoKind = secondTwoKind2\n                            maxTwoKind = maxTwoKind2;\n                            winner = winnerList[j];\n                        }\n                    }\n                } \n            }\n            else{\n                winner = winnerList[0];\n                break;\n            }\n        }\n        //pair\n        else if(win[i][1] == 2){\n            winnerList.push(win[i])\n            for(let j = i + 1; i < win.length; i++){\n                if(win[j][1] == 2){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var pair;\n                for(let j = 0; j < winnerList[0][0].length - 1; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]){\n                        pair = Math.max(winnerList[0][0][j][0], pair);\n                         }\n                }\n                var pair2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 1; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]){\n                                pair2 = Math.max(winnerList[j][0][k][0], pair2);\n                             }\n                    }\n                    if(pair2 > pair){\n                        pair = pair2;\n                        winner = winnerList[j];\n                    }\n                } \n            }\n            else{\n                winner = winnerList[0];\n                break;\n            }\n        }\n        //high card\n        else if(win[i][1] == 1){\n            winnerList.push(win[i])\n            for(let j = i + 1; i < win.length; i++){\n                if(win[j][1] == 1){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var high;\n                for(let j = 0; j < winnerList[0][0].length; j++){\n                    high = Math.max(winnerList[0][0][j][0], pair);\n                }\n                var high2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length; k++){\n                        high2 = Math.max(winnerList[0][0][j][0], pair);\n                    }\n                    if(high2 > high){\n                        high = high2;\n                        winner = winnerList[j];\n                    }\n                } \n            }\n            else{\n                winner = winnerList[0];\n                break;\n            }\n        }\n    }\n    return winner;\n}*/\n\nexport default pokerGame;"]},"metadata":{},"sourceType":"module"}