{"ast":null,"code":"var players = [];\nvar deck = [];\nvar board = [];\nvar tempDeck = 0;\nvar winner = -1;\nvar cnt = 52;\n/*\n    9: straight flush\n    8: four of a kind\n    7: full house\n    6: flush\n    5: straight\n    4: 3 of a kind\n    3: 2 pair\n    2: pair\n    1: high card\n\n\n    1: diamond\n    2: spades\n    3: clubs\n    4: hearts\n */\n\nfunction pokerGame() {\n  deck = [];\n  players = [];\n  board = [];\n\n  for (let i = 2; i <= 13; i++) {\n    deck.push([[i, 1], [i, 2], [i, 3], [i, 4]]);\n  }\n\n  players.push([[12, 2], [12, 1]]);\n  players.push([[13, 1], [13, 3]]);\n  /*for(let i = 0; i < 5; i++){\n      var tempi = Math.floor(Math.random() * deck.length);\n      var tempj =  Math.floor(Math.random() * deck[tempi].length);\n      board.push(deck[tempi][tempj]);\n      deck[tempi].splice(tempj, 1);\n  }*/\n\n  /*board.push([2,2]);\n  board.push([3,3]);\n  board.push([7,2]);\n  board.push([4,1]);\n  board.push([10,3]);*/\n\n  var playerProb = [];\n\n  for (let i = 0; i < players.length; i++) {\n    playerProb[i] = 0;\n  }\n\n  var num = 0;\n  var cnt = 3;\n\n  while (num <= 5) {\n    board = [];\n\n    for (let i = 5; i >= 0; i--) {\n      board.push(deck[num][cnt]);\n      deck[num].splice(cnt, 1);\n\n      if (cnt == 0) {\n        num++;\n        cnt = 4;\n      } else {\n        cnt--;\n      }\n    }\n\n    return win(players, board);\n    playerProb[win(players, board)] += 1;\n  } //var winPoint = win(players, board);\n\n\n  var winPoint = playerProb;\n  const testL = document.createElement(\"label\");\n  testL.innerHTML = winPoint;\n  document.body.appendChild(testL); //tempDeck = deck;\n}\n\nfunction calc(players, deck, board) {\n  var max = 0;\n  var playerProb = [];\n\n  for (let i = 0; i < players.length; i++) {\n    playerProb[i] = 0;\n  }\n\n  if (board.length == 0) {\n    while (cnt >= 0) {\n      for (let i = 0; i < 5; i++) {\n        var tempi = Math.floor(Math.random() * deck.length);\n        var tempj = Math.floor(Math.random() * deck[tempi].length);\n        board.push(deck[tempi][tempj]);\n        deck[tempi].splice(tempj, 1);\n      }\n\n      cnt--;\n      playerProb[win(players, board)]++;\n    }\n  }\n}\n/*function play(deck, board){\n    if(board.length == 0){\n        for(let i = 0; i < 3; i++){\n            var tempi = Math.floor(Math.random() * deck.length);\n            var tempj =  Math.floor(Math.random() * deck[tempi].length);\n            board.add(deck[tempi][tempj]);\n            deck[tempi].splice(tempj, 1);\n        }\n    }\n    else if(board.length == 3 || board.length == 4){\n        var tempi = Math.floor(Math.random() * deck.length);\n        var tempj =  Math.floor(Math.random() * deck[tempi].length);\n        board.add(deck[tempi][tempj]);\n        deck[tempi].splice(tempj, 1);\n    }\n}*/\n\n\nfunction win(player, board) {\n  var winner = 0;\n  var max = 0;\n  var win = [];\n  var playerBoard = [];\n  var repeat = true;\n  /*while(repeat){\n      repeat = false;\n      for(let i = 0; i < board.length - 1; i++){\n          if(board[i] > board[i + 1]){\n              var temp = board[i];\n              board[i] = board[i + 1];\n              board[i + 1] = temp;\n              repeat = true;\n          }\n      }\n  }*/\n\n  for (let i = 0; i < player.length; i++) {\n    win.push([[], 0, 0]);\n    playerBoard.push([player[i][0], player[i][1], board[0], board[1], board[2], board[3], board[4]]); //return playerBoard[0][0][0];\n    //sorts the array\n\n    var repeat = true;\n\n    while (repeat) {\n      repeat = false;\n\n      for (let j = 0; j < playerBoard[i].length - 1; j++) {\n        if (playerBoard[i][j][0] > playerBoard[i][j + 1][0]) {\n          var temp = playerBoard[i][j];\n          playerBoard[i][j] = playerBoard[i][j + 1];\n          playerBoard[i][j + 1] = temp;\n          repeat = true;\n        }\n      }\n    }\n  } //straights and straight flush\n\n\n  for (let i = 0; i < playerBoard.length; i++) {\n    var cnt = 1;\n    var straightFlush = 1;\n    var repeat = false;\n    var temp = [];\n\n    for (let j = 0; j < playerBoard[i].length - 1; j++) {\n      if (!repeat) {\n        temp.push(playerBoard[i][j]);\n      }\n\n      if (playerBoard[i][j][0] + 1 == playerBoard[i][j + 1][0]) {\n        repeat = true;\n        cnt += 1;\n\n        if (playerBoard[i][j][1] == playerBoard[i][j + 1][1]) {\n          straightFlush += 1;\n          temp.push(playerBoard[i][j + 1]);\n        } else {\n          temp.push(playerBoard[i][j + 1]);\n        }\n      } else if (playerBoard[i][j][0] == playerBoard[i][j + 1][0]) {\n        repeat = true; //temp.push(playerBoard[i][j]);\n        //cnt++;\n      } else {\n        cnt = 1;\n        repeat = false;\n        straightFlush = 1;\n        temp = [];\n      }\n\n      if (cnt == 5 && straightFlush == 5) {\n        //win[i] = temp;\n        win[i][0] = temp.slice();\n        win[i][1] = 9;\n        temp.splice(0, 1);\n        cnt--;\n        straightFlush--;\n      } else if (cnt == 5) {\n        win[i][0] = temp.slice();\n        win[i][1] = 5;\n        temp.splice(0, 1);\n        cnt--;\n        straightFlush--;\n      }\n    }\n  } //pairs, 3 of a kind, full house, 4 of a kind\n\n\n  for (let i = 0; i < playerBoard.length; i++) {\n    var pair = 0;\n    var twoPair = 0;\n    var secondPair = false;\n    var threePairs = 0;\n    var thirdPair = false;\n    var temp = [];\n    var card = playerBoard[i][0];\n    var first = true;\n\n    for (let j = 0; j < playerBoard[i].length - 1; j++) {\n      if (card[0] == playerBoard[i][j + 1][0]) {\n        if (secondPair && !thirdPair) {\n          twoPair++;\n        } else if (thirdPair) {\n          threePairs++;\n        } else {\n          pair++;\n        } //temp.push(card);\n\n\n        if (first) {\n          temp.push(card);\n          first = false;\n        }\n\n        temp.push(playerBoard[i][j + 1]);\n      } else {\n        if (pair >= 1) {\n          secondPair = true;\n        }\n\n        if (secondPair && secondPair >= 1) {\n          thirdPair = true;\n        }\n\n        card = playerBoard[i][j + 1];\n        first = true; //pair = 0;\n        //twoPair = 0;\n        //temp = [];\n      }\n\n      if (pair >= 1) {\n        win[i][0] = temp.slice; //four of a kind\n\n        if (pair == 3 || twoPair == 3) {\n          win[i][1] = Math.max(win[i][1], 8);\n          win[i][0] = temp.slice();\n        } //full house\n        else if (pair == 2 && twoPair == 1 || pair == 1 && twoPair == 2) {\n          win[i][1] = Math.max(win[i][1], 7);\n          win[i][0] = temp.slice();\n        } else if (pair == 2 && threePairs == 1 || pair == 1 && threePairs == 2) {\n          win[i][1] = Math.max(win[i][1], 7);\n          win[i][0] = temp.slice();\n        } else if (threePairs == 2 && twoPair == 1 || threePairs == 1 && twoPair == 2) {\n          win[i][1] = Math.max(win[i][1], 7);\n          win[i][0] = temp.slice();\n        } //three of a kind\n        else if (pair == 2) {\n          win[i][1] = Math.max(win[i][1], 4);\n          win[i][0] = temp.slice();\n        } //two pair\n\n\n        if (pair == 1 && twoPair == 1 || pair == 1 && threePairs == 1 || threePairs == 1 && twoPair == 1) {\n          win[i][1] = Math.max(win[i][1], 3);\n          win[i][0] = temp.slice();\n        } //pair\n        else if (pair == 1) {\n          win[i][1] = Math.max(win[i][1], 2);\n          win[i][0] = temp.slice();\n        }\n      }\n    }\n  } //flush\n\n\n  for (let i = 0; i < playerBoard.length; i++) {\n    var d = 0;\n    var s = 0;\n    var c = 0;\n    var h = 0;\n\n    for (let j = 0; j < playerBoard[i].length; j++) {\n      if (playerBoard[i][j][1] == 1) {\n        d++;\n      } else if (playerBoard[i][j][1] == 2) {\n        s++;\n      } else if (playerBoard[i][j][1] == 3) {\n        c++;\n      } else if (playerBoard[i][j][1] == 4) {\n        h++;\n      }\n    }\n\n    if (d >= 5) {\n      win[i][1] = Math.max(win[i][1], 6);\n\n      for (let j = 0; j < playerBoard[i].length; j++) {\n        if (playerBoard[i][j][1] == 1) {\n          win[i][0].push(playerBoard[i][j]);\n        }\n      }\n    } else if (s >= 5) {\n      win[i][1] = Math.max(win[i][1], 6);\n\n      for (let j = 0; j < playerBoard[i].length; j++) {\n        if (playerBoard[i][j][1] == 2) {\n          win[i][0].push(playerBoard[i][j]);\n        }\n      }\n    } else if (c >= 5) {\n      win[i][1] = Math.max(win[i][1], 6);\n\n      for (let j = 0; j < playerBoard[i].length; j++) {\n        if (playerBoard[i][j][1] == 3) {\n          win[i][0].push(playerBoard[i][j]);\n        }\n      }\n    } else if (h >= 5) {\n      win[i][1] = Math.max(win[i][1], 6);\n\n      for (let j = 0; j < playerBoard[i].length; j++) {\n        if (playerBoard[i][j][1] == 4) {\n          win[i][0].push(playerBoard[i][j]);\n        }\n      }\n    }\n  } //high card\n\n\n  for (let i = 0; i < playerBoard.length; i++) {\n    if (win[i][1] == 0) {\n      win[i][1] = 1;\n      win[i][0].push(playerBoard[i][playerBoard[i].length - 1]);\n    }\n  } //checks if anyone has a winner\n  //loop1: \n\n\n  var winner = -1;\n\n  for (let i = 0; i < win.length; i++) {\n    var winnerList = [];\n    var multiWin = false; //straight flush\n\n    if (win[i][1] == 9) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 9) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n\n        for (let j = 0; j < winnerList.length - 1; j++) {\n          if (winner[0][winner.length - 1][0] < winnerList[j][0][winner.length - 1][0]) {\n            winner = winnerList[i][1];\n          }\n        }\n      } else {\n        //winner = winnerList[i][1];\n        winner = i;\n      }\n\n      break;\n    } //four of a kind\n    else if (win[i][1] == 8) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 8) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var fourKind;\n\n        for (let j = 0; j < winnerList[0][0].length - 3; j++) {\n          if (winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0] && winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]\n          /* && winnerList[0][0][j + 3][0] == winnerList[0][0][j + 4][0]*/\n          ) {\n            fourKind = winnerList[0][0][j][0];\n          }\n        }\n\n        var fourKind2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          for (let k = 0; k < winnerList[j][0].length - 3; k++) {\n            if (winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0] && winnerList[j][0][k + 2][0] == winnerList[j][0][k + 3][0]) {\n              fourKind2 = winnerList[j][0][k][0];\n            }\n          }\n\n          if (fourKind2 > fourKind) {\n            fourKind = fourKind2; //winner = winnerList[j];\n\n            winner = i;\n          }\n        }\n      } else {\n        //winner = winnerList[0];\n        winner = i;\n        break;\n      }\n    } //full house\n    //FULL HOUSE IS NOT WORKING!!!!!!! THE TWO PAIR IS NOT COUNTING ALL POSSIBLE SCENARIOS\n    else if (win[i][1] == 7) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 7) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var threeKind = 0;\n        var twoKind = 0;\n\n        for (let j = 0; j < winnerList[0][0].length - 2; j++) {\n          if (winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n          /*&& winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]*/\n          ) {\n            threeKind = Math.max(threeKind, winnerList[0][0][j][0]);\n          } else if (winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]\n          /*&& winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]*/\n          ) {\n            twoKind = Math.max(twoKind, winnerList[0][0][j][0]);\n          }\n        }\n\n        var threeKind2 = 0;\n        var twoKind2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          for (let k = 0; k < winnerList[j][0].length - 2; k++) {\n            if (winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]) {\n              threeKind2 = Math.max(threeKind2, winnerList[j][0][k][0]);\n            } else if (winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]) {\n              twoKind2 = Math.max(twoKind2, winnerList[j][0][k][0]);\n            }\n          }\n\n          if (threeKind2 > threeKind) {\n            threeKind = threeKind2;\n            winner = winnerList[j];\n          } else if (threeKind2 == threeKind) {\n            if (twoKind2 > twoKind) {\n              twoKind = twoKind2;\n              threeKind = threeKind2;\n              winner = i;\n            }\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    } //flush\n    //STILL NEED TO ADD CHECKS FOR NEXT HIGHEST CARD IN CASE TOP HIGHERST CARDS ARE BOTH THE SAME\n    else if (win[i][1] == 6) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 6) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var flush = winnerList[0][0][winnerList[0][0].length - 1][0];\n        var flush2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          flush2 = winnerList[j][0][winnerList[j][0].length - 1][0];\n\n          if (flush2 > flush) {\n            flush = flush2;\n            winner = i;\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    } //straight\n    //STILL NEED TO ADD CHECKS FOR STYRAIGHT SPECIFIC KICKERS\n    else if (win[i][1] == 5) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 5) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var straight = winnerList[0][0][winnerList[0][0].length - 1][0];\n        var straight2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          straight2 = winnerList[j][0][winnerList[j][0].length - 1][0];\n\n          if (straight2 > straight) {\n            straight = straight2;\n            winner = i;\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    } //three of a kind\n    else if (win[i][1] == 4) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 4) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var threeKind;\n\n        for (let j = 0; j < winnerList[0][0].length - 2; j++) {\n          if (winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0] && winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]) {\n            threeKind = Math.max(winnerList[0][0][j][0], threeKind);\n          }\n        }\n\n        var threeKind2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          for (let k = 0; k < winnerList[j][0].length - 2; k++) {\n            if (winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0] && winnerList[j][0][k + 2][0] == winnerList[j][0][k + 3][0]) {\n              threeKind2 = Math.max(winnerList[j][0][k][0], threeKind2);\n            }\n          }\n\n          if (threeKind2 > threeKind) {\n            threeKind = threeKind2;\n            winner = i;\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    } //two pair\n    else if (win[i][1] == 3) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 3) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var maxTwoKind = 0;\n        var secondTwoKind = 0;\n\n        for (let j = 0; j < winnerList[0][0].length - 1; j++) {\n          if (winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]\n          /* && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]*/\n          ) {\n            if (maxTwoKind <= winnerList[0][0][j][0]) {\n              var temp = maxTwoKind;\n              maxTwoKind = winnerList[0][0][j][0];\n              secondTwoKind = temp;\n            } //maxTwoKind = Math.max(maxTwoKind, winnerList[0][0][j][0]);\n            //firstDone = true;\n\n          }\n        }\n\n        var maxTwoKind2 = 0;\n        var secondTwoKind2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          for (let k = 0; k < winnerList[j][0].length - 1; k++) {\n            if (winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]) {\n              if (maxTwoKind2 <= winnerList[j][0][k][0]) {\n                var temp = maxTwoKind2;\n                maxTwoKind2 = winnerList[j][0][k][0];\n                secondTwoKind2 = temp;\n              }\n            }\n          }\n\n          if (maxTwoKind2 > maxTwoKind) {\n            maxTwoKind = maxTwoKind2;\n            winner = winnerList[j];\n          } else if (maxTwoKind2 == maxTwoKind) {\n            if (secondTwoKind2 > secondTwoKind) {\n              secondTwoKind = secondTwoKind2;\n              maxTwoKind = maxTwoKind2;\n              winner = i;\n            }\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    } //pair\n    else if (win[i][1] == 2) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 2) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var pair;\n\n        for (let j = 0; j < winnerList[0][0].length - 1; j++) {\n          if (winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]) {\n            pair = Math.max(winnerList[0][0][j][0], pair);\n          }\n        }\n\n        var pair2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          for (let k = 0; k < winnerList[j][0].length - 1; k++) {\n            if (winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]) {\n              pair2 = Math.max(winnerList[j][0][k][0], pair2);\n            }\n          }\n\n          if (pair2 > pair) {\n            pair = pair2;\n            winner = i;\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    } //high card\n    else if (win[i][1] == 1) {\n      winnerList.push(win[i]);\n\n      for (let j = i + 1; j < win.length; j++) {\n        if (win[j][1] == 1) {\n          multiWin = true;\n          winnerList.push(win[j]);\n        }\n      }\n\n      if (multiWin) {\n        winner = winnerList[0];\n        var high;\n\n        for (let j = 0; j < winnerList[0][0].length; j++) {\n          high = Math.max(winnerList[0][0][j][0], pair);\n        }\n\n        var high2 = 0;\n\n        for (let j = 1; j < winnerList.length; j++) {\n          for (let k = 0; k < winnerList[j][0].length; k++) {\n            high2 = Math.max(winnerList[j][0][k][0], pair);\n          }\n\n          if (high2 > high) {\n            high = high2;\n            winner = i;\n          }\n        }\n      } else {\n        winner = i;\n        break;\n      }\n    }\n  }\n\n  return winner;\n}\n\nexport default pokerGame;","map":{"version":3,"sources":["/Users/johnbrain/Projects/PokerGame/src/PokerGame.js"],"names":["players","deck","board","tempDeck","winner","cnt","pokerGame","i","push","playerProb","length","num","splice","win","winPoint","testL","document","createElement","innerHTML","body","appendChild","calc","max","tempi","Math","floor","random","tempj","player","playerBoard","repeat","j","temp","straightFlush","slice","pair","twoPair","secondPair","threePairs","thirdPair","card","first","d","s","c","h","winnerList","multiWin","fourKind","fourKind2","k","threeKind","twoKind","threeKind2","twoKind2","flush","flush2","straight","straight2","maxTwoKind","secondTwoKind","maxTwoKind2","secondTwoKind2","pair2","high","high2"],"mappings":"AACA,IAAIA,OAAO,GAAG,EAAd;AACA,IAAIC,IAAI,GAAG,EAAX;AACA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,QAAQ,GAAG,CAAf;AACA,IAAIC,MAAM,GAAG,CAAC,CAAd;AACA,IAAIC,GAAG,GAAG,EAAV;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,SAAT,GAAoB;AAChBL,EAAAA,IAAI,GAAG,EAAP;AACAD,EAAAA,OAAO,GAAG,EAAV;AACAE,EAAAA,KAAK,GAAG,EAAR;;AACA,OAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,EAApB,EAAwBA,CAAC,EAAzB,EAA4B;AACxBN,IAAAA,IAAI,CAACO,IAAL,CAAU,CAAC,CAACD,CAAD,EAAI,CAAJ,CAAD,EAAS,CAACA,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAACA,CAAD,EAAI,CAAJ,CAAjB,EAAyB,CAACA,CAAD,EAAI,CAAJ,CAAzB,CAAV;AACH;;AACDP,EAAAA,OAAO,CAACQ,IAAR,CAAa,CAAC,CAAC,EAAD,EAAK,CAAL,CAAD,EAAU,CAAC,EAAD,EAAK,CAAL,CAAV,CAAb;AACAR,EAAAA,OAAO,CAACQ,IAAR,CAAa,CAAC,CAAC,EAAD,EAAK,CAAL,CAAD,EAAU,CAAC,EAAD,EAAK,CAAL,CAAV,CAAb;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;;AAEI,MAAIC,UAAU,GAAG,EAAjB;;AACA,OAAI,IAAIF,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,OAAO,CAACU,MAA3B,EAAmCH,CAAC,EAApC,EAAuC;AACnCE,IAAAA,UAAU,CAACF,CAAD,CAAV,GAAgB,CAAhB;AACH;;AACD,MAAII,GAAG,GAAG,CAAV;AACA,MAAIN,GAAG,GAAG,CAAV;;AACA,SAAMM,GAAG,IAAI,CAAb,EAAe;AACXT,IAAAA,KAAK,GAAG,EAAR;;AACA,SAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,CAApB,EAAuBA,CAAC,EAAxB,EAA2B;AACvBL,MAAAA,KAAK,CAACM,IAAN,CAAWP,IAAI,CAACU,GAAD,CAAJ,CAAUN,GAAV,CAAX;AACAJ,MAAAA,IAAI,CAACU,GAAD,CAAJ,CAAUC,MAAV,CAAiBP,GAAjB,EAAsB,CAAtB;;AACA,UAAGA,GAAG,IAAI,CAAV,EAAY;AACRM,QAAAA,GAAG;AACHN,QAAAA,GAAG,GAAG,CAAN;AACH,OAHD,MAII;AACAA,QAAAA,GAAG;AACN;AACJ;;AAED,WAAOQ,GAAG,CAACb,OAAD,EAAUE,KAAV,CAAV;AACAO,IAAAA,UAAU,CAACI,GAAG,CAACb,OAAD,EAAUE,KAAV,CAAJ,CAAV,IAAmC,CAAnC;AACH,GA5Ce,CA8ChB;;;AACA,MAAIY,QAAQ,GAAGL,UAAf;AAEA,QAAMM,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAF,EAAAA,KAAK,CAACG,SAAN,GAAkBJ,QAAlB;AACAE,EAAAA,QAAQ,CAACG,IAAT,CAAcC,WAAd,CAA0BL,KAA1B,EAnDgB,CAoDZ;AACP;;AAED,SAASM,IAAT,CAAcrB,OAAd,EAAuBC,IAAvB,EAA6BC,KAA7B,EAAmC;AAC/B,MAAIoB,GAAG,GAAG,CAAV;AACA,MAAIb,UAAU,GAAG,EAAjB;;AACA,OAAI,IAAIF,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,OAAO,CAACU,MAA3B,EAAmCH,CAAC,EAApC,EAAuC;AACnCE,IAAAA,UAAU,CAACF,CAAD,CAAV,GAAgB,CAAhB;AACH;;AACD,MAAGL,KAAK,CAACQ,MAAN,IAAgB,CAAnB,EAAqB;AACjB,WAAML,GAAG,IAAI,CAAb,EAAe;AACX,WAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtB,YAAIgB,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBzB,IAAI,CAACS,MAAhC,CAAZ;AACA,YAAIiB,KAAK,GAAIH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBzB,IAAI,CAACsB,KAAD,CAAJ,CAAYb,MAAvC,CAAb;AACAR,QAAAA,KAAK,CAACM,IAAN,CAAWP,IAAI,CAACsB,KAAD,CAAJ,CAAYI,KAAZ,CAAX;AACA1B,QAAAA,IAAI,CAACsB,KAAD,CAAJ,CAAYX,MAAZ,CAAmBe,KAAnB,EAA0B,CAA1B;AACH;;AACDtB,MAAAA,GAAG;AACHI,MAAAA,UAAU,CAACI,GAAG,CAACb,OAAD,EAAUE,KAAV,CAAJ,CAAV;AACH;AACJ;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASW,GAAT,CAAae,MAAb,EAAqB1B,KAArB,EAA2B;AACvB,MAAIE,MAAM,GAAG,CAAb;AACA,MAAIkB,GAAG,GAAG,CAAV;AACA,MAAIT,GAAG,GAAG,EAAV;AACA,MAAIgB,WAAW,GAAG,EAAlB;AAEA,MAAIC,MAAM,GAAG,IAAb;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,OAAI,IAAIvB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGqB,MAAM,CAAClB,MAA1B,EAAkCH,CAAC,EAAnC,EAAsC;AAClCM,IAAAA,GAAG,CAACL,IAAJ,CAAS,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAT;AACAqB,IAAAA,WAAW,CAACrB,IAAZ,CAAiB,CAACoB,MAAM,CAACrB,CAAD,CAAN,CAAU,CAAV,CAAD,EAAeqB,MAAM,CAACrB,CAAD,CAAN,CAAU,CAAV,CAAf,EAA6BL,KAAK,CAAC,CAAD,CAAlC,EAAuCA,KAAK,CAAC,CAAD,CAA5C,EAAiDA,KAAK,CAAC,CAAD,CAAtD,EAA2DA,KAAK,CAAC,CAAD,CAAhE,EAAqEA,KAAK,CAAC,CAAD,CAA1E,CAAjB,EAFkC,CAIlC;AACA;;AACA,QAAI4B,MAAM,GAAG,IAAb;;AACA,WAAMA,MAAN,EAAa;AACTA,MAAAA,MAAM,GAAG,KAAT;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,WAAW,CAACtB,CAAD,CAAX,CAAeG,MAAf,GAAwB,CAA3C,EAA8CqB,CAAC,EAA/C,EAAkD;AAC9C,YAAGF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,EAAkB,CAAlB,IAAuBF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAC,GAAG,CAAnB,EAAsB,CAAtB,CAA1B,EAAmD;AAC/C,cAAIC,IAAI,GAAGH,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,CAAX;AACAF,UAAAA,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,IAAoBF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAC,GAAG,CAAnB,CAApB;AACAF,UAAAA,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAC,GAAG,CAAnB,IAAwBC,IAAxB;AACAF,UAAAA,MAAM,GAAG,IAAT;AACH;AACJ;AACJ;AACJ,GArCsB,CAuCvB;;;AACA,OAAI,IAAIvB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGsB,WAAW,CAACnB,MAA/B,EAAuCH,CAAC,EAAxC,EAA2C;AACvC,QAAIF,GAAG,GAAG,CAAV;AACA,QAAI4B,aAAa,GAAG,CAApB;AACA,QAAIH,MAAM,GAAG,KAAb;AACA,QAAIE,IAAI,GAAG,EAAX;;AACA,SAAI,IAAID,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,WAAW,CAACtB,CAAD,CAAX,CAAeG,MAAf,GAAwB,CAA3C,EAA8CqB,CAAC,EAA/C,EAAkD;AAC9C,UAAG,CAACD,MAAJ,EAAW;AACPE,QAAAA,IAAI,CAACxB,IAAL,CAAUqB,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,CAAV;AACH;;AACD,UAAGF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,EAAkB,CAAlB,IAAuB,CAAvB,IAA4BF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAC,GAAG,CAAnB,EAAsB,CAAtB,CAA/B,EAAwD;AACpDD,QAAAA,MAAM,GAAG,IAAT;AACAzB,QAAAA,GAAG,IAAI,CAAP;;AACA,YAAGwB,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,EAAkB,CAAlB,KAAwBF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAC,GAAG,CAAnB,EAAsB,CAAtB,CAA3B,EAAoD;AAChDE,UAAAA,aAAa,IAAI,CAAjB;AACAD,UAAAA,IAAI,CAACxB,IAAL,CAAUqB,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAC,GAAG,CAAnB,CAAV;AACH,SAHD,MAII;AACAC,UAAAA,IAAI,CAACxB,IAAL,CAAUqB,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAC,GAAG,CAAnB,CAAV;AACH;AACJ,OAVD,MAWK,IAAGF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,EAAkB,CAAlB,KAAwBF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAC,GAAG,CAAnB,EAAsB,CAAtB,CAA3B,EAAoD;AACrDD,QAAAA,MAAM,GAAG,IAAT,CADqD,CAEpD;AACD;AACH,OAJI,MAKD;AACAzB,QAAAA,GAAG,GAAG,CAAN;AACAyB,QAAAA,MAAM,GAAG,KAAT;AACAG,QAAAA,aAAa,GAAG,CAAhB;AACAD,QAAAA,IAAI,GAAG,EAAP;AACH;;AACD,UAAG3B,GAAG,IAAI,CAAP,IAAY4B,aAAa,IAAI,CAAhC,EAAkC;AAC9B;AACApB,QAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYyB,IAAI,CAACE,KAAL,EAAZ;AACArB,QAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAY,CAAZ;AACAyB,QAAAA,IAAI,CAACpB,MAAL,CAAY,CAAZ,EAAe,CAAf;AACAP,QAAAA,GAAG;AACH4B,QAAAA,aAAa;AAChB,OAPD,MAQK,IAAG5B,GAAG,IAAI,CAAV,EAAY;AACbQ,QAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYyB,IAAI,CAACE,KAAL,EAAZ;AACArB,QAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAY,CAAZ;AACAyB,QAAAA,IAAI,CAACpB,MAAL,CAAY,CAAZ,EAAe,CAAf;AACAP,QAAAA,GAAG;AACH4B,QAAAA,aAAa;AAChB;AACJ;AACJ,GAvFsB,CAyFvB;;;AACA,OAAI,IAAI1B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGsB,WAAW,CAACnB,MAA/B,EAAuCH,CAAC,EAAxC,EAA2C;AACvC,QAAI4B,IAAI,GAAG,CAAX;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,UAAU,GAAG,KAAjB;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,SAAS,GAAG,KAAhB;AACA,QAAIP,IAAI,GAAG,EAAX;AACA,QAAIQ,IAAI,GAAGX,WAAW,CAACtB,CAAD,CAAX,CAAe,CAAf,CAAX;AACA,QAAIkC,KAAK,GAAG,IAAZ;;AACA,SAAI,IAAIV,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,WAAW,CAACtB,CAAD,CAAX,CAAeG,MAAf,GAAwB,CAA3C,EAA8CqB,CAAC,EAA/C,EAAkD;AAC9C,UAAGS,IAAI,CAAC,CAAD,CAAJ,IAAWX,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAC,GAAG,CAAnB,EAAsB,CAAtB,CAAd,EAAuC;AACnC,YAAGM,UAAU,IAAI,CAACE,SAAlB,EAA4B;AACxBH,UAAAA,OAAO;AACV,SAFD,MAGK,IAAGG,SAAH,EAAa;AACdD,UAAAA,UAAU;AACb,SAFI,MAGD;AACAH,UAAAA,IAAI;AACP,SATkC,CAUnC;;;AACA,YAAGM,KAAH,EAAS;AACLT,UAAAA,IAAI,CAACxB,IAAL,CAAUgC,IAAV;AACAC,UAAAA,KAAK,GAAG,KAAR;AACH;;AACDT,QAAAA,IAAI,CAACxB,IAAL,CAAUqB,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAC,GAAG,CAAnB,CAAV;AACH,OAhBD,MAiBI;AACA,YAAGI,IAAI,IAAI,CAAX,EAAa;AACTE,UAAAA,UAAU,GAAG,IAAb;AACH;;AACD,YAAGA,UAAU,IAAIA,UAAU,IAAI,CAA/B,EAAiC;AAC7BE,UAAAA,SAAS,GAAG,IAAZ;AACH;;AACDC,QAAAA,IAAI,GAAGX,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAC,GAAG,CAAnB,CAAP;AACAU,QAAAA,KAAK,GAAG,IAAR,CARA,CASA;AACA;AACA;AACH;;AAED,UAAGN,IAAI,IAAI,CAAX,EAAa;AACTtB,QAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYyB,IAAI,CAACE,KAAjB,CADS,CAET;;AACA,YAAGC,IAAI,IAAI,CAAR,IAAaC,OAAO,IAAI,CAA3B,EAA6B;AACzBvB,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYiB,IAAI,CAACF,GAAL,CAAST,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,CAAT,EAAoB,CAApB,CAAZ;AACAM,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYyB,IAAI,CAACE,KAAL,EAAZ;AACH,SAHD,CAIA;AAJA,aAKK,IAAIC,IAAI,IAAI,CAAR,IAAaC,OAAO,IAAI,CAAzB,IAAgCD,IAAI,IAAI,CAAR,IAAaC,OAAO,IAAI,CAA3D,EAA8D;AAC/DvB,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYiB,IAAI,CAACF,GAAL,CAAST,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,CAAT,EAAoB,CAApB,CAAZ;AACAM,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYyB,IAAI,CAACE,KAAL,EAAZ;AACH,SAHI,MAIA,IAAIC,IAAI,IAAI,CAAR,IAAaG,UAAU,IAAI,CAA5B,IAAmCH,IAAI,IAAI,CAAR,IAAaG,UAAU,IAAI,CAAjE,EAAoE;AACrEzB,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYiB,IAAI,CAACF,GAAL,CAAST,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,CAAT,EAAoB,CAApB,CAAZ;AACAM,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYyB,IAAI,CAACE,KAAL,EAAZ;AACH,SAHI,MAIA,IAAII,UAAU,IAAI,CAAd,IAAmBF,OAAO,IAAI,CAA/B,IAAsCE,UAAU,IAAI,CAAd,IAAmBF,OAAO,IAAI,CAAvE,EAA0E;AAC3EvB,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYiB,IAAI,CAACF,GAAL,CAAST,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,CAAT,EAAoB,CAApB,CAAZ;AACAM,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYyB,IAAI,CAACE,KAAL,EAAZ;AACH,SAHI,CAIL;AAJK,aAKA,IAAGC,IAAI,IAAI,CAAX,EAAa;AACdtB,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYiB,IAAI,CAACF,GAAL,CAAST,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,CAAT,EAAoB,CAApB,CAAZ;AACAM,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYyB,IAAI,CAACE,KAAL,EAAZ;AACH,SAxBQ,CAyBT;;;AACA,YAAIC,IAAI,IAAI,CAAR,IAAaC,OAAO,IAAI,CAAzB,IAAgCD,IAAI,IAAI,CAAR,IAAaG,UAAU,IAAI,CAA3D,IAAkEA,UAAU,IAAI,CAAd,IAAmBF,OAAO,IAAI,CAAnG,EAAsG;AAClGvB,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYiB,IAAI,CAACF,GAAL,CAAST,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,CAAT,EAAoB,CAApB,CAAZ;AACAM,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYyB,IAAI,CAACE,KAAL,EAAZ;AACH,SAHD,CAIA;AAJA,aAKK,IAAGC,IAAI,IAAI,CAAX,EAAa;AACdtB,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYiB,IAAI,CAACF,GAAL,CAAST,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,CAAT,EAAoB,CAApB,CAAZ;AACAM,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYyB,IAAI,CAACE,KAAL,EAAZ;AACH;AACJ;AACJ;AACJ,GAxKsB,CA0KvB;;;AACA,OAAI,IAAI3B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGsB,WAAW,CAACnB,MAA/B,EAAuCH,CAAC,EAAxC,EAA2C;AACvC,QAAImC,CAAC,GAAG,CAAR;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,CAAC,GAAG,CAAR;;AACA,SAAI,IAAId,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,WAAW,CAACtB,CAAD,CAAX,CAAeG,MAAlC,EAA0CqB,CAAC,EAA3C,EAA8C;AAC1C,UAAGF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,EAAkB,CAAlB,KAAwB,CAA3B,EAA6B;AACzBW,QAAAA,CAAC;AACJ,OAFD,MAGK,IAAGb,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,EAAkB,CAAlB,KAAwB,CAA3B,EAA6B;AAC9BY,QAAAA,CAAC;AACJ,OAFI,MAGA,IAAGd,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,EAAkB,CAAlB,KAAwB,CAA3B,EAA6B;AAC9Ba,QAAAA,CAAC;AACJ,OAFI,MAGA,IAAGf,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,EAAkB,CAAlB,KAAwB,CAA3B,EAA6B;AAC9Bc,QAAAA,CAAC;AACJ;AACJ;;AACD,QAAGH,CAAC,IAAI,CAAR,EAAU;AACN7B,MAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYiB,IAAI,CAACF,GAAL,CAAST,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,CAAT,EAAoB,CAApB,CAAZ;;AACA,WAAI,IAAIwB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,WAAW,CAACtB,CAAD,CAAX,CAAeG,MAAlC,EAA0CqB,CAAC,EAA3C,EAA8C;AAC1C,YAAGF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,EAAkB,CAAlB,KAAwB,CAA3B,EAA6B;AACzBlB,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,EAAUC,IAAV,CAAeqB,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,CAAf;AACH;AACJ;AACJ,KAPD,MAQK,IAAGY,CAAC,IAAI,CAAR,EAAU;AACX9B,MAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYiB,IAAI,CAACF,GAAL,CAAST,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,CAAT,EAAoB,CAApB,CAAZ;;AACA,WAAI,IAAIwB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,WAAW,CAACtB,CAAD,CAAX,CAAeG,MAAlC,EAA0CqB,CAAC,EAA3C,EAA8C;AAC1C,YAAGF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,EAAkB,CAAlB,KAAwB,CAA3B,EAA6B;AACzBlB,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,EAAUC,IAAV,CAAeqB,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,CAAf;AACH;AACJ;AACJ,KAPI,MAQA,IAAGa,CAAC,IAAI,CAAR,EAAU;AACX/B,MAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYiB,IAAI,CAACF,GAAL,CAAST,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,CAAT,EAAoB,CAApB,CAAZ;;AACA,WAAI,IAAIwB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,WAAW,CAACtB,CAAD,CAAX,CAAeG,MAAlC,EAA0CqB,CAAC,EAA3C,EAA8C;AAC1C,YAAGF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,EAAkB,CAAlB,KAAwB,CAA3B,EAA6B;AACzBlB,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,EAAUC,IAAV,CAAeqB,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,CAAf;AACH;AACJ;AACJ,KAPI,MAQA,IAAGc,CAAC,IAAI,CAAR,EAAU;AACXhC,MAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAYiB,IAAI,CAACF,GAAL,CAAST,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,CAAT,EAAoB,CAApB,CAAZ;;AACA,WAAI,IAAIwB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,WAAW,CAACtB,CAAD,CAAX,CAAeG,MAAlC,EAA0CqB,CAAC,EAA3C,EAA8C;AAC1C,YAAGF,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,EAAkB,CAAlB,KAAwB,CAA3B,EAA6B;AACzBlB,UAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,EAAUC,IAAV,CAAeqB,WAAW,CAACtB,CAAD,CAAX,CAAewB,CAAf,CAAf;AACH;AACJ;AACJ;AACJ,GA9NsB,CAgOvB;;;AACA,OAAI,IAAIxB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGsB,WAAW,CAACnB,MAA/B,EAAuCH,CAAC,EAAxC,EAA2C;AACvC,QAAGM,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACdM,MAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,IAAY,CAAZ;AACAM,MAAAA,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,EAAUC,IAAV,CAAeqB,WAAW,CAACtB,CAAD,CAAX,CAAesB,WAAW,CAACtB,CAAD,CAAX,CAAeG,MAAf,GAAwB,CAAvC,CAAf;AACH;AACJ,GAtOsB,CAwOvB;AACA;;;AACA,MAAIN,MAAM,GAAG,CAAC,CAAd;;AACA,OAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGM,GAAG,CAACH,MAAvB,EAA+BH,CAAC,EAAhC,EAAmC;AAC/B,QAAIuC,UAAU,GAAG,EAAjB;AACA,QAAIC,QAAQ,GAAG,KAAf,CAF+B,CAG/B;;AACA,QAAGlC,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACduC,MAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACN,CAAD,CAAnB;;AACA,WAAI,IAAIwB,CAAC,GAAGxB,CAAC,GAAG,CAAhB,EAAmBwB,CAAC,GAAGlB,GAAG,CAACH,MAA3B,EAAmCqB,CAAC,EAApC,EAAuC;AACnC,YAAGlB,GAAG,CAACkB,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACdgB,UAAAA,QAAQ,GAAG,IAAX;AACAD,UAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACkB,CAAD,CAAnB;AACH;AACJ;;AACD,UAAGgB,QAAH,EAAY;AACR3C,QAAAA,MAAM,GAAG0C,UAAU,CAAC,CAAD,CAAnB;;AACA,aAAI,IAAIf,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAACpC,MAAX,GAAoB,CAAvC,EAA0CqB,CAAC,EAA3C,EAA8C;AAC1C,cAAG3B,MAAM,CAAC,CAAD,CAAN,CAAUA,MAAM,CAACM,MAAP,GAAgB,CAA1B,EAA6B,CAA7B,IAAkCoC,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiB3B,MAAM,CAACM,MAAP,GAAgB,CAAjC,EAAoC,CAApC,CAArC,EAA4E;AACxEN,YAAAA,MAAM,GAAG0C,UAAU,CAACvC,CAAD,CAAV,CAAc,CAAd,CAAT;AACH;AACJ;AACJ,OAPD,MAQI;AACA;AACAH,QAAAA,MAAM,GAAGG,CAAT;AACH;;AACD;AACH,KArBD,CAsBA;AAtBA,SAuBK,IAAGM,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACnBuC,MAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACN,CAAD,CAAnB;;AACA,WAAI,IAAIwB,CAAC,GAAGxB,CAAC,GAAG,CAAhB,EAAmBwB,CAAC,GAAGlB,GAAG,CAACH,MAA3B,EAAmCqB,CAAC,EAApC,EAAuC;AACnC,YAAGlB,GAAG,CAACkB,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACdgB,UAAAA,QAAQ,GAAG,IAAX;AACAD,UAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACkB,CAAD,CAAnB;AACH;AACJ;;AACD,UAAGgB,QAAH,EAAY;AACR3C,QAAAA,MAAM,GAAG0C,UAAU,CAAC,CAAD,CAAnB;AACA,YAAIE,QAAJ;;AACA,aAAI,IAAIjB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBpC,MAAjB,GAA0B,CAA7C,EAAgDqB,CAAC,EAAjD,EAAoD;AAChD,cAAGe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,KAA0Be,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAA1B,IAAwDe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB,KAA8Be,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAAtF,IACKe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB,KAA8Be,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB;AAA0B;AADhE,YACiI;AACzHiB,YAAAA,QAAQ,GAAGF,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,CAAX;AACF;AACT;;AACD,YAAIkB,SAAS,GAAG,CAAhB;;AACA,aAAI,IAAIlB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAACpC,MAA9B,EAAsCqB,CAAC,EAAvC,EAA0C;AACtC,eAAI,IAAImB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBrB,MAAjB,GAA0B,CAA7C,EAAgDwC,CAAC,EAAjD,EAAoD;AAChD,gBAAGJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,KAA0BJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAA1B,IAAwDJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,KAA8BJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAAtF,IACKJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,KAA8BJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,CADtC,EACiE;AACzDD,cAAAA,SAAS,GAAGH,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,CAAZ;AACF;AACT;;AACD,cAAGD,SAAS,GAAGD,QAAf,EAAwB;AACpBA,YAAAA,QAAQ,GAAGC,SAAX,CADoB,CAEpB;;AACA7C,YAAAA,MAAM,GAAGG,CAAT;AACH;AACJ;AACJ,OAvBD,MAwBI;AACA;AACAH,QAAAA,MAAM,GAAGG,CAAT;AACA;AACH;AACJ,KArCI,CAsCL;AACA;AAvCK,SAwCA,IAAGM,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACnBuC,MAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACN,CAAD,CAAnB;;AACA,WAAI,IAAIwB,CAAC,GAAGxB,CAAC,GAAG,CAAhB,EAAmBwB,CAAC,GAAGlB,GAAG,CAACH,MAA3B,EAAmCqB,CAAC,EAApC,EAAuC;AACnC,YAAGlB,GAAG,CAACkB,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACdgB,UAAAA,QAAQ,GAAG,IAAX;AACAD,UAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACkB,CAAD,CAAnB;AACH;AACJ;;AACD,UAAGgB,QAAH,EAAY;AACR3C,QAAAA,MAAM,GAAG0C,UAAU,CAAC,CAAD,CAAnB;AACA,YAAIK,SAAS,GAAG,CAAhB;AACA,YAAIC,OAAO,GAAG,CAAd;;AACA,aAAI,IAAIrB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBpC,MAAjB,GAA0B,CAA7C,EAAgDqB,CAAC,EAAjD,EAAoD;AAChD,cAAGe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,KAA0Be,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAA1B,IAAwDe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB,KAA8Be,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB;AACpF;AADL,YACqE;AAC7DoB,YAAAA,SAAS,GAAG3B,IAAI,CAACF,GAAL,CAAS6B,SAAT,EAAoBL,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,CAApB,CAAZ;AACF,WAHN,MAIK,IAAGe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,KAA0Be,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB;AAA2B;AAAxD,YAAwH;AACzHqB,YAAAA,OAAO,GAAG5B,IAAI,CAACF,GAAL,CAAS8B,OAAT,EAAkBN,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,CAAlB,CAAV;AACH;AACJ;;AACD,YAAIsB,UAAU,GAAG,CAAjB;AACA,YAAIC,QAAQ,GAAG,CAAf;;AACA,aAAI,IAAIvB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAACpC,MAA9B,EAAsCqB,CAAC,EAAvC,EAA0C;AACtC,eAAI,IAAImB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBrB,MAAjB,GAA0B,CAA7C,EAAgDwC,CAAC,EAAjD,EAAoD;AAChD,gBAAGJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,KAA0BJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAA1B,IAAwDJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,KAA8BJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAAzF,EAAoH;AAC5GG,cAAAA,UAAU,GAAG7B,IAAI,CAACF,GAAL,CAAS+B,UAAT,EAAqBP,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,CAArB,CAAb;AACF,aAFN,MAGK,IAAGJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,KAA0BJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAA7B,EAAwD;AACzDI,cAAAA,QAAQ,GAAG9B,IAAI,CAACF,GAAL,CAASgC,QAAT,EAAmBR,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,CAAnB,CAAX;AACH;AACJ;;AACD,cAAGG,UAAU,GAAGF,SAAhB,EAA0B;AACtBA,YAAAA,SAAS,GAAGE,UAAZ;AACAjD,YAAAA,MAAM,GAAG0C,UAAU,CAACf,CAAD,CAAnB;AACH,WAHD,MAIK,IAAGsB,UAAU,IAAIF,SAAjB,EAA2B;AAC5B,gBAAGG,QAAQ,GAAGF,OAAd,EAAsB;AAClBA,cAAAA,OAAO,GAAGE,QAAV;AACAH,cAAAA,SAAS,GAAGE,UAAZ;AACAjD,cAAAA,MAAM,GAAGG,CAAT;AACH;AACJ;AACJ;AACJ,OApCD,MAqCI;AACAH,QAAAA,MAAM,GAAGG,CAAT;AACA;AACH;AACJ,KAjDI,CAkDL;AACA;AAnDK,SAoDA,IAAGM,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACnBuC,MAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACN,CAAD,CAAnB;;AACA,WAAI,IAAIwB,CAAC,GAAGxB,CAAC,GAAG,CAAhB,EAAmBwB,CAAC,GAAGlB,GAAG,CAACH,MAA3B,EAAmCqB,CAAC,EAApC,EAAuC;AACnC,YAAGlB,GAAG,CAACkB,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACdgB,UAAAA,QAAQ,GAAG,IAAX;AACAD,UAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACkB,CAAD,CAAnB;AACH;AACJ;;AACD,UAAGgB,QAAH,EAAY;AACR3C,QAAAA,MAAM,GAAG0C,UAAU,CAAC,CAAD,CAAnB;AACA,YAAIS,KAAK,GAAGT,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBA,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBpC,MAAjB,GAA0B,CAA3C,EAA8C,CAA9C,CAAZ;AACA,YAAI8C,MAAM,GAAG,CAAb;;AACA,aAAI,IAAIzB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAACpC,MAA9B,EAAsCqB,CAAC,EAAvC,EAA0C;AACtCyB,UAAAA,MAAM,GAAGV,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBe,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBrB,MAAjB,GAA0B,CAA3C,EAA8C,CAA9C,CAAT;;AACA,cAAG8C,MAAM,GAAGD,KAAZ,EAAkB;AACdA,YAAAA,KAAK,GAAGC,MAAR;AACApD,YAAAA,MAAM,GAAGG,CAAT;AACH;AACJ;AACJ,OAXD,MAYI;AACAH,QAAAA,MAAM,GAAGG,CAAT;AACA;AACH;AACJ,KAxBI,CAyBL;AACA;AA1BK,SA2BA,IAAGM,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACnBuC,MAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACN,CAAD,CAAnB;;AACA,WAAI,IAAIwB,CAAC,GAAGxB,CAAC,GAAG,CAAhB,EAAmBwB,CAAC,GAAGlB,GAAG,CAACH,MAA3B,EAAmCqB,CAAC,EAApC,EAAuC;AACnC,YAAGlB,GAAG,CAACkB,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACdgB,UAAAA,QAAQ,GAAG,IAAX;AACAD,UAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACkB,CAAD,CAAnB;AACH;AACJ;;AACD,UAAGgB,QAAH,EAAY;AACR3C,QAAAA,MAAM,GAAG0C,UAAU,CAAC,CAAD,CAAnB;AACA,YAAIW,QAAQ,GAAGX,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBA,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBpC,MAAjB,GAA0B,CAA3C,EAA8C,CAA9C,CAAf;AACA,YAAIgD,SAAS,GAAG,CAAhB;;AACA,aAAI,IAAI3B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAACpC,MAA9B,EAAsCqB,CAAC,EAAvC,EAA0C;AACtC2B,UAAAA,SAAS,GAAGZ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBe,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBrB,MAAjB,GAA0B,CAA3C,EAA8C,CAA9C,CAAZ;;AACA,cAAGgD,SAAS,GAAGD,QAAf,EAAwB;AACpBA,YAAAA,QAAQ,GAAGC,SAAX;AACAtD,YAAAA,MAAM,GAAGG,CAAT;AACH;AACJ;AACJ,OAXD,MAYI;AACAH,QAAAA,MAAM,GAAGG,CAAT;AACA;AACH;AACJ,KAxBI,CAyBL;AAzBK,SA0BA,IAAGM,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACnBuC,MAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACN,CAAD,CAAnB;;AACA,WAAI,IAAIwB,CAAC,GAAGxB,CAAC,GAAG,CAAhB,EAAmBwB,CAAC,GAAGlB,GAAG,CAACH,MAA3B,EAAmCqB,CAAC,EAApC,EAAuC;AACnC,YAAGlB,GAAG,CAACkB,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACdgB,UAAAA,QAAQ,GAAG,IAAX;AACAD,UAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACkB,CAAD,CAAnB;AACH;AACJ;;AACD,UAAGgB,QAAH,EAAY;AACR3C,QAAAA,MAAM,GAAG0C,UAAU,CAAC,CAAD,CAAnB;AACA,YAAIK,SAAJ;;AACA,aAAI,IAAIpB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBpC,MAAjB,GAA0B,CAA7C,EAAgDqB,CAAC,EAAjD,EAAoD;AAChD,cAAGe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,KAA0Be,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAA1B,IAAwDe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB,KAA8Be,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAAtF,IACKe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB,KAA8Be,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB,CADtC,EACiE;AACzDoB,YAAAA,SAAS,GAAG3B,IAAI,CAACF,GAAL,CAASwB,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,CAAT,EAAiCoB,SAAjC,CAAZ;AACF;AACT;;AACD,YAAIE,UAAU,GAAG,CAAjB;;AACA,aAAI,IAAItB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAACpC,MAA9B,EAAsCqB,CAAC,EAAvC,EAA0C;AACtC,eAAI,IAAImB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBrB,MAAjB,GAA0B,CAA7C,EAAgDwC,CAAC,EAAjD,EAAoD;AAChD,gBAAGJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,KAA0BJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAA1B,IAAwDJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,KAA8BJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAAtF,IACKJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,KAA8BJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,CADtC,EACiE;AACzDG,cAAAA,UAAU,GAAG7B,IAAI,CAACF,GAAL,CAASwB,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,CAAT,EAAiCG,UAAjC,CAAb;AACF;AACT;;AACD,cAAGA,UAAU,GAAGF,SAAhB,EAA0B;AACtBA,YAAAA,SAAS,GAAGE,UAAZ;AACAjD,YAAAA,MAAM,GAAGG,CAAT;AACH;AACJ;AACJ,OAtBD,MAuBI;AACAH,QAAAA,MAAM,GAAGG,CAAT;AACA;AACH;AACJ,KAnCI,CAoCL;AApCK,SAqCA,IAAGM,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACnBuC,MAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACN,CAAD,CAAnB;;AACA,WAAI,IAAIwB,CAAC,GAAGxB,CAAC,GAAG,CAAhB,EAAmBwB,CAAC,GAAGlB,GAAG,CAACH,MAA3B,EAAmCqB,CAAC,EAApC,EAAuC;AACnC,YAAGlB,GAAG,CAACkB,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACdgB,UAAAA,QAAQ,GAAG,IAAX;AACAD,UAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACkB,CAAD,CAAnB;AACH;AACJ;;AACD,UAAGgB,QAAH,EAAY;AACR3C,QAAAA,MAAM,GAAG0C,UAAU,CAAC,CAAD,CAAnB;AACA,YAAIa,UAAU,GAAG,CAAjB;AACA,YAAIC,aAAa,GAAG,CAApB;;AACA,aAAI,IAAI7B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBpC,MAAjB,GAA0B,CAA7C,EAAgDqB,CAAC,EAAjD,EAAoD;AAChD,cAAGe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,KAA0Be,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB;AAA0B;AAAvD,YAAwH;AACpH,gBAAG4B,UAAU,IAAIb,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,CAAjB,EAAwC;AACpC,kBAAIC,IAAI,GAAG2B,UAAX;AACAA,cAAAA,UAAU,GAAGb,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,CAAb;AACA6B,cAAAA,aAAa,GAAG5B,IAAhB;AACH,aALmH,CAMpH;AACA;;AACH;AACJ;;AACD,YAAI6B,WAAW,GAAG,CAAlB;AACA,YAAIC,cAAc,GAAG,CAArB;;AACA,aAAI,IAAI/B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAACpC,MAA9B,EAAsCqB,CAAC,EAAvC,EAA0C;AACtC,eAAI,IAAImB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBrB,MAAjB,GAA0B,CAA7C,EAAgDwC,CAAC,EAAjD,EAAoD;AAChD,gBAAGJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,KAA0BJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAA7B,EAAwD;AACpD,kBAAGW,WAAW,IAAIf,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,CAAlB,EAAyC;AACrC,oBAAIlB,IAAI,GAAG6B,WAAX;AACAA,gBAAAA,WAAW,GAAGf,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,CAAd;AACAY,gBAAAA,cAAc,GAAG9B,IAAjB;AACH;AACJ;AACJ;;AACD,cAAG6B,WAAW,GAAGF,UAAjB,EAA4B;AACxBA,YAAAA,UAAU,GAAGE,WAAb;AACAzD,YAAAA,MAAM,GAAG0C,UAAU,CAACf,CAAD,CAAnB;AACH,WAHD,MAIK,IAAG8B,WAAW,IAAIF,UAAlB,EAA6B;AAC9B,gBAAGG,cAAc,GAAGF,aAApB,EAAkC;AAC9BA,cAAAA,aAAa,GAAGE,cAAhB;AACAH,cAAAA,UAAU,GAAGE,WAAb;AACAzD,cAAAA,MAAM,GAAGG,CAAT;AACH;AACJ;AACJ;AACJ,OAvCD,MAwCI;AACAH,QAAAA,MAAM,GAAGG,CAAT;AACA;AACH;AACJ,KApDI,CAqDL;AArDK,SAsDA,IAAGM,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACnBuC,MAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACN,CAAD,CAAnB;;AACA,WAAI,IAAIwB,CAAC,GAAGxB,CAAC,GAAG,CAAhB,EAAmBwB,CAAC,GAAGlB,GAAG,CAACH,MAA3B,EAAmCqB,CAAC,EAApC,EAAuC;AACnC,YAAGlB,GAAG,CAACkB,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACdgB,UAAAA,QAAQ,GAAG,IAAX;AACAD,UAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACkB,CAAD,CAAnB;AACH;AACJ;;AACD,UAAGgB,QAAH,EAAY;AACR3C,QAAAA,MAAM,GAAG0C,UAAU,CAAC,CAAD,CAAnB;AACA,YAAIX,IAAJ;;AACA,aAAI,IAAIJ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBpC,MAAjB,GAA0B,CAA7C,EAAgDqB,CAAC,EAAjD,EAAoD;AAChD,cAAGe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,KAA0Be,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAA7B,EAAwD;AACpDI,YAAAA,IAAI,GAAGX,IAAI,CAACF,GAAL,CAASwB,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,CAAT,EAAiCI,IAAjC,CAAP;AACE;AACT;;AACD,YAAI4B,KAAK,GAAG,CAAZ;;AACA,aAAI,IAAIhC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAACpC,MAA9B,EAAsCqB,CAAC,EAAvC,EAA0C;AACtC,eAAI,IAAImB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBrB,MAAjB,GAA0B,CAA7C,EAAgDwC,CAAC,EAAjD,EAAoD;AAChD,gBAAGJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,KAA0BJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAC,GAAG,CAArB,EAAwB,CAAxB,CAA7B,EAAwD;AAChDa,cAAAA,KAAK,GAAGvC,IAAI,CAACF,GAAL,CAASwB,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,CAAT,EAAiCa,KAAjC,CAAR;AACF;AACT;;AACD,cAAGA,KAAK,GAAG5B,IAAX,EAAgB;AACZA,YAAAA,IAAI,GAAG4B,KAAP;AACA3D,YAAAA,MAAM,GAAGG,CAAT;AACH;AACJ;AACJ,OApBD,MAqBI;AACAH,QAAAA,MAAM,GAAGG,CAAT;AACA;AACH;AACJ,KAjCI,CAkCL;AAlCK,SAmCA,IAAGM,GAAG,CAACN,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACnBuC,MAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACN,CAAD,CAAnB;;AACA,WAAI,IAAIwB,CAAC,GAAGxB,CAAC,GAAG,CAAhB,EAAmBwB,CAAC,GAAGlB,GAAG,CAACH,MAA3B,EAAmCqB,CAAC,EAApC,EAAuC;AACnC,YAAGlB,GAAG,CAACkB,CAAD,CAAH,CAAO,CAAP,KAAa,CAAhB,EAAkB;AACdgB,UAAAA,QAAQ,GAAG,IAAX;AACAD,UAAAA,UAAU,CAACtC,IAAX,CAAgBK,GAAG,CAACkB,CAAD,CAAnB;AACH;AACJ;;AACD,UAAGgB,QAAH,EAAY;AACR3C,QAAAA,MAAM,GAAG0C,UAAU,CAAC,CAAD,CAAnB;AACA,YAAIkB,IAAJ;;AACA,aAAI,IAAIjC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBpC,MAApC,EAA4CqB,CAAC,EAA7C,EAAgD;AAC5CiC,UAAAA,IAAI,GAAGxC,IAAI,CAACF,GAAL,CAASwB,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,EAAiBf,CAAjB,EAAoB,CAApB,CAAT,EAAiCI,IAAjC,CAAP;AACH;;AACD,YAAI8B,KAAK,GAAG,CAAZ;;AACA,aAAI,IAAIlC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,UAAU,CAACpC,MAA9B,EAAsCqB,CAAC,EAAvC,EAA0C;AACtC,eAAI,IAAImB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBrB,MAApC,EAA4CwC,CAAC,EAA7C,EAAgD;AAC5Ce,YAAAA,KAAK,GAAGzC,IAAI,CAACF,GAAL,CAASwB,UAAU,CAACf,CAAD,CAAV,CAAc,CAAd,EAAiBmB,CAAjB,EAAoB,CAApB,CAAT,EAAiCf,IAAjC,CAAR;AACH;;AACD,cAAG8B,KAAK,GAAGD,IAAX,EAAgB;AACZA,YAAAA,IAAI,GAAGC,KAAP;AACA7D,YAAAA,MAAM,GAAGG,CAAT;AACH;AACJ;AACJ,OAhBD,MAiBI;AACAH,QAAAA,MAAM,GAAGG,CAAT;AACA;AACH;AACJ;AACJ;;AACD,SAAOH,MAAP;AACH;;AAED,eAAeE,SAAf","sourcesContent":["\nvar players = [];\nvar deck = [];\nvar board = [];\nvar tempDeck = 0;\nvar winner = -1;\nvar cnt = 52;\n\n/*\n    9: straight flush\n    8: four of a kind\n    7: full house\n    6: flush\n    5: straight\n    4: 3 of a kind\n    3: 2 pair\n    2: pair\n    1: high card\n\n\n    1: diamond\n    2: spades\n    3: clubs\n    4: hearts\n */\n\nfunction pokerGame(){\n    deck = [];\n    players = [];\n    board = [];\n    for(let i = 2; i <= 13; i++){\n        deck.push([[i, 1], [i, 2], [i, 3], [i, 4]]);\n    }\n    players.push([[12, 2], [12, 1]]);\n    players.push([[13, 1], [13, 3]]);\n\n    /*for(let i = 0; i < 5; i++){\n        var tempi = Math.floor(Math.random() * deck.length);\n        var tempj =  Math.floor(Math.random() * deck[tempi].length);\n        board.push(deck[tempi][tempj]);\n        deck[tempi].splice(tempj, 1);\n    }*/\n    /*board.push([2,2]);\n    board.push([3,3]);\n    board.push([7,2]);\n    board.push([4,1]);\n    board.push([10,3]);*/\n\n    var playerProb = []\n    for(let i = 0; i < players.length; i++){\n        playerProb[i] = 0;\n    }\n    var num = 0;\n    var cnt = 3;\n    while(num <= 5){\n        board = [];\n        for(let i = 5; i >= 0; i--){\n            board.push(deck[num][cnt]);\n            deck[num].splice(cnt, 1);\n            if(cnt == 0){\n                num++;\n                cnt = 4;\n            }\n            else{\n                cnt--;\n            }\n        }\n\n        return win(players, board);\n        playerProb[win(players, board)] += 1;\n    }\n\n    //var winPoint = win(players, board);\n    var winPoint = playerProb;\n    \n    const testL = document.createElement(\"label\");\n    testL.innerHTML = winPoint;\n    document.body.appendChild(testL);\n        //tempDeck = deck;\n}\n\nfunction calc(players, deck, board){\n    var max = 0;\n    var playerProb = []\n    for(let i = 0; i < players.length; i++){\n        playerProb[i] = 0;\n    }\n    if(board.length == 0){\n        while(cnt >= 0){\n            for(let i = 0; i < 5; i++){\n                var tempi = Math.floor(Math.random() * deck.length);\n                var tempj =  Math.floor(Math.random() * deck[tempi].length);\n                board.push(deck[tempi][tempj]);\n                deck[tempi].splice(tempj, 1);\n            }\n            cnt--;\n            playerProb[win(players, board)]++;\n        }\n    }\n}\n\n/*function play(deck, board){\n    if(board.length == 0){\n        for(let i = 0; i < 3; i++){\n            var tempi = Math.floor(Math.random() * deck.length);\n            var tempj =  Math.floor(Math.random() * deck[tempi].length);\n            board.add(deck[tempi][tempj]);\n            deck[tempi].splice(tempj, 1);\n        }\n    }\n    else if(board.length == 3 || board.length == 4){\n        var tempi = Math.floor(Math.random() * deck.length);\n        var tempj =  Math.floor(Math.random() * deck[tempi].length);\n        board.add(deck[tempi][tempj]);\n        deck[tempi].splice(tempj, 1);\n    }\n}*/\n\nfunction win(player, board){\n    var winner = 0;\n    var max = 0;\n    var win = [];\n    var playerBoard = []\n\n    var repeat = true;\n    /*while(repeat){\n        repeat = false;\n        for(let i = 0; i < board.length - 1; i++){\n            if(board[i] > board[i + 1]){\n                var temp = board[i];\n                board[i] = board[i + 1];\n                board[i + 1] = temp;\n                repeat = true;\n            }\n        }\n    }*/\n    \n    for(let i = 0; i < player.length; i++){\n        win.push([[], 0, 0]);\n        playerBoard.push([player[i][0], player[i][1], board[0], board[1], board[2], board[3], board[4]]);\n        \n        //return playerBoard[0][0][0];\n        //sorts the array\n        var repeat = true;\n        while(repeat){\n            repeat = false;\n            for(let j = 0; j < playerBoard[i].length - 1; j++){\n                if(playerBoard[i][j][0] > playerBoard[i][j + 1][0]){\n                    var temp = playerBoard[i][j];\n                    playerBoard[i][j] = playerBoard[i][j + 1];\n                    playerBoard[i][j + 1] = temp;\n                    repeat = true;\n                }\n            }\n        }\n    }\n\n    //straights and straight flush\n    for(let i = 0; i < playerBoard.length; i++){\n        var cnt = 1;\n        var straightFlush = 1;\n        var repeat = false;\n        var temp = [];\n        for(let j = 0; j < playerBoard[i].length - 1; j++){\n            if(!repeat){\n                temp.push(playerBoard[i][j]);\n            }\n            if(playerBoard[i][j][0] + 1 == playerBoard[i][j + 1][0]){\n                repeat = true;\n                cnt += 1;\n                if(playerBoard[i][j][1] == playerBoard[i][j + 1][1]){\n                    straightFlush += 1;\n                    temp.push(playerBoard[i][j + 1]);\n                }\n                else{\n                    temp.push(playerBoard[i][j + 1]);\n                }\n            }\n            else if(playerBoard[i][j][0] == playerBoard[i][j + 1][0]){\n                repeat = true;\n                 //temp.push(playerBoard[i][j]);\n                //cnt++;\n            }\n            else{\n                cnt = 1;\n                repeat = false;\n                straightFlush = 1;\n                temp = [];\n            }\n            if(cnt == 5 && straightFlush == 5){\n                //win[i] = temp;\n                win[i][0] = temp.slice();\n                win[i][1] = 9;\n                temp.splice(0, 1);\n                cnt--;\n                straightFlush--;\n            }\n            else if(cnt == 5){\n                win[i][0] = temp.slice();\n                win[i][1] = 5;\n                temp.splice(0, 1);\n                cnt--;\n                straightFlush--;\n            }\n        }\n    }\n\n    //pairs, 3 of a kind, full house, 4 of a kind\n    for(let i = 0; i < playerBoard.length; i++){\n        var pair = 0;\n        var twoPair = 0;\n        var secondPair = false;\n        var threePairs = 0;\n        var thirdPair = false;\n        var temp = [];\n        var card = playerBoard[i][0];\n        var first = true;\n        for(let j = 0; j < playerBoard[i].length - 1; j++){\n            if(card[0] == playerBoard[i][j + 1][0]){\n                if(secondPair && !thirdPair){\n                    twoPair++;\n                }\n                else if(thirdPair){\n                    threePairs++;\n                }\n                else{\n                    pair++;\n                }\n                //temp.push(card);\n                if(first){\n                    temp.push(card);\n                    first = false;\n                }\n                temp.push(playerBoard[i][j + 1]);\n            }\n            else{\n                if(pair >= 1){\n                    secondPair = true;\n                }\n                if(secondPair && secondPair >= 1){\n                    thirdPair = true;\n                }\n                card = playerBoard[i][j + 1];\n                first = true;\n                //pair = 0;\n                //twoPair = 0;\n                //temp = [];\n            }\n\n            if(pair >= 1){\n                win[i][0] = temp.slice;\n                //four of a kind\n                if(pair == 3 || twoPair == 3){\n                    win[i][1] = Math.max(win[i][1], 8);\n                    win[i][0] = temp.slice();\n                }\n                //full house\n                else if((pair == 2 && twoPair == 1) || (pair == 1 && twoPair == 2)){\n                    win[i][1] = Math.max(win[i][1], 7);\n                    win[i][0] = temp.slice();\n                }\n                else if((pair == 2 && threePairs == 1) || (pair == 1 && threePairs == 2)){\n                    win[i][1] = Math.max(win[i][1], 7);\n                    win[i][0] = temp.slice();\n                }\n                else if((threePairs == 2 && twoPair == 1) || (threePairs == 1 && twoPair == 2)){\n                    win[i][1] = Math.max(win[i][1], 7);\n                    win[i][0] = temp.slice();\n                }\n                //three of a kind\n                else if(pair == 2){\n                    win[i][1] = Math.max(win[i][1], 4);\n                    win[i][0] = temp.slice();\n                }\n                //two pair\n                if((pair == 1 && twoPair == 1) || (pair == 1 && threePairs == 1) || (threePairs == 1 && twoPair == 1)){\n                    win[i][1] = Math.max(win[i][1], 3);\n                    win[i][0] = temp.slice();\n                }\n                //pair\n                else if(pair == 1){\n                    win[i][1] = Math.max(win[i][1], 2);\n                    win[i][0] = temp.slice();\n                } \n            }\n        }\n    }\n\n    //flush\n    for(let i = 0; i < playerBoard.length; i++){\n        var d = 0;\n        var s = 0;\n        var c = 0;\n        var h = 0;\n        for(let j = 0; j < playerBoard[i].length; j++){\n            if(playerBoard[i][j][1] == 1){\n                d++;\n            }\n            else if(playerBoard[i][j][1] == 2){\n                s++;\n            }\n            else if(playerBoard[i][j][1] == 3){\n                c++;\n            }\n            else if(playerBoard[i][j][1] == 4){\n                h++;\n            }\n        }\n        if(d >= 5){\n            win[i][1] = Math.max(win[i][1], 6);\n            for(let j = 0; j < playerBoard[i].length; j++){\n                if(playerBoard[i][j][1] == 1){\n                    win[i][0].push(playerBoard[i][j]);\n                }\n            }\n        }\n        else if(s >= 5){\n            win[i][1] = Math.max(win[i][1], 6);\n            for(let j = 0; j < playerBoard[i].length; j++){\n                if(playerBoard[i][j][1] == 2){\n                    win[i][0].push(playerBoard[i][j]);\n                }\n            }\n        }\n        else if(c >= 5){\n            win[i][1] = Math.max(win[i][1], 6);\n            for(let j = 0; j < playerBoard[i].length; j++){\n                if(playerBoard[i][j][1] == 3){\n                    win[i][0].push(playerBoard[i][j]);\n                }\n            }\n        }\n        else if(h >= 5){\n            win[i][1] = Math.max(win[i][1], 6);\n            for(let j = 0; j < playerBoard[i].length; j++){\n                if(playerBoard[i][j][1] == 4){\n                    win[i][0].push(playerBoard[i][j]);\n                }\n            }\n        }\n    }\n\n    //high card\n    for(let i = 0; i < playerBoard.length; i++){\n        if(win[i][1] == 0){\n            win[i][1] = 1;\n            win[i][0].push(playerBoard[i][playerBoard[i].length - 1]);\n        }   \n    }\n\n    //checks if anyone has a winner\n    //loop1: \n    var winner = -1;\n    for(let i = 0; i < win.length; i++){\n        var winnerList = [];\n        var multiWin = false;\n        //straight flush\n        if(win[i][1] == 9){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 9){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                for(let j = 0; j < winnerList.length - 1; j++){\n                    if(winner[0][winner.length - 1][0] < winnerList[j][0][winner.length - 1][0]){\n                        winner = winnerList[i][1];\n                    }\n                } \n            }\n            else{\n                //winner = winnerList[i][1];\n                winner = i;\n            }\n            break;\n        }\n        //four of a kind\n        else if(win[i][1] == 8){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 8){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var fourKind;\n                for(let j = 0; j < winnerList[0][0].length - 3; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n                         && winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]/* && winnerList[0][0][j + 3][0] == winnerList[0][0][j + 4][0]*/){\n                            fourKind = winnerList[0][0][j][0];\n                         }\n                }\n                var fourKind2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 3; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]\n                             && winnerList[j][0][k + 2][0] == winnerList[j][0][k + 3][0]){\n                                fourKind2 = winnerList[j][0][k][0];\n                             }\n                    }\n                    if(fourKind2 > fourKind){\n                        fourKind = fourKind2;\n                        //winner = winnerList[j];\n                        winner = i;\n                    }\n                } \n            }\n            else{\n                //winner = winnerList[0];\n                winner = i;\n                break;\n            }\n        }\n        //full house\n        //FULL HOUSE IS NOT WORKING!!!!!!! THE TWO PAIR IS NOT COUNTING ALL POSSIBLE SCENARIOS\n        else if(win[i][1] == 7){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 7){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var threeKind = 0;\n                var twoKind = 0;\n                for(let j = 0; j < winnerList[0][0].length - 2; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n                         /*&& winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]*/){\n                            threeKind = Math.max(threeKind, winnerList[0][0][j][0]);\n                         }\n                    else if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] /*&& winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]*/){\n                        twoKind = Math.max(twoKind, winnerList[0][0][j][0]);\n                    }\n                }\n                var threeKind2 = 0\n                var twoKind2 = 0;\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 2; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]){\n                                threeKind2 = Math.max(threeKind2, winnerList[j][0][k][0]);\n                             }\n                        else if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]){\n                            twoKind2 = Math.max(twoKind2, winnerList[j][0][k][0]);\n                        }\n                    }\n                    if(threeKind2 > threeKind){\n                        threeKind = threeKind2;\n                        winner = winnerList[j];\n                    }\n                    else if(threeKind2 == threeKind){\n                        if(twoKind2 > twoKind){\n                            twoKind = twoKind2\n                            threeKind = threeKind2;\n                            winner = i;\n                        }\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n        //flush\n        //STILL NEED TO ADD CHECKS FOR NEXT HIGHEST CARD IN CASE TOP HIGHERST CARDS ARE BOTH THE SAME\n        else if(win[i][1] == 6){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 6){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var flush = winnerList[0][0][winnerList[0][0].length - 1][0];\n                var flush2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    flush2 = winnerList[j][0][winnerList[j][0].length - 1][0];\n                    if(flush2 > flush){\n                        flush = flush2;\n                        winner = i;\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n        //straight\n        //STILL NEED TO ADD CHECKS FOR STYRAIGHT SPECIFIC KICKERS\n        else if(win[i][1] == 5){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 5){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var straight = winnerList[0][0][winnerList[0][0].length - 1][0];\n                var straight2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    straight2 = winnerList[j][0][winnerList[j][0].length - 1][0];\n                    if(straight2 > straight){\n                        straight = straight2;\n                        winner = i;\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n        //three of a kind\n        else if(win[i][1] == 4){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 4){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var threeKind;\n                for(let j = 0; j < winnerList[0][0].length - 2; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0] && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]\n                         && winnerList[0][0][j + 2][0] == winnerList[0][0][j + 3][0]){\n                            threeKind = Math.max(winnerList[0][0][j][0], threeKind);\n                         }\n                }\n                var threeKind2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 2; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0] && winnerList[j][0][k + 1][0] == winnerList[j][0][k + 2][0]\n                             && winnerList[j][0][k + 2][0] == winnerList[j][0][k + 3][0]){\n                                threeKind2 = Math.max(winnerList[j][0][k][0], threeKind2);\n                             }\n                    }\n                    if(threeKind2 > threeKind){\n                        threeKind = threeKind2;\n                        winner = i;\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n        //two pair\n        else if(win[i][1] == 3){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 3){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var maxTwoKind = 0;\n                var secondTwoKind = 0;\n                for(let j = 0; j < winnerList[0][0].length - 1; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]/* && winnerList[0][0][j + 1][0] == winnerList[0][0][j + 2][0]*/){\n                        if(maxTwoKind <= winnerList[0][0][j][0]){\n                            var temp = maxTwoKind\n                            maxTwoKind = winnerList[0][0][j][0];\n                            secondTwoKind = temp;\n                        }\n                        //maxTwoKind = Math.max(maxTwoKind, winnerList[0][0][j][0]);\n                        //firstDone = true;\n                    }\n                }\n                var maxTwoKind2 = 0\n                var secondTwoKind2 = 0;\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 1; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]){\n                            if(maxTwoKind2 <= winnerList[j][0][k][0]){\n                                var temp = maxTwoKind2\n                                maxTwoKind2 = winnerList[j][0][k][0];\n                                secondTwoKind2 = temp;\n                            }\n                        }\n                    }\n                    if(maxTwoKind2 > maxTwoKind){\n                        maxTwoKind = maxTwoKind2;\n                        winner = winnerList[j];\n                    }\n                    else if(maxTwoKind2 == maxTwoKind){\n                        if(secondTwoKind2 > secondTwoKind){\n                            secondTwoKind = secondTwoKind2\n                            maxTwoKind = maxTwoKind2;\n                            winner = i;\n                        }\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n        //pair\n        else if(win[i][1] == 2){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 2){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var pair;\n                for(let j = 0; j < winnerList[0][0].length - 1; j++){\n                    if(winnerList[0][0][j][0] == winnerList[0][0][j + 1][0]){\n                        pair = Math.max(winnerList[0][0][j][0], pair);\n                         }\n                }\n                var pair2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length - 1; k++){\n                        if(winnerList[j][0][k][0] == winnerList[j][0][k + 1][0]){\n                                pair2 = Math.max(winnerList[j][0][k][0], pair2);\n                             }\n                    }\n                    if(pair2 > pair){\n                        pair = pair2;\n                        winner = i;\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n        //high card\n        else if(win[i][1] == 1){\n            winnerList.push(win[i])\n            for(let j = i + 1; j < win.length; j++){\n                if(win[j][1] == 1){\n                    multiWin = true;\n                    winnerList.push(win[j]);\n                }\n            }\n            if(multiWin){\n                winner = winnerList[0];\n                var high;\n                for(let j = 0; j < winnerList[0][0].length; j++){\n                    high = Math.max(winnerList[0][0][j][0], pair);\n                }\n                var high2 = 0\n                for(let j = 1; j < winnerList.length; j++){\n                    for(let k = 0; k < winnerList[j][0].length; k++){\n                        high2 = Math.max(winnerList[j][0][k][0], pair);\n                    }\n                    if(high2 > high){\n                        high = high2;\n                        winner = i;\n                    }\n                } \n            }\n            else{\n                winner = i;\n                break;\n            }\n        }\n    }\n    return winner;\n}\n\nexport default pokerGame;"]},"metadata":{},"sourceType":"module"}